#+TITLE: Emacs Configuration
#+OPTIONS: toc:2 num:nil

This file re-organises [[https://github.com/yang-l/configurations][the old init files]]

* Installation

Backup existing =~/.emacs.d=, and then follow by

#+BEGIN_SRC bash
git clone https://github.com/yang-l/emacs.d.git ~/.emacs.d
#+END_SRC

* Emacs init.el

** Initialisation

*** Load files

Path to non ELPA included lisp files
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

Path to personal/credential info in =~/.emacs.d/private.el=
#+BEGIN_SRC emacs-lisp
(if (file-exists-p (concat user-emacs-directory "private.el"))
    (load (expand-file-name "private.el" user-emacs-directory))
(defvar default-directory                       ; default
  (concat (getenv "HOME") "/"))
(defvar my-win-default-directory                ; folder
  default-directory)
(defvar my-lin-default-directory
  default-directory)
(defvar my-erc-nick "")                         ; ERC
(defvar my-erc-user-full-name "")
(defvar my-erc-email-userid ""))
#+END_SRC

*** ELPA

#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list 'package-archives
                '("melpa" . "https://melpa.org/packages/") t)
    (package-initialize))
#+END_SRC

Define packages and install them in case of missing
#+BEGIN_SRC emacs-lisp
(defvar my-packages '(
    company yasnippet flycheck git-gutter magit ; Programming
    projectile helm-projectile swiper-helm
    js3-mode web-mode tern-auto-complete        ; JavaScript/Web
    elpy                                        ; Python
    groovy-mode                                 ; Groovy
    zenburn-theme color-theme-solarized diminish; UI
    neotree undo-tree window-numbering helm     ; Editing
    evil mwim multiple-cursors expand-region
    indent-guide avy vimish-fold
    dockerfile-mode yaml-mode jinja2-mode       ; Infrastructure
    ansible-doc
    which-key symon                             ; Misc
    multi-term                                  ; Terminal
    ))
(let ((refreshed nil))
  (dolist (p my-packages)                       ; install the missing packages
    (when (not (package-installed-p p))
      (unless refreshed
        (package-refresh-contents)
        (setq refreshed t))
      (package-install p))))
#+END_SRC

*** UTF-8 on everything

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8-unix)              ; UTF-8 on everything
(unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8))
(setq-default buffer-file-coding-system
    'utf-8-unix)                                ; linux output
(setq x-select-request-type                     ; pasting
    '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

*** Variable Initialisation

#+BEGIN_SRC emacs-lisp
(setq-default
    column-number-mode t                        ; show cursor position
    default-major-mode 'text-mode               ; set new buffers as test files
    initial-major-mode 'text-mode
    enable-recursive-minibuffers t              ; enable minibuffer recursive
    fill-column 80                              ; column space
    frame-title-format "emacs@%b"               ; show on title
    gc-cons-threshold (* 1024 1024 64)          ; GC
    indent-tabs-mode nil                        ; space instead of tab
    inhibit-splash-screen t                     ; no splash
    inhibit-startup-message t
    initial-scratch-message nil
    kill-ring-max 500                           ; kill ring size
    mouse-wheel-scroll-amount '(1 ((shift) .1)) ; scroll one line at a time
    frame-resize-pixelwise t
    read-buffer-completion-ignore-case t        ; ignore case-sensitivity
    read-file-name-completion-ignore-case t
    require-final-newline t                     ; always add a new line at the end of a file
    save-interprogram-paste-before-kill t       ; put clipboard into killringy
    scroll-margin 3                             ; auto scrolling
    scroll-step 1                               ; line-by-line scrolling
    scroll-conservatively 10000                 ; do not jump to centre point in the window
    scroll-preserve-screen-position t           ; make the cursor steady when scrolling
    gnutls-verify-error t                       ; check tls/ssl
    tab-width 4                                 ; 4 space indentation
    visible-bell 1                              ; no bell in windows
    window-combination-resize t                 ; split windows equally
    x-stretch-cursor t                          ; stretch cursor to cover wide characters
    )
(defun display-startup-echo-area-message ())    ; disable minibufer welcome message
(defalias 'dabbrev-expand 'hippie-expand)
#+END_SRC

*** PATH

#+BEGIN_SRC emacs-lisp
(setenv "PATH"
  (concat
;   "~/:"
   (getenv "PATH")
  )
)
#+END_SRC

*** Server mode

Run Emacs as a daemon, and edit via =emacsclient=. =emacsclient -t= for terminal / =emacsclient -c= for graphic

#+BEGIN_SRC emacs-lisp
(when (require 'server nil t)
  (unless (server-running-p)
    (server-start)))
#+END_SRC

** Customisation

*** Key binding

Use the stock key bindings when possible.

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-SPC"))                ; set-mark-command
(global-unset-key (kbd "C-x f"))                ; set-fill-column
#+END_SRC

*** Browse URL

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function               ; default browser
        'browse-url-generic
    browse-url-generic-program
        (executable-find "firefox"))
#+END_SRC

*** Emacs Setup

#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook
    (lambda () (progn
        (auto-compression-mode 1)               ; open compressed files on the fly
        (delete-selection-mode t)               ; delete marked text on typing
        (global-hl-line-mode +1)                ; highlight current line
        (global-subword-mode 1)                 ; navigate into CamelCaseWords
        (diminish 'subword-mode)
        (menu-bar-mode -1)                      ; hide menu bar
        (mouse-avoidance-mode 'animate)         ; mouse avoidance
        (scroll-bar-mode -1)                    ; no scroll bars
        (show-paren-mode 1)                     ; show matched parentheses
        (toggle-frame-maximized)                ; fullscreen
        (tool-bar-mode -1)                      ; hide toolbar
        (tooltip-mode -1)
        (visual-line-mode)                      ; soft line warp
        (diminish 'visual-line-mode)
        (which-function-mode)                   ; which-function-mode
        (setq which-func-unknown "‚ä•")
        (setq-default header-line-format        ; move to header line
            '((which-func-mode ("" which-func-format " "))))
        (setq mode-line-misc-info
            (assq-delete-all 'which-func-mode mode-line-misc-info))
        (when (fboundp                          ; windmove
            'windmove-default-keybindings)
            (windmove-default-keybindings))
        (size-indication-mode +1)               ; show total buffer size
        (symon-mode)                            ; system monitor
    )))
(dolist
    (hook
     (list
      'term-exec-hook
      ))
  (add-hook hook #'redraw-display))             ; force redraw
#+END_SRC

*** Folder

**** Default folder

#+BEGIN_SRC emacs-lisp
(setq default-directory
    (if (eq system-type 'windows-nt)
        my-win-default-directory                ; Win
    my-lin-default-directory                    ; Linux
    ))
#+END_SRC

**** Emacs backup folder

#+BEGIN_SRC emacs-lisp
(defvar backup-directory                        ; backup and autosave directory
    (if (eq system-type 'windows-nt)            ; Windows
        (concat "C:/tmp/emacs/" (user-login-name) "/")
    (concat "~/emacs/" (user-login-name) "/")   ; Linux
    ))
(if (not (file-exists-p backup-directory))
    (make-directory backup-directory t))
(setq backup-directory-alist `((".*" . ,backup-directory)))
(setq auto-save-list-file-prefix backup-directory)
(setq auto-save-file-name-transforms `((".*", backup-directory t)))
(setq make-backup-files t                       ; backup of a file the first time it is saved.
      backup-by-copying t                       ; don't clobber symlinks
      version-control t                         ; version numbers for backup files
      delete-old-versions t                     ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 5                       ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 15                      ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t                       ; auto-save every buffer that visits a file
      auto-save-timeout 20                      ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200                    ; number of keystrokes between auto-saves (default: 300)
      vc-make-backup-files t                    ; backup versioned files
      )
; ignore file backups @ http://stackoverflow.com/questions/482256/
(defvar my-backup-ignore-regexps (list "\\.vcf$" "\\.gpg$")
  "*List of filename regexps to not backup")
(defun my-backup-enable-p (name)
  "Filter certain file backups"
  (when (normal-backup-enable-predicate name)
    (let ((backup t))
      (mapc (lambda (re)
              (setq backup (and backup (not (string-match re name)))))
            my-backup-ignore-regexps)
      backup)))
(setq backup-enable-predicate 'my-backup-enable-p)
#+END_SRC

**** Minibuffer backup

save the minibuffer histories

#+BEGIN_SRC emacs-lisp
(setq-default savehist-additional-variables
              '(kill-ring search-ring regexp-search-ring extended-command-history)
              savehist-file (concat backup-directory "savehist")
              savehist-autosave-interval 60
              history-length 1000
              )
(savehist-mode +1)
#+END_SRC

**** Folders for other modes

#+BEGIN_SRC emacs-lisp
(setq semanticdb-default-save-directory
        (expand-file-name "semanticdb" backup-directory)
      recentf-save-file
        (expand-file-name "recentf" backup-directory)
      vimish-fold-dir
        (expand-file-name "vimish-fold" backup-directory)
    )
#+END_SRC

**** Create missing parent directories

#+BEGIN_SRC emacs-lisp
(defun create-non-existent-directory ()
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
      (make-directory parent-directory t))))
(add-to-list 'find-file-not-found-functions #'create-non-existent-directory)
#+END_SRC

*** Buildin Mode Setting

**** Abbrev Mode

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'abbrev
  (progn
    (setq abbrev-file-name
          (concat backup-directory "abbrev-defs"))
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file))
    (diminish 'abbrev-mode)
    ))
#+END_SRC

**** Case

#+BEGIN_SRC emacs-lisp
(cl-loop for fn in '(downcase-region            ; enable commands
                     upcase-region
                     erase-buffer)
        do (put fn 'disabled nil))
#+END_SRC

**** Comint

#+BEGIN_SRC emacs-lisp
(add-hook 'comint-output-filter-functions
    'comint-watch-for-password-prompt)          ; hide password in shell
#+END_SRC

**** Dired                                      :FILE:

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'dired (progn
  (defun modes/dired-mode ()
    "dired mode hook"
    (load "dired-x")
    ;; http://emacswiki.org/emacs/DiredOmitMode
    (setq-default dired-omit-files-p t)
    (setq dired-omit-files
          (concat dired-omit-files "\\|^\\..+$"))

    ;; http://ann77.emacser.com/Emacs/EmacsDiredExt.html
    ;; ÊéíÂ∫èÂäüËÉΩ
    (make-local-variable  'dired-sort-map)
    (setq dired-sort-map (make-sparse-keymap))
    (define-key dired-mode-map "s" dired-sort-map)
    (define-key dired-sort-map "s"
      '(lambda () "sort by Size"
         (interactive) (dired-sort-other (concat dired-listing-switches "S"))))
    (define-key dired-sort-map "x"
      '(lambda () "sort by eXtension"
         (interactive) (dired-sort-other (concat dired-listing-switches "X"))))
    (define-key dired-sort-map "t"
      '(lambda () "sort by Time"
         (interactive) (dired-sort-other (concat dired-listing-switches "t"))))
    (define-key dired-sort-map "n"
      '(lambda () "sort by Name"
         (interactive) (dired-sort-other (concat dired-listing-switches ""))))

    ;; http://www.emacswiki.org/emacs/DiredSortDirectoriesFirst
    (defun mydired-sort ()
      "Sort dired listings with directories first."
      (save-excursion
        (let (buffer-read-only)
          (forward-line 2) ;; beyond dir. header
          (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
        (set-buffer-modified-p nil)))
    (defadvice dired-readin
        (after dired-after-updating-hook first () activate)
      "Sort dired listings with directories first before adding marks."
      (mydired-sort))

    ;; single buffer
    (put 'dired-find-alternate-file 'disabled nil)
    ;; http://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer
    (define-key dired-mode-map (kbd "^")
      (lambda () (interactive) (find-alternate-file "..")))
    ;; http://ergoemacs.org/emacs/emacs_dired_tips.html
    (define-key dired-mode-map (kbd "<return>")
      'dired-find-alternate-file)

    ;; copy split windows
    ;; C-o / C-0 o to paste the original filename
    ;: https://appsmth.appspot.com/smth/subject/Emacs/94609
    (setq dired-dwim-target t)

    (setq dired-recursive-deletes 'top          ; recursive delection
          dired-recursive-copies 'always)       ; recursive copy
    )
  (add-hook 'dired-load-hook #'modes/dired-mode)
  ))
#+END_SRC

**** Ediff                                      :FILE:

Call =ediff= or =ediff3= in Emace for file comparisons

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ediff (progn
  (defun modes/ediff-mode ()
    "ediff-mode hook"
    ;; http://emacswiki.org/emacs/EdiffMode
    ;; save windows configurations
    (add-hook 'ediff-before-setup-hook
              (lambda ()
                (setq ediff-saved-window-configuration (current-window-configuration))))

    (let ((restore-window-configuration
           (lambda ()
             (set-window-configuration ediff-saved-window-configuration))))
      (add-hook 'ediff-quit-hook restore-window-configuration 'append)
      (add-hook 'ediff-suspend-hook restore-window-configuration 'append))

    ;; horizontal window split
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    )
  (add-hook 'ediff-load-hook #'modes/ediff-mode)
  ))
#+END_SRC

**** Imenu

#+BEGIN_SRC emacs-lisp
(set-default 'imenu-auto-rescan t)              ; automatic buffer rescan
#+END_SRC

**** Narrowing

#+BEGIN_SRC emacs-lisp
(cl-loop for fn in '(narrow-to-defun            ; enable commands
                     narrow-to-page
                     narrow-to-region)
        do (put fn 'disabled nil))
#+END_SRC

**** Shell & Term

***** term

#+BEGIN_SRC emacs-lisp
(defun modes/term-mode ()
    "term mode hook"
    (setq term-buffer-maximum-size 10000)       ; increase buffer size
    )
(add-hook 'term-mode-hook #'modes/term-mode)
#+END_SRC

***** multi-term

#+BEGIN_SRC emacs-lisp
(autoload 'multi-term "multi-term" nil t)
(with-eval-after-load 'multi-term
  (progn
    (setq multi-term-program "/bin/bash"        ; bash
          multi-term-program-switches "-i"      ; interactive non-login shell, and read "~/.bashrc"
          multi-term-buffer-name "mterm"        ; buffer name
          term-buffer-maximum-size 0            ; keepp all buffer
          scroll-margin 0                       ; always make point visible at bottom of the window when auto-scrolling
          )
    (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
    (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))
    ))
#+END_SRC

**** Tramp

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")               ; faster than the default scp
#+END_SRC

*** Style

**** Face

Emacs GUI font settings

#+BEGIN_SRC emacs-lisp
(if (display-graphic-p) (progn
  (if (eq system-type 'windows-nt)
      (set-face-attribute 'default nil :font "Consolas:antialias=natural" :height 100)
    (cond                                       ; Linux
     ((find-font (font-spec :name "Terminus"))
      (set-face-attribute 'default nil :font "Terminus" :height 120))
     ((find-font (font-spec :maker "misc"
                            :family "fixed"
                            :widthtype "normal"
                            :pixels "14"
                            :height "130"
                            :horiz "75"
                            :vert "75"
                            ))                  ; fallback to "7x14" bitmap
      ; 7x14 / -misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1
      (set-face-attribute 'default nil :font "7x14"))
     )
    (set-fontset-font "fontset-default"         ; ‰∏≠ÊñáÂ≠ó‰Ωì
                      'han '("WenQuanYi Zen Hei Sharp" . "unicode-bmp"))
    ))
  (add-to-list 'default-frame-alist '(font . "Terminus"))
  )
#+END_SRC

**** Theme

Zenburn & Solarized themes

#+BEGIN_SRC emacs-lisp
(load-theme 'zenburn t t)                       ; load but do not active theme
(load-theme 'solarized t)
(disable-theme 'solarized)

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (select-frame frame)
                (if (display-graphic-p frame)
                    (progn                      ; emacsclient -c
                      (disable-theme 'solarized)
                      (enable-theme 'zenburn)
                      )
                  (progn                        ; emacsclient -t
                    (disable-theme 'zenburn)
                    (set-frame-parameter nil 'background-mode 'dark)
                    (enable-theme 'solarized)
                    ))
                ))
  (enable-theme 'zenburn))                      ; emacs & emacs -nw
#+END_SRC

**** Transparent

#+BEGIN_SRC emacs-lisp
(set-frame-parameter
    (selected-frame) 'alpha '(98 98))
#+END_SRC

** Development

#+BEGIN_SRC emacs-lisp
(defun modes/prog-mode ()
    "prog-mode hook"
    (setq
        compilation-ask-about-save nil          ; save before compiling
        compilation-always-kill t               ; always kill old compile processes before
                                                ; starting the new one
        compilation-scroll-output 'first-error  ; Automatically scroll to first error
      )
    (electric-pair-mode 1)                      ; auto close bracket insertion
    (setq electric-pair-skip-whitespace 'chomp)
    (goto-address-prog-mode)                    ; highlight URL
    (linum-mode)                                ; show line number
    (push '(">=" . ?‚â•) prettify-symbols-alist)  ; prettify symbols
    (push '("<=" . ?‚â§) prettify-symbols-alist)
    (push '("delta" . ?Œî) prettify-symbols-alist)
    (prettify-symbols-mode)
    (setq yas-snippet-dirs backup-directory)    ; snippet collections
    (local-set-key (kbd "RET")
                   'newline-and-indent)
    )
(add-hook 'prog-mode-hook 'modes/prog-mode)
(add-hook 'before-save-hook                     ; remove trailing whitespace
    'delete-trailing-whitespace)
#+END_SRC

*** Git

**** git-gutter

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'git-gutter
    (git-gutter:linum-setup)                    ; w/linum mode
    (custom-set-variables                       ; backend
        '(git-gutter:handled-backends
        (quote (git svn))))
    (diminish 'git-gutter-mode)
    )
(dolist (mode-hook '(web-mode-hook
                     org-mode-hook
                     yaml-mode-hook
                    ))
    (add-hook mode-hook #'git-gutter-mode)
    )
#+END_SRC

**** magit

#+BEGIN_SRC emacs-lisp
(autoload 'magit-status "magit" nil t)
(global-set-key (kbd "C-x g") #'magit-status)
(eval-after-load "magit"
    '(progn
        (setq magit-completing-read-function
              (quote helm-completing-read-default)
              magit-diff-refine-hunk t          ; highlight changes
              )
        ;; full screen magit-status
        (defadvice magit-status (around magit-fullscreen activate)
          (window-configuration-to-register :magit-fullscreen)
          ad-do-it
          (delete-other-windows))
    ))
#+END_SRC

*** Web / JS

**** js3-mode

#+BEGIN_SRC emacs-lisp
(autoload 'js3-mode "js3" nil t)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'" . js3-mode))
(setq js3-lazy-commas t
      js3-lazy-operators t
      js3-lazy-dots t
      js3-expr-indent-offset 2
      js3-paren-indent-offset 2
      js3-square-indent-offset 2
      js3-curly-indent-offset 2
      js3-auto-indent-p t
      js3-enter-indents-newline t
      js3-indent-on-enter-key t
      js3-indent-dots t
      )
#+END_SRC

**** tern

#+BEGIN_SRC emacs-lisp
(add-hook 'js3-mode-hook (lambda () (tern-mode t)))
(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))                         ; need to change tern.elc - http://stackoverflow.com/questions/18102833/could-not-start-tern-server-in-emacs
#+END_SRC

**** web-mode

#+BEGIN_SRC emacs-lisp
(autoload 'web-mode "web-mode" nil t)
(defun modes/web-mode ()
    "web-mode hook"
    (setq web-mode-indent-style 4               ; indentation
          web-mode-code-indent-offset 4
          web-mode-css-indent-offset 2
          web-mode-markup-indent-offset 4
          web-mode-block-padding 4
          web-mode-style-padding 4
          web-mode-script-padding 4
          web-mode-enable-css-colorization t
          )
    (add-to-list (make-local-variable 'company-backends)
                             '(company-css company-nxml))
    )
(add-hook 'web-mode-hook 'modes/web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

*** Scripting

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook                      ; make shell script executable on save
    'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

**** Bash

#+BEGIN_SRC emacs-lisp
(defun modes/sh-mode ()
    "sh mode hook"
    (setq sh-basic-offset 4
          sh-indentation 4
          sh-indent-comment t
    ))
(add-hook 'sh-mode-hook 'modes/sh-mode)
#+END_SRC

**** Python

#+BEGIN_SRC emacs-lisp
(defun modes/python-mode ()
  "python mode hook"
  (company-mode 0)                              ; disable company-mode
  (when (require 'elpy nil t)                   ; Note - require external python package to be installed
                                                ; $ pip install elpy rope jedi #Python2
                                                ; $ pip3 install elpy rope_py3k jedi #Python3
    (elpy-enable)                               ; enable elpy
    (setq elpy-rpc-backend "jedi")              ; jedi (instead of rope) backend
    (setq elpy-modules                          ; remove flymake (replaced by flycheck)
          (delq 'elpy-module-flymake elpy-modules))
    )

  (when (eq 1 (point-max))                      ; new file template
    (insert
     "#!/usr/bin/env python\n"
     "\n\n\n"
     "def main():\n"
     "\tpass\n"
     "\n\n"
     "if __name__ == \"__main__\":\n"
     "\tmain()\n"
     ))

  (defun add-py-debug ()                        ; insert/remove debug breakpoint
    "add debug code and move line down"
    (interactive)
    (move-beginning-of-line 1)
    (insert "import pdb; pdb.set_trace();\n"))

  (defun remove-py-debug ()
    "remove py debug code, if found"
    (interactive)
    (let ((x (line-number-at-pos))
          (cur (point)))
      (search-forward-regexp "^[ ]*import pdb; pdb.set_trace();")
      (if (= x (line-number-at-pos))
          (let ()
            (move-beginning-of-line 1)
            (kill-line 1)
            (move-beginning-of-line 1))
        (goto-char cur))))

  (local-set-key (kbd "<f9>") 'add-py-debug)    ; insert breakpoint
  (local-set-key (kbd "C-c <f9>") 'remove-py-debug) ; remove breakpoint
  )
(add-hook 'python-mode-hook #'modes/python-mode)
#+END_SRC

**** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(defun modes/elisp-mode ()
    "emacs-lisp mode hook"
    (progn
      (eldoc-mode)
      ))
(add-hook 'emacs-lisp-mode-hook #'modes/elisp-mode)
(add-hook 'eval-expression-minibuffer-setup-hook    ; show eldoc for 'Eval:'
          #'eldoc-mode)
#+END_SRC

**** Groovy

#+BEGIN_SRC emacs-lisp
(autoload 'groovy-mode "groovy-mode" nil t)
(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
(add-hook 'groovy-mode-hook
 (lambda ()
   (eval-when-compile                           ; remove after emacs25
     (if (and (= emacs-major-version 24) (< emacs-minor-version 6))
         (require 'cl)))
   ))
#+END_SRC

*** Infrastructure

**** dockerfile

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

**** yaml

#+BEGIN_SRC emacs-lisp
(defun modes/yaml-mode ()
    "yaml-mode hook"
    (progn
      (run-hooks 'prog-mode-hook)
      ))
(add-hook 'yaml-mode-hook #'modes/yaml-mode)
(add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
#+END_SRC

**** js2

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (cons '("\\.j2" . jinja2-mode) auto-mode-alist))
#+END_SRC

**** Ansiable

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ansible-doc
  (diminish 'ansible-doc-mode)
  )
(add-hook 'yaml-mode-hook #'ansible-doc-mode)
#+END_SRC

*** DB

#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))         ; no line wrap when working on DB
#+END_SRC

*** C/C++

#+BEGIN_SRC emacs-lisp
(defun modes/c-mode ()
  "c/c++ mode hook"
  (progn
    (setq gdb-many-windows t)                   ; gdb

    (local-set-key (kbd "C-c -")                ; fold tag
                   'senator-fold-tag)
    (local-set-key (kbd "C-c +")
                   'senator-unfold-tag)

    (add-to-list 'company-backends '(company-gtags
                                     company-semantic))
    ))

(dolist
    (hook
     (list
      'c-mode-hook
      'c++-mode-hook
      ))
  (add-hook hook #'modes/c-mode))
#+END_SRC

** Mode Setting

*** avy

Char-based jumping

#+BEGIN_SRC emacs-lisp
(autoload 'avy-goto-char-2 "avy")
(global-set-key (kbd "C-\"") 'avy-goto-char-2)
#+END_SRC

*** company mode

#+BEGIN_SRC emacs-lisp
(autoload 'company-mode "company" nil t)
(dolist (mode-hook '(prog-mode-hook
                     ))
  (add-hook mode-hook #'company-mode))

(with-eval-after-load 'company
    (progn
        (define-key (current-local-map) [remap hippie-expand] 'company-complete)
        (setq-default company-backends          ; default backends
            '((company-abbrev
              company-dabbrev
              company-dabbrev-code
              company-files
              company-ispell
              company-keywords                  ; keywords
              company-yasnippet
              ))
              company-global-modes
                '(not eshell-mode)
              company-idle-delay 0.25           ; delay before autocompletion popup shows
              company-minimum-prefix-length 2
              company-tooltip-align-annotations t
              company-tooltip-limit 10          ; popup window size
              company-tooltip-flip-when-above t ; flip the popup menu when near the bottom of windows
              company-selection-wrap-around t   ; loop over candidates
              company-show-numbers t            ; show number
              company-begin-commands
                '(self-insert-command)          ; start autocompletion only after typing
              company-dabbrev-downcase nil      ; do not change case in dabbrev
              company-dabbrev-ignore-case t
              company-dabbrev-other-buffers t
              company-transformers
                '(company-sort-by-occurrence)
            )
        (diminish 'company-mode)
        ))
#+END_SRC

*** diminish

shorten mode-line

#+BEGIN_SRC emacs-lisp
(autoload 'diminish "diminish" nil t)
#+END_SRC

*** erc                                         :IRC:

#+BEGIN_SRC emacs-lisp
(autoload 'define-erc-response-handler "erc-backend" nil t)
(with-eval-after-load `erc
  (progn
    (setq erc-server  "irc.freenode.net"        ; default to freenode.net
          erc-port    "6697"
          erc-nick my-erc-nick
          erc-user-full-name my-erc-user-full-name
          erc-email-userid my-erc-email-userid
          erc-hide-list                         ; hide unwanted messages
          '("JOIN" "PART" "QUIT")
          erc-interpret-mirc-color t            ; color highlighting
          erc-rename-buffers t                  ; Rename buffers to the current network name instead of SERVER:PORT
          erc-server-coding-system              ; always utf-8
          '(utf-8 . utf-8)
          erc-log-mode t                        ; enable logging
          erc-generate-log-file-name-function
          (quote erc-generate-log-file-name-with-date)
          erc-hide-timestamps t                 ; hide logging timestamp when chatting
          erc-log-channels-directory            ; directory
          (concat backup-directory "erc.logs/")
          erc-log-insert-log-on-open nil        ; ignore previous messages
          erc-log-file-coding-system 'utf-8-unix
          erc-button-url-regexp                 ; Button URL
            "\\([-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]+\\.\\)+[-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]*[-a-zA-Z0-9\\/]"
          erc-prompt (lambda () (concat "[" (buffer-name) "]"))
          erc-auto-discard-away t               ; autoaway
          erc-autoaway-idle-seconds 600
          erc-autoaway-use-emacs-idle t
          erc-query-display 'buffer             ; open query in the current window
          )
    (erc-log-mode)
    (erc-truncate-mode +1)                      ; truncate long irc buffers
    (require 'erc-sasl)                         ; sasl
    (add-to-list 'erc-sasl-server-regexp-list "irc\\.freenode\\.net")

    ;; for erc-sasl
    (defun erc-login ()
      "Perform user authentication at the IRC server."
      (erc-log (format "login: nick: %s, user: %s %s %s :%s"
                       (erc-current-nick)
                       (user-login-name)
                       (or erc-system-name (system-name))
                       erc-session-server
                       erc-session-user-full-name))
      (if erc-session-password
          (erc-server-send (format "PASS %s" erc-session-password))
        (message "Logging in without password"))
      (when (and (featurep 'erc-sasl) (erc-sasl-use-sasl-p))
        (erc-server-send "CAP REQ :sasl"))
      (erc-server-send (format "NICK %s" (erc-current-nick)))
      (erc-server-send
       (format "USER %s %s %s :%s"
               (if erc-anonymous-login erc-email-userid (user-login-name))
               "0" "*"
               erc-session-user-full-name))
      (erc-update-mode-line))
    ))
#+END_SRC

*** evil

#+BEGIN_SRC emacs-lisp
(autoload 'evil-mode "evil" nil t)
(evil-mode 1)
(setq evil-default-state 'emacs)                ; default to emacs
#+END_SRC

*** expand-region                               :EDIT:

#+BEGIN_SRC emacs-lisp
(autoload 'er/expand-region "expand-region" nil t)
(global-set-key (kbd "C-=") #'er/expand-region)
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(autoload 'flycheck "flycheck-mode" nil t)
(eval-after-load 'flycheck
  '(progn
     (flycheck-mode)
     (diminish 'flycheck-mode)
     ))
(dolist (mode-hook '(
                     elpy-mode-hook             ; elpy/python
                     sh-mode-hook               ; bash
                     ))
  (add-hook mode-hook #'flycheck-mode))
#+END_SRC

*** indent-guide                                :EDIT:

#+BEGIN_SRC emacs-lisp
(dolist (hook '(prog-mode-hook
                org-mode-hook
                ))
  (add-hook hook
            (lambda ()
              (indent-guide-mode 1)
              )))
(with-eval-after-load 'indent-guide
  (progn
    (set-face-foreground 'indent-guide-face "lightslategrey")
    (setq indent-guide-char "¬¶"
          indent-guide-delay 0.3
          indent-guide-recursive t)
    (diminish 'indent-guide-mode)
    ))
#+END_SRC

*** org-mode

#+BEGIN_SRC emacs-lisp
(defun modes/org-mode ()
    "org-mode hook"
    (progn
        (setq truncate-lines nil                ; line wrap
              org-edit-src-content-indentation 0; no indentation in SRC block
              org-export-with-smart-quotes t
              org-log-done 'time
              org-html-doctype "html5"
              org-pretty-entities t             ; show symbols without math delimiters
              org-src-preserve-indentation t
              org-src-fontify-natively t        ; native fontification
              org-src-tab-acts-natively t       ; mative tab in SRC block
              org-use-speed-commands t          ; speed keys
              )
        (org-indent-mode t)                     ; list-oriented
        (diminish 'org-indent-mode)
        (setq org-startup-indented t
              org-hide-leading-stars t
              )
        (linum-mode)                            ; show line number
        (global-set-key (kbd "C-c o b") 'org-switchb)
    ))
(add-hook 'org-mode-hook 'modes/org-mode)
(add-hook 'org-shiftup-final-hook 'windmove-up) ; active windmove
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
(with-eval-after-load 'org
  (org-defkey org-mode-map [remap imenu] #'helm-org-in-buffer-headings))
#+END_SRC

*** multiple-cursors                            :EDIT:

#+BEGIN_SRC emacs-lisp
(autoload 'mc/edit-lines "mc-edit-lines" nil t)
(global-set-key (kbd "C-c m e") #'mc/edit-lines)
(global-set-key (kbd "C-c m >") #'mc/mark-next-like-this)
(global-set-key (kbd "C-c m <") #'mc/mark-previous-like-this)
(global-set-key (kbd "C-c m a") #'mc/mark-all-like-this)
#+END_SRC

*** mwim                                        :EDIT:

move where I mean

#+BEGIN_SRC emacs-lisp
(autoload 'mwim-beginning-of-code-or-line "mwim" nil t)
(autoload 'mwim-end-of-code-or-line "mwim" nil t)
(global-set-key (kbd "C-a") #'mwim-beginning-of-code-or-line)
(global-set-key (kbd "C-e") #'mwim-end-of-code-or-line)
#+END_SRC

*** neotree                                     :FILE:EDIT:

#+BEGIN_SRC emacs-lisp
(autoload 'neotree-toggle "neotree" nil t)
(global-set-key (kbd "C-c n t") #'neotree-toggle)

(with-eval-after-load 'neotree
  (progn
    (setq-default neo-create-file-auto-open t
                  neo-dont-be-alone t
                  neo-keymap-style 'concise
                  neo-show-header nil
                  neo-show-hidden-files t
                  neo-smart-open t
                  )
    (setq neo-theme 'ascii)

    ;; https://github.com/jaypei/emacs-neotree/issues/105
    (setq neo-vc-integration '(face char))
    (defun neo-vc-for-node (node)
      (let* ((backend (vc-backend node))
             (vc-state (when backend (vc-state node backend))))
        (cons (cdr (assoc vc-state neo-vc-state-char-alist))
              (cl-case vc-state
                (up-to-date       neo-vc-up-to-date-face)
                (edited           neo-vc-edited-face)
                (needs-update     neo-vc-needs-update-face)
                (needs-merge      neo-vc-needs-merge-face)
                (unlocked-changes neo-vc-unlocked-changes-face)
                (added            neo-vc-added-face)
                (removed          neo-vc-removed-face)
                (conflict         neo-vc-conflict-face)
                (missing          neo-vc-missing-face)
                (ignored          neo-vc-ignored-face)
                (unregistered     neo-vc-unregistered-face)
                (user             neo-vc-user-face)
                (t                neo-vc-default-face)))))
    ))
#+END_SRC

*** speedbar                                    :NOT_IN_USE:EDIT:

#+BEGIN_SRC emacs-lisp
(setq speedbar-show-unknown-files t             ; show all files
      speedbar-directory-unshown-regexp "^$"
      speedbar-use-images nil                   ; no icon
    )
#+END_SRC

*** symon

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'symon
  (progn
    (eval-and-compile
      (setq symon-sparkline-type 'bounded)
      (defmacro define-symon-monitor-local (name &rest plist)
        (let* ((cell (make-vector 2 nil))
               (sparkline (plist-get plist :sparkline))
               (interval (or (plist-get plist :interval) 'symon-refresh-rate))
               (display (plist-get plist :display))
               (update-fn
                `(lambda ()
                   (ring-insert (aref ,cell 0) ,(plist-get plist :fetch))))
               (setup-fn
                `(lambda ()
                   (aset ,cell 0 (symon--make-history-ring))
                   (aset ,cell 1 (run-with-timer 0 ,interval ,update-fn))
                   ,(plist-get plist :setup)
                   (funcall ,update-fn)))
               (cleanup-fn
                `(lambda ()
                   (cancel-timer (aref ,cell 1))
                   ,(plist-get plist :cleanup)))
               (display-fn
                (if display `(lambda () (concat ,display " "))
                  `(lambda ()
                     (let* ((lst (ring-elements (aref ,cell 0)))
                            (val (car lst)))
                       (concat ,(plist-get plist :index)
                               (if (not (numberp val)) "N/A "
                                 (concat (format "%d%s " val ,(or (plist-get plist :unit) ""))
                                         (let ((annot ,(plist-get plist :annotation)))
                                           (when annot (concat "(" annot ") ")))))
                               ,(when sparkline
                                  `(when (window-system)
                                     (let ((sparkline (symon--make-sparkline
                                                       lst
                                                       ,(plist-get plist :lower-bound)
                                                       ,(plist-get plist :upper-bound))))
                                       (when symon-sparkline-use-xpm
                                         (setq sparkline
                                               (symon--convert-sparkline-to-xpm sparkline)))
                                       (concat (propertize " " 'display sparkline) " "))))))))))
          `(put ',name 'symon-monitor (vector ,setup-fn ,cleanup-fn ,display-fn))))
      (define-symon-monitor-local symon-current-date-time-monitor
        :interval 5
        :display (propertize
                  (format-time-string "%k:%M %b %d %a     ")
                  'face 'font-lock-type-face))
      (setq symon-monitors
            (cond ((memq system-type '(gnu/linux cygwin))
                   '(symon-current-date-time-monitor
                     symon-linux-memory-monitor
                     symon-linux-cpu-monitor
                     symon-linux-network-rx-monitor
                     symon-linux-network-tx-monitor))
                  ((memq system-type '(windows-nt))
                   '(symon-current-date-time-monitor
                     symon-windows-memory-monitor
                     symon-windows-cpu-monitor
                     symon-windows-network-rx-monitor
                     symon-windows-network-tx-monitor))))
      )))
#+END_SRC

*** undo-tree                                   :EDIT:

#+BEGIN_SRC emacs-lisp
(autoload 'undo-tree-mode "undo-tree" nil t)
(eval-after-load "undo-tree" '(progn
  (global-undo-tree-mode)
  (defun modes/undo-tree-mode ()
    "undo-tree-mode hook"
    (setq undo-tree-visualizer-diff t
          undo-tree-visualizer-timestamps t
          undo-tree-history-directory-alist
            `((".*" . ,backup-directory))
          undo-tree-auto-save-history t
          ))
  (add-hook 'undo-tree-mode-hook 'modes/undo-tree-mode)
  (diminish 'undo-tree-mode)
  ))
#+END_SRC

*** vimish-fold                                 :EDIT:

vim-like text folding

#+BEGIN_SRC emacs-lisp
(vimish-fold-global-mode t)
(with-eval-after-load 'vimish-fold
  (global-set-key (kbd "C-c v f") #'vimish-fold)
  (global-set-key (kbd "C-c v d") #'vimish-fold-delete)
  (global-set-key (kbd "C-c v t") #'vimish-fold-toggle)
  )
#+END_SRC

*** which-key

Display the key bindings in a popup.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'which-key-mode)
(eval-after-load "which-key"
    '(progn
        (setq which-key-idle-delay 2.0)         ; popup delay
        (which-key-setup-side-window-right-bottom)
        (diminish 'which-key-mode)
    ))
#+END_SRC

*** whitespace

#+BEGIN_SRC emacs-lisp
(setq-default
    whitespace-style '(face lines-tail))
(add-hook 'prog-mode-hook #'global-whitespace-mode)
(add-hook 'whitespace-mode-hook
    (lambda () (set
        (make-local-variable 'whitespace-line-column)
        fill-column)))
(eval-after-load "whitespace" '(diminish 'global-whitespace-mode))
#+END_SRC

*** window-numbering

buffers switching

#+BEGIN_SRC emacs-lisp
(window-numbering-mode 1)
#+END_SRC

*** winner-mode

Undo Emacs window changes

#+BEGIN_SRC emacs-lisp
(winner-mode +1)
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'yasnippet
    )
#+END_SRC

*** Helm                                        :EDIT:

**** helm

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'helm
    (helm-adaptive-mode 1)
    (helm-autoresize-mode 1)                    ; buffer window resizing
    (setq helm-buffers-fuzzy-matching t         ; fuzzy matching when non-nil
        helm-mode-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-apropos-fuzzy-match t
        helm-lisp-fuzzy-completion t
        helm-imenu-fuzzy-match t
        helm-completion-in-region-fuzzy-match t
        helm-M-x-fuzzy-match t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-adaptive-history-file
            (expand-file-name "helm-adaptive-history" backup-directory)
        helm-candidate-number-limit 100         ; candidate limit
        helm-ff-search-library-in-sexp t        ; search for library in `require' and `declare-function' sexp
        helm-move-to-line-cycle-in-source t     ; move to end or beginning of source when reaching top or bottom of source
        helm-quick-update t                     ; do not display invisible candidates
        helm-split-window-in-side-p t           ; open helm buffer inside current window, not occupy whole other window
        )
    (add-hook 'eshell-mode-hook                 ; eshell
        #'(lambda ()
            (define-key eshell-mode-map
                [remap eshell-pcomplete]
                'helm-esh-pcomplete)))
    (define-key (current-global-map)            ; C-x b
      [remap switch-to-buffer] 'helm-mini)
    (define-key (current-global-map)            ; C-h a
      [remap apropos-command] 'helm-apropos)
    (define-key (current-global-map)            ; M-/
      [remap dabbrev-expand] 'helm-dabbrev)
    (define-key (current-global-map)            ; M-s o
      [remap occur] 'helm-occur)
    (define-key (current-global-map)            ; M-x
      [remap execute-extended-command] 'helm-M-x)
    (define-key (current-global-map)            ; M-y
      [remap yank-pop] 'helm-show-kill-ring)
    )
(add-hook 'after-init-hook
          (lambda ()
            (helm-mode 1)
            (diminish 'helm-mode)
            ))
#+END_SRC

**** projectile

#+BEGIN_SRC emacs-lisp
(autoload 'helm-projectile "helm-projectile" nil t)
(dolist (mode-hook '(prog-mode-hook
                     ))
  (add-hook mode-hook
    (lambda ()
      (define-key (current-global-map) (kbd "C-c p h") 'helm-projectile)
      )))
(with-eval-after-load 'helm-projectile (progn
    (setq
        projectile-keymap-prefix (kbd "C-c p")          ; prefix
        projectile-completion-system 'helm              ; via helm backend
        projectile-enable-caching t                     ; enable caching unconditionally
        projectile-file-exists-remote-cache-expire nil  ; disable remote file exists cache
        projectile-remember-window-configs t
        projectile-switch-project-action
            'helm-projectile
        projectile-cache-file (expand-file-name         ; Projectile cache file
            "projectile.cache" backup-directory)
        projectile-sort-order 'modification-time
    )
    (if (eq system-type 'windows-nt)                    ; external indexing under windows
            (setq projectile-indexing-method 'alien))
    (projectile-mode)
    (helm-projectile-on)                                ; active helm, instead of Projectile, commands
    (diminish 'projectile-mode " ‚åï")
    ))
#+END_SRC

**** swiper

#+BEGIN_SRC emacs-lisp
(autoload 'swiper-helm "swiper-helm" nil t)
(define-key (current-global-map)                ; C-s
  [remap isearch-forward] 'swiper-helm)
(define-key (current-global-map)                ; C-r
  [remap isearch-backward] 'swiper-helm)
#+END_SRC

** Research

*** AUCTex
#+BEGIN_SRC emacs-lisp
(when (locate-library "auctex") (progn
    (defun modes/auctex-mode ()
        "auctex-mode hook"
        ;; set latexmk the default LaTeX compiler
        (push
         '("Latexmk" "latexmk -outdir=/tmp/emacs/latex -bibtex -pdf -pv %s" TeX-run-command nil t
           :help "Run Latexmk on file")
         TeX-command-list)
        (setq TeX-command-default "Latexmk")

        ;; auto directory for auto-generated info
        (setq TeX-auto-local "/tmp/emacs/latex/auctex-auto/")
        (setq TeX-parse-self t) ; enable parse on load
        (setq TeX-auto-save t) ; enable parse on save

        (setq-default TeX-master nil)
        (setq TeX-save-query nil) ; autosave before compiling

        (TeX-fold-mode 1) ; enable code folding
        (TeX-fold-buffer)

        ;; smart quotes
        (setq TeX-open-quote "<<")
        (setq TeX-close-quote ">>")

        ;; detect master files
        (defun guess-TeX-master (filename)
          "Guess the master file for FILENAME from currently open .tex files."
          (let ((candidate nil)
                (filename (file-name-nondirectory filename)))
            (save-excursion
              (dolist (buffer (buffer-list))
                (with-current-buffer buffer
                  (let ((name (buffer-name))
                        (file buffer-file-name))
                    (if (and file (string-match "\\.tex$" file))
                        (progn
                          (goto-char (point-min))
                          (if (re-search-forward (concat "\\\\input{" filename "}") nil t)
                              (setq candidate file))
                          (if (re-search-forward (concat "\\\\include{" (file-name-sans-extension filename) "}") nil t)
                              (setq candidate file))))))))
            (if candidate
                (message "TeX master document: %s" (file-name-nondirectory candidate)))
            candidate))
        (setq TeX-master (guess-TeX-master (buffer-file-name))))
    (add-hook 'LaTeX-mode-hook 'modes/auctex-mode)

    ;; activate the Ref mode
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)     ; with AUCTeX LaTeX mode

    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)    ; auctex LaTeX math mode
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)   ; with AUCTeX LaTeX mode

    ;; enable flyspell-mode
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)

    ;; activate syntax highlighting - font-lock-mode
    (add-hook 'LaTeX-mode-hook 'turn-on-font-lock)

    ;; AUCTEX / EMACS / EVINCE - Forward & Inverse Search
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)

    ;; evince(pdf) -> emacs(latex) search - inverse search
    ;; ctrl + mouse right button in evince
    ;;(defun un-urlify (fname-or-url)
    ;;  "A trivial function that replaces a prefix of file:/// with just /."
    ;;  (if (string= (substring fname-or-url 0 8) "file:///")
    ;;      (substring fname-or-url 7)
    ;;    fname-or-url))

    (defun th-evince-sync (file linecol &rest ignored)
      (let* ((fname (un-urlify file))
             (buf (find-file fname))
             (line (car linecol))
             (col (cadr linecol)))
        (if (null buf)
            (message "[Synctex]: %s is not opened..." fname)
          (switch-to-buffer buf)
          (with-no-warnings
            (goto-line (car linecol)))
          (unless (= col -1)
            (move-to-column col)))))

    (defvar *dbus-evince-signal* nil)

    (defun enable-evince-sync ()
      (require 'dbus)
      (when (and
             (eq window-system 'x)
             (fboundp 'dbus-register-signal))
        (unless *dbus-evince-signal*
          (setf *dbus-evince-signal*
                (dbus-register-signal
                 :session nil "/org/gnome/evince/Window/0"
                 "org.gnome.evince.Window" "SyncSource"
                 'th-evince-sync)))))
    (add-hook 'LaTeX-mode-hook 'enable-evince-sync)

    ;; emacs(latex) -> evince(pdf) - forward search
    ;; c-c c-c -> View -> pdf-forward-search in emacs
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (add-hook 'LaTeX-mode-hook (lambda()
    ;; https://github.com/MassimoLauria/dotemacs/blob/42fd1978da3780df725198862fa9f28c0ac4218c/init-latex.le
    ;; https://gist.github.com/2297447

    ;; http://tex.stackexchange.com/a/78051
    ;; un-urlify and urlify-escape-only should be improved to handle all special characters, not only spaces.
    ;; The fix for spaces is based on the first comment on http://emacswiki.org/emacs/AUCTeX#toc20
    (defun un-urlify (fname-or-url)
      "Transform file:///absolute/path from Gnome into /absolute/path with very limited support for special characters"
      (if (string= (substring fname-or-url 0 8) "file:///")
          (url-unhex-string (substring fname-or-url 7))
        fname-or-url))

    (defun urlify-escape-only (path)
      "Handle special characters for urlify"
      (replace-regexp-in-string " " "%20" path))

    (defun urlify (absolute-path)
      "Transform /absolute/path to file:///absolute/path for Gnome with very limited support for special characters"
      (if (string= (substring absolute-path 0 1) "/")
          (concat "file://" (urlify-escape-only absolute-path))
        absolute-path))

    ;; universal time, need by evince
    (defun utime ()
      (let ((high (nth 0 (current-time)))
            (low (nth 1 (current-time))))
        (+ (* high (lsh 1 16) ) low)))

    ;; Forward search.
    ;; Adapted from http://dud.inf.tu-dresden.de/~ben/evince_synctex.tar.gz
    (defun auctex-evince-forward-sync (pdffile texfile line)
      (let ((dbus-name
             (dbus-call-method :session
                               "org.gnome.evince.Daemon"  ; service
                               "/org/gnome/evince/Daemon" ; path
                               "org.gnome.evince.Daemon"  ; interface
                               "FindDocument"
                               (urlify pdffile)
                               t     ; Open a new window if the file is not opened.
                               )))
        (dbus-call-method :session
                          dbus-name
                          "/org/gnome/evince/Window/0"
                          "org.gnome.evince.Window"
                          "SyncView"
                          (urlify-escape-only texfile)
                          (list :struct :int32 line :int32 1)
                          (utime))))

    (defun pdf-forward-search ()
      (let (
            (pdf (concat "/tmp/emacs/latex/" (TeX-master-file (TeX-output-extension))))
            (tex (buffer-file-name))
            (line (line-number-at-pos)))
        (auctex-evince-forward-sync pdf tex line)))

    ;; PDF forward search : emacs -> dbus -> evince
    (setq TeX-view-program-list '())
    (add-to-list 'TeX-view-program-list
                 '("EvinceForward" pdf-forward-search))

    (setq TeX-view-program-selection '())
    (add-to-list 'TeX-view-program-selection
                 '(output-pdf "EvinceForward"))
    ))))
#+END_SRC

*** Maxima

#+BEGIN_SRC emacs-lisp
(when (locate-library "maxima")
    (autoload 'maxima-mode "maxima" nil t)
    (setq auto-mode-alist (cons '("\\.ma?[cx]" . maxima-mode) auto-mode-alist))
    )
#+END_SRC

*** Octave

#+BEGIN_SRC emacs-lisp
(autoload 'octave-mode "octave-mod" nil t)
(setq auto-mode-alist (append '(("\\.m$" . octave-mode)) auto-mode-alist))

(with-eval-after-load 'octave-mod
    '(progn
        (abbrev-mode 1)
        (auto-fill-mode 1)
        (if (eq window-system 'x)
            (font-lock-mode 1))

        (run-octave)

        (add-hook 'inferior-octave-mode-hook
            (lambda ()
                (turn-on-font-lock)
                (define-key inferior-octave-mode-map [up]
                  'comint-previous-input)
                (define-key inferior-octave-mode-map [down]
                  'comint-next-input)))
        ))
#+END_SRC

** Useful Functions

*** Indentation

#+BEGIN_SRC emacs-lisp
(defun indent-whole-buffer ()                   ; indentation
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
(defun indent-current-paragraph ()              ; code cleanup
  "indent current paragraph"
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (mark-paragraph)
    (indent-region (region-beginning) (region-end) nil)))
#+END_SRC

*** Line Indent

#+BEGIN_SRC emacs-lisp
(defun indent-text (distance)
  (if (use-region-p)
      (let ((mark (mark)))
        (save-excursion
          (indent-rigidly (region-beginning)
                          (region-end)
                          distance)
          (push-mark mark t t)
          (setq deactivate-mark nil)))
    (indent-rigidly (line-beginning-position)
                    (line-end-position)
                    distance)))

(defun inc-line-indent (count)
  (interactive "p")
  (indent-text count))

(defun dec-line-indent (count)
  (interactive "p")
  (indent-text (- count)))

(global-set-key (kbd "C-c > >") (lambda () (interactive) (inc-line-indent 4)))
(global-set-key (kbd "C-c < <") (lambda () (interactive) (dec-line-indent 4)))
#+END_SRC

*** File Format Convertion

#+BEGIN_SRC emacs-lisp
(defun dos2unix ()                              ; EoL conversion
  "dos2unix on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'unix))
(defun unix2dos ()
  "unix2dos on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'dos))
#+END_SRC

*** Commenting

#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment ()                  ; @ https://github.com/anler/.emacs.d-literate
  "Comment or uncomment current line or region if there's a region active."
  (interactive)
  (let ((start (line-beginning-position))
        (end (line-end-position)))
    (when (region-active-p)
      (setq start (save-excursion
                    (goto-char (region-beginning))
                    (beginning-of-line)
                    (point))
            end (save-excursion
                  (goto-char (region-end))
                  (end-of-line)
                  (point))))
    (comment-or-uncomment-region start end)))
(defun comment-or-uncomment-lisp-form ()
  "Comment or uncomment current lisp form"
  (interactive)
  (save-excursion
    (beginning-of-line)
    (if (search-forward-regexp ";+ " (save-excursion
                                       (end-of-line)
                                       (point))
                               :noerror)
        (call-interactively 'emr-lisp-uncomment-block)
      (call-interactively 'emr-lisp-comment-form))))
#+END_SRC

*** Copy N Paste                                :EDIT:

Selective copy and paste

#+BEGIN_SRC emacs-lisp
;; require xsel
(defun copy-to-clipboard ()
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))
  )

(defun paste-from-clipboard ()
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "xsel -o -b"))
    )
  )
#+END_SRC

*** Dired                                       :FILE:

File manager

#+BEGIN_SRC emacs-lisp
(defun dired-open-home ()
  (interactive)
  (dired "~/")
  )
#+END_SRC
* Tips

** Keybindings

| keybindings                       | alternative | mode          | description                         |
|-----------------------------------+-------------+---------------+-------------------------------------|
| =C-u 4 C-x Tab= / =C-4 C-x Tab=   | =C-c > >=   | buildin       | indent the region by =4= spaces     |
| =C-u -4 C-x Tab= / =C--4 C-x Tab= | =C-c < <=   | buildin       | un-indent the region by =4= spaces  |
| =C-x SPC=                         |             | buildin       | rectangular selection               |
| =C-x r t=                         |             | buildin       | replace rectangule content          |
| =C-c '‚Äã=                           |             | org           | edit SRC block in separate buffer   |
| =S-<arrow>=                       | =C-x o=     | buildin       | move point between windows          |
| =M-<num>=                         |             | window-number | jump to window by number            |
| =C-S-Backspace=                   | =C-a C-k=   | buildin       | delete a whole line                 |
| =C-x z=                           |             | buildin       | repeat last command                 |
| =z=                               |             | buildin       | repeat last command again           |
| =M-<=                             |             | buildin       | top of buffer                       |
| =M->=                             |             | buildin       | end of buffer                       |
| =C-NUM C-x $=                     | hideshow    | buildin       | hide lines indented more NUM colums |
| =C-x $=                           | hideshow    | buildin       | show all lines                      |
| =C-x ==                           |             | buildin       | show current cursor position        |

#+BEGIN_SRC emacs-lisp
;; Local Variables:
;; byte-compile-warnings: (not free-vars unresolved)
;; End:
#+END_SRC
