#+TITLE: Emacs Configuration in Org-mode
#+OPTIONS: toc:2 num:nil

This file re-organises [[https://github.com/yang-l/configurations][the old init files]]

* Installation

Backup existing =~/.emacs.d=, and followed by

#+BEGIN_SRC bash
git clone https://github.com/yang-l/emacs.d.git ~/.emacs.d
#+END_SRC

* Emacs init.el

** Initialisation

*** Load files

Path to non ELPA included lisp files
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

Path to personal/credential info
#+BEGIN_SRC emacs-lisp
(load (expand-file-name "private.el" user-emacs-directory))
#+END_SRC

The contains of =~/.emacs.d/private.el= should include
#+BEGIN_SRC
(defvar my-win-default-directory "WINDEFDIR")   ; folder
(defvar my-lin-default-directory "LINDEFDIR")
(defvar my-erc-nick "NICKNAME")                 ; ERC
(defvar my-erc-user-full-name "FULLNAME")
(defvar my-erc-email-userid "USERID")
#+END_SRC

*** ELPA

#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list 'package-archives
                '("melpa" . "https://melpa.org/packages/") t)
    (package-initialize))
#+END_SRC

Define packages and install them in case of they are missing
#+BEGIN_SRC emacs-lisp
(defvar my-packages '(
    company yasnippet flycheck git-gutter magit ; Programming
    projectile helm-projectile
    js3-mode web-mode tern-auto-complete        ; JavaScript/Web
    elpy                                        ; Python
    zenburn-theme diminish                      ; UI
    sr-speedbar undo-tree window-numbering      ; Editing
    helm evil mwim multiple-cursors
    which-key                                   ; Misc
    ))
(dolist (p my-packages)                         ; install the missing packages
    (when (not (package-installed-p p))
    (package-install p)))
#+END_SRC

*** UTF-8 on everything

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8-unix)              ; UTF-8 on everything
(unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8))
(setq-default buffer-file-coding-system
    'utf-8-unix)                                ; linux output
(setq x-select-request-type                     ; pasting
    '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

*** Variable Initialisation

#+BEGIN_SRC emacs-lisp
(setq-default
    column-number-mode t                        ; show cursor position
    default-major-mode 'text-mode               ; set new buffers as test files
    initial-major-mode 'text-mode
    display-time-24hr-format t                  ; 24h time timeformat
    display-time-day-and-date t                 ; show time and date
    enable-recursive-minibuffers t              ; enable minibuffer recursive
    fill-column 80                              ; column space
    frame-title-format "emacs@%b"               ; show on title
    gc-cons-threshold 20000000                  ; GC
    indent-tabs-mode nil                        ; space instead of tab
    inhibit-splash-screen t                     ; no splash
    inhibit-startup-message t
    initial-scratch-message nil
    kill-ring-max 500                           ; kill ring size
    mouse-wheel-scroll-amount '(1 ((shift) .1)) ; scroll one line at a time
    read-buffer-completion-ignore-case t        ; ignore case-sensitivity
    read-file-name-completion-ignore-case t
    require-final-newline t                     ; always add a new line at the end of a file
    scroll-margin 3                             ; auto scrolling
    scroll-step 1                               ; line-by-line scrolling
    tab-width 4                                 ; 4 space indentation
    visible-bell 1                              ; no bell in windows
    x-stretch-cursor t                          ; stretch cursor to cover wide characters
    )
#+END_SRC

** Customisation

*** Key binding

Use the stock key bindings when possible.

The default =set-mark-command= config conflicts with chinese input trigger
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-SPC"))                ; mark trigger
(global-set-key "\M- " 'set-mark-command)
#+END_SRC

*** Browse URL

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function               ; default browser
        'browse-url-generic
    browse-url-generic-program
        (executable-find "firefox"))
#+END_SRC

*** Emacs Setup

#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook
    (lambda () (progn
        (auto-compression-mode 1)               ; open compressed files on the fly
        (delete-selection-mode t)               ; delete marked text on typing
        (display-time-mode 1)                   ; display time
        (global-hl-line-mode +1)                ; highlight current line
        (global-subword-mode 1)                 ; navigate into CamelCaseWords
        (diminish 'subword-mode)
        (menu-bar-mode -1)                      ; hide menu bar
        (mouse-avoidance-mode 'animate)         ; mouse avoidance
        (scroll-bar-mode -1)                    ; no scroll bars
        (show-paren-mode 1)                     ; show matched parentheses
        (toggle-frame-maximized)                ; fullscreen
        (tool-bar-mode -1)                      ; hide toolbar
        (visual-line-mode)                      ; soft line warp
        (diminish 'visual-line-mode)
        (when (fboundp                          ; windmove
            'windmove-default-keybindings)
            (windmove-default-keybindings))
    )))
#+END_SRC

*** Folder

**** Default folder

#+BEGIN_SRC emacs-lisp
(setq default-directory
    (if (eq system-type 'windows-nt)
        my-win-default-directory                ; Win
    my-lin-default-directory                    ; Linux
    ))
#+END_SRC

**** Emacs backup folder

#+BEGIN_SRC emacs-lisp
(defvar backup-directory                        ; backup and autosave directory
    (if (eq system-type 'windows-nt)            ; Windows
        (concat "C:/tmp/emacs/" (user-login-name) "/")
    (concat "~/emacs/" (user-login-name) "/")   ; Linux
    ))
(if (not (file-exists-p backup-directory))
    (make-directory backup-directory t))
(setq backup-directory-alist `((".*" . ,backup-directory)))
(setq auto-save-list-file-prefix backup-directory)
(setq auto-save-file-name-transforms `((".*", backup-directory t)))
(setq make-backup-files t                       ; backup of a file the first time it is saved.
      backup-by-copying t                       ; don't clobber symlinks
      version-control t                         ; version numbers for backup files
      delete-old-versions t                     ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 5                       ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 15                      ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t                       ; auto-save every buffer that visits a file
      auto-save-timeout 20                      ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200                    ; number of keystrokes between auto-saves (default: 300)
      vc-make-backup-files t                    ; backup versioned files
      )
; ignore file backups @ http://stackoverflow.com/questions/482256/
(defvar my-backup-ignore-regexps (list "\\.vcf$" "\\.gpg$")
  "*List of filename regexps to not backup")
(defun my-backup-enable-p (name)
  "Filter certain file backups"
  (when (normal-backup-enable-predicate name)
    (let ((backup t))
      (mapc (lambda (re)
              (setq backup (and backup (not (string-match re name)))))
            my-backup-ignore-regexps)
      backup)))
(setq backup-enable-predicate 'my-backup-enable-p)
#+END_SRC

**** Folders for other modes

#+BEGIN_SRC emacs-lisp
(setq semanticdb-default-save-directory
        (expand-file-name "semanticdb" backup-directory)
      recentf-save-file
        (expand-file-name "recentf" backup-directory)
    )
#+END_SRC

*** Buildin Mode Setting

**** Case

#+BEGIN_SRC emacs-lisp
(cl-loop for fn in '(downcase-region            ; enable commands
                     upcase-region
                     erase-buffer)
        do (put fn 'disabled nil))
#+END_SRC

**** Comint

#+BEGIN_SRC emacs-lisp
(add-hook 'comint-output-filter-functions
    'comint-watch-for-password-prompt)          ; hide password in shell
#+END_SRC

**** Dried

#+BEGIN_SRC emacs-lisp
(setq dired-recursive-deletes 'top              ; recursive delection
      dired-recursive-copies 'always)           ; recursive copy
#+END_SRC

**** Imenu

#+BEGIN_SRC emacs-lisp
(set-default 'imenu-auto-rescan t)              ; automatic buffer rescan
#+END_SRC

**** Narrowing

#+BEGIN_SRC emacs-lisp
(cl-loop for fn in '(narrow-to-defun            ; enable commands
                     narrow-to-page
                     narrow-to-region)
        do (put fn 'disabled nil))
#+END_SRC

**** Shell & Term

***** ansi-term

#+BEGIN_SRC emacs-lisp
(defadvice ansi-term                            ; utf-8
    (after advise-ansi-term-coding-system)
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(ad-activate 'ansi-term)

(defadvice term-sentinel
    (around my-advice-term-sentinel (proc msg) activate)
    (if (memq (process-status proc) '(signal exit))
        (let ((buffer (process-buffer proc)))
            ad-do-it
            (kill-buffer buffer))
        ad-do-it))
#+END_SRC

**** Tramp

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")               ; faster than the default scp
#+END_SRC

*** UI

**** Font

Emacs GUI under Windows

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (set-face-attribute 'default nil :font "Consolas:antialias=natural" :height 100))
#+END_SRC

**** Theme

Zenburn theme

#+BEGIN_SRC emacs-lisp
(load-theme 'zenburn t)
#+END_SRC

**** Transparent

#+BEGIN_SRC emacs-lisp
(set-frame-parameter
    (selected-frame) 'alpha '(98 98))
#+END_SRC

** Development

#+BEGIN_SRC emacs-lisp
(defun modes/prog-mode ()
    "prog-mode hook"
    (setq
        compilation-ask-about-save nil          ; save before compiling
        compilation-always-kill t               ; always kill old compile processes before
                                                ; starting the new one
        compilation-scroll-output 'first-error  ; Automatically scroll to first error
      )
    (goto-address-prog-mode)                    ; highlight URL
    (linum-mode)                                ; show line number
    (prettify-symbols-mode)
    (setq yas-snippet-dirs backup-directory)    ; snippet collections
    )
(add-hook 'prog-mode-hook 'modes/prog-mode)
(add-hook 'before-save-hook                     ; remove trailing whitespace
    'delete-trailing-whitespace)
#+END_SRC

*** Git

**** git-gutter

#+BEGIN_SRC emacs-lisp
(require 'git-gutter)
(with-eval-after-load 'git-gutter
    (git-gutter:linum-setup)                    ; w/linum mode
    (custom-set-variables                       ; backend
        '(git-gutter:handled-backends
        (quote (git svn))))
    (diminish 'git-gutter-mode)
    )
(dolist (mode-hook '(web-mode-hook
                    ))
    (add-hook mode-hook #'git-gutter-mode)
    )
#+END_SRC

**** magit

#+BEGIN_SRC emacs-lisp
(require 'magit)
(eval-after-load "magit"
    '(progn
        ;; key bindings
        (global-set-key (kbd "C-x g") 'magit-status)

        ;; full screen magit-status
        (defadvice magit-status (around magit-fullscreen activate)
          (window-configuration-to-register :magit-fullscreen)
          ad-do-it
          (delete-other-windows))
    ))
#+END_SRC

*** Web / JS

**** js3-mode

#+BEGIN_SRC emacs-lisp
(autoload 'js3-mode "js3" nil t)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js3-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'" . js3-mode))
(setq js3-lazy-commas t
      js3-lazy-operators t
      js3-lazy-dots t
      js3-expr-indent-offset 2
      js3-paren-indent-offset 2
      js3-square-indent-offset 2
      js3-curly-indent-offset 2
      js3-auto-indent-p t
      js3-enter-indents-newline t
      js3-indent-on-enter-key t
      js3-indent-dots t
      )
#+END_SRC

**** tern

#+BEGIN_SRC emacs-lisp
(add-hook 'js3-mode-hook (lambda () (tern-mode t)))
(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))                         ; need to change tern.elc - http://stackoverflow.com/questions/18102833/could-not-start-tern-server-in-emacs
#+END_SRC

**** web-mode

#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(defun modes/web-mode ()
    "web-mode hook"
    (setq web-mode-indent-style 4               ; indentation
          web-mode-code-indent-offset 4
          web-mode-css-indent-offset 2
          web-mode-markup-indent-offset 4
          web-mode-block-padding 4
          web-mode-style-padding 4
          web-mode-script-padding 4
          web-mode-enable-css-colorization t
          )
    (add-to-list (make-local-variable 'company-backends)
                             '(company-css company-nxml))
    )
(add-hook 'web-mode-hook 'modes/web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

*** Scripting

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook                      ; make shell script executable on save
    'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

**** Bash

#+BEGIN_SRC emacs-lisp
(defun modes/sh-mode ()
    "sh mode hook"
    (setq sh-basic-offset 2
          sh-indentation 2
          sh-indent-comment t
    ))
(add-hook 'sh-mode-hook 'modes/sh-mode)
#+END_SRC

**** Python

#+BEGIN_SRC emacs-lisp
(defun modes/python-mode ()
    "python mode hook"
    (company-mode 0)                            ; disable company-mode
    (when (require 'elpy nil t)                 ; Note - require external python package to be installed
                                                ; $ pip install elpy rope jedi #Python2
                                                ; $ pip3 install elpy rope_py3k jedi #Python3
        (elpy-enable)                           ; enable elpy
        (setq elpy-rpc-backend "jedi")          ; jedi (instead of rope) backend
        )
    )
(add-hook 'python-mode-hook 'modes/python-mode)
#+END_SRC

** Mode Setting

*** company mode

#+BEGIN_SRC emacs-lisp
(require 'company)
(with-eval-after-load 'company (progn
    (defun modes/company-mode ()
        "company mode hook"
        (company-mode)                          ; enable only under specific modes
        (define-key (current-local-map) [remap hippie-expand] 'company-complete)
        (setq-default company-backends          ; default backends
            '((company-abbrev
              company-dabbrev
              company-dabbrev-code
              company-files
              company-ispell
              company-keywords                  ; keywords
              company-yasnippet
              ))
              company-global-modes
                '(not eshell-mode)
              company-idle-delay 0.25           ; delay before autocompletion popup shows
              company-minimum-prefix-length 2
              company-tooltip-align-annotations t
              company-tooltip-limit 10          ; popup window size
              company-tooltip-flip-when-above t ; flip the popup menu when near the bottom of windows
              company-selection-wrap-around t   ; loop over candidates
              company-show-numbers t            ; show number
              company-begin-commands
                '(self-insert-command)          ; start autocompletion only after typing
              company-dabbrev-downcase nil      ; do not change case in dabbrev
              company-dabbrev-ignore-case t
              company-dabbrev-other-buffers t
              company-transformers
                '(company-sort-by-occurrence)
            ))
    (add-hook 'prog-mode-hook 'modes/company-mode)
    (diminish 'company-mode)
    ))
#+END_SRC

*** diminish

shorten mode-line

#+BEGIN_SRC emacs-lisp
(require 'diminish)
#+END_SRC

*** erc

#+BEGIN_SRC emacs-lisp
(require 'erc)
(eval-after-load "erc"
    '(progn
        (setq
            erc-server  "irc.freenode.net"      ; default to freenode.net
            erc-port    "6697"
            erc-nick my-erc-nick
            erc-user-full-name my-erc-user-full-name
            erc-email-userid my-erc-email-userid
            erc-hide-list                       ; hide unwanted messages
                '("JOIN" "PART" "QUIT")
            erc-interpret-mirc-color t          ; color highlighting
            erc-rename-buffers t                ; Rename buffers to the current network name instead of SERVER:PORT
            erc-server-coding-system            ; always utf-8
                '(utf-8 . utf-8)
            erc-log-mode t                      ; enable logging
            erc-generate-log-file-name-function
                (quote erc-generate-log-file-name-with-date)
            erc-hide-timestamps t               ; hide logging timestamp when chatting
            erc-log-channels-directory          ; directory
                (concat backup-directory "erc.logs/")
            erc-log-insert-log-on-open nil      ; ignore previous messages
            erc-log-file-coding-system 'utf-8-unix
        )
        (erc-log-mode)
        (erc-truncate-mode +1)                  ; truncate long irc buffers
        (require 'erc-sasl)                     ; sasl
        (add-to-list 'erc-sasl-server-regexp-list "irc\\.freenode\\.net")
    ))

;; for erc-sasl
(defun erc-login ()
  "Perform user authentication at the IRC server."
  (erc-log (format "login: nick: %s, user: %s %s %s :%s"
		   (erc-current-nick)
		   (user-login-name)
		   (or erc-system-name (system-name))
		   erc-session-server
		   erc-session-user-full-name))
  (if erc-session-password
      (erc-server-send (format "PASS %s" erc-session-password))
    (message "Logging in without password"))
  (when (and (featurep 'erc-sasl) (erc-sasl-use-sasl-p))
    (erc-server-send "CAP REQ :sasl"))
  (erc-server-send (format "NICK %s" (erc-current-nick)))
  (erc-server-send
    (format "USER %s %s %s :%s"
	   ;; hacked - S.B.
	   (if erc-anonymous-login erc-email-userid (user-login-name))
	   "0" "*"
	   erc-session-user-full-name))
  (erc-update-mode-line))
#+END_SRC

*** evil

#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
(setq evil-default-state 'emacs)                ; default to emacs
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(require 'flycheck)
#+END_SRC

*** helm

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(with-eval-after-load 'helm-config
    (helm-mode 1)
    (helm-autoresize-mode 1)                    ; buffer window resizing
    (setq helm-buffers-fuzzy-matching t         ; fuzzy matching when non-nil
        helm-imenu-fuzzy-match t
        helm-M-x-fuzzy-match t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-adaptive-history-file
            (expand-file-name "helm-adaptive-history" backup-directory)
        helm-candidate-number-limit 100         ; candidate limit
        helm-ff-search-library-in-sexp t        ; search for library in `require' and `declare-function' sexp
        helm-move-to-line-cycle-in-source t     ; move to end or beginning of source when reaching top or bottom of source
        helm-quick-update t                     ; do not display invisible candidates
        helm-split-window-in-side-p t           ; open helm buffer inside current window, not occupy whole other window
        )
    (define-key (current-global-map) [remap switch-to-buffer] 'helm-mini)
    (define-key (current-global-map) [remap execute-extended-command] 'helm-M-x)
    (define-key (current-global-map) [remap dabbrev-expand] 'helm-dabbrev)
    (define-key (current-global-map) [remap occur] 'helm-occur)
    (add-hook 'eshell-mode-hook                 ; eshell
        #'(lambda ()
            (define-key eshell-mode-map
                [remap eshell-pcomplete]
                'helm-esh-pcomplete)))
    (diminish 'helm-mode)
    )
#+END_SRC

*** org-mode

#+BEGIN_SRC emacs-lisp
(defun modes/org-mode ()
    "org-mode hook"
    (setq truncate-lines nil)                   ; line wrap
    )
(add-hook 'org-mode-hook 'modes/org-mode)
#+END_SRC

*** (helm-)projectile

#+BEGIN_SRC emacs-lisp
(require 'helm-projectile)
(defun modes/projectile-mode ()
    "projectile-mode hook"
    (setq
        projectile-keymap-prefix (kbd "C-c p")          ; prefix
        projectile-completion-system 'helm              ; via helm backend
        projectile-enable-caching t                     ; enable caching unconditionally
        projectile-file-exists-remote-cache-expire nil  ; disable remote file exists cache
        projectile-remember-window-configs t
        projectile-switch-project-action
            'helm-projectile
        projectile-cache-file (expand-file-name         ; Projectile cache file
            "projectile.cache" backup-directory)
        projectile-sort-order 'modification-time
    )
    (if (eq system-type 'windows-nt)                    ; external indexing under windows
            (setq projectile-indexing-method 'alien))
    (helm-projectile-on)                                ; active helm, instead of Projectile, commands
    )
(add-hook 'prog-mode-hook #'modes/projectile-mode)
#+END_SRC

*** multiple-cursors

#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
#+END_SRC

*** mwim

move where I mean

#+BEGIN_SRC emacs-lisp
(require 'mwim)
(global-set-key (kbd "C-a") #'mwim-beginning-of-code-or-line)
(global-set-key (kbd "C-e") #'mwim-end-of-code-or-line)
#+END_SRC

*** speedbar / sr-speedbar

#+BEGIN_SRC emacs-lisp
(setq speedbar-show-unknown-files t             ; show all files
      speedbar-directory-unshown-regexp "^$"
      speedbar-use-images nil                   ; no icon
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'sr-speedbar)
(sr-speedbar-refresh-turn-off)                  ; not refresh speedbar content
(sr-speedbar-open)                              ; open sr-speedbar window
(with-current-buffer sr-speedbar-buffer-name
    (setq window-size-fixed 'width              ; keep windows size
        ))
(setq sr-speedbar-skip-other-window-p t)        ; skip sr-speedbar when cyclic windows
#+END_SRC

*** undo-tree

#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)
(defun modes/undo-tree-mode ()
    "undo-tree-mode hook"
    (setq undo-tree-visualizer-diff t
          undo-tree-visualizer-timestamps t
          undo-tree-history-directory-alist
            `((".*" . ,backup-directory))
          undo-tree-auto-save-history t
        )
    )
(add-hook 'undo-tree-mode-hook 'modes/undo-tree-mode)
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
#+END_SRC

*** which-key

Display the key bindings in a popup.

#+BEGIN_SRC emacs-lisp
(require 'which-key)
(eval-after-load "which-key"
    '(progn
        (which-key-mode)
        (setq which-key-idle-delay 2.0)         ; popup delay
        (diminish 'which-key-mode)
    ))
#+END_SRC

*** whitespace

#+BEGIN_SRC emacs-lisp
(setq-default
    whitespace-style '(face lines-tail))
(add-hook 'prog-mode-hook #'global-whitespace-mode)
(add-hook 'whitespace-mode-hook
    (lambda () (set
        (make-local-variable 'whitespace-line-column)
        fill-column)))
(eval-after-load "whitespace" '(diminish 'global-whitespace-mode))
#+END_SRC

*** window-numbering

buffers switching

#+BEGIN_SRC emacs-lisp
(require 'window-numbering)
(window-numbering-mode 1)
#+END_SRC

*** winner-mode

#+BEGIN_SRC emacs-lisp
(winner-mode +1)
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'yasnippet
    )
#+END_SRC

** Research

*** AUCTex
#+BEGIN_SRC emacs-lisp
(when (locate-library "auctex") (progn
    (defun modes/auctex-mode ()
        "auctex-mode hook"
        ;; set latexmk the default LaTeX compiler
        (push
         '("Latexmk" "latexmk -outdir=/tmp/emacs/latex -bibtex -pdf -pv %s" TeX-run-command nil t
           :help "Run Latexmk on file")
         TeX-command-list)
        (setq TeX-command-default "Latexmk")

        ;; auto directory for auto-generated info
        (setq TeX-auto-local "/tmp/emacs/latex/auctex-auto/")
        (setq TeX-parse-self t) ; enable parse on load
        (setq TeX-auto-save t) ; enable parse on save

        (setq-default TeX-master nil)
        (setq TeX-save-query nil) ; autosave before compiling

        (TeX-fold-mode 1) ; enable code folding
        (TeX-fold-buffer)

        ;; smart quotes
        (setq TeX-open-quote "<<")
        (setq TeX-close-quote ">>")

        ;; detect master files
        (defun guess-TeX-master (filename)
          "Guess the master file for FILENAME from currently open .tex files."
          (let ((candidate nil)
                (filename (file-name-nondirectory filename)))
            (save-excursion
              (dolist (buffer (buffer-list))
                (with-current-buffer buffer
                  (let ((name (buffer-name))
                        (file buffer-file-name))
                    (if (and file (string-match "\\.tex$" file))
                        (progn
                          (goto-char (point-min))
                          (if (re-search-forward (concat "\\\\input{" filename "}") nil t)
                              (setq candidate file))
                          (if (re-search-forward (concat "\\\\include{" (file-name-sans-extension filename) "}") nil t)
                              (setq candidate file))))))))
            (if candidate
                (message "TeX master document: %s" (file-name-nondirectory candidate)))
            candidate))
        (setq TeX-master (guess-TeX-master (buffer-file-name))))
    (add-hook 'LaTeX-mode-hook 'modes/auctex-mode)

    ;; activate the Ref mode
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)     ; with AUCTeX LaTeX mode

    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)    ; auctex LaTeX math mode
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)   ; with AUCTeX LaTeX mode

    ;; enable flyspell-mode
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)

    ;; activate syntax highlighting - font-lock-mode
    (add-hook 'LaTeX-mode-hook 'turn-on-font-lock)

    ;; AUCTEX / EMACS / EVINCE - Forward & Inverse Search
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)

    ;; evince(pdf) -> emacs(latex) search - inverse search
    ;; ctrl + mouse right button in evince
    ;;(defun un-urlify (fname-or-url)
    ;;  "A trivial function that replaces a prefix of file:/// with just /."
    ;;  (if (string= (substring fname-or-url 0 8) "file:///")
    ;;      (substring fname-or-url 7)
    ;;    fname-or-url))

    (defun th-evince-sync (file linecol &rest ignored)
      (let* ((fname (un-urlify file))
             (buf (find-file fname))
             (line (car linecol))
             (col (cadr linecol)))
        (if (null buf)
            (message "[Synctex]: %s is not opened..." fname)
          (switch-to-buffer buf)
          (goto-line (car linecol))
          (unless (= col -1)
            (move-to-column col)))))

    (defvar *dbus-evince-signal* nil)

    (defun enable-evince-sync ()
      (require 'dbus)
      (when (and
             (eq window-system 'x)
             (fboundp 'dbus-register-signal))
        (unless *dbus-evince-signal*
          (setf *dbus-evince-signal*
                (dbus-register-signal
                 :session nil "/org/gnome/evince/Window/0"
                 "org.gnome.evince.Window" "SyncSource"
                 'th-evince-sync)))))
    (add-hook 'LaTeX-mode-hook 'enable-evince-sync)

    ;; emacs(latex) -> evince(pdf) - forward search
    ;; c-c c-c -> View -> pdf-forward-search in emacs
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (add-hook 'LaTeX-mode-hook (lambda()
    ;; https://github.com/MassimoLauria/dotemacs/blob/42fd1978da3780df725198862fa9f28c0ac4218c/init-latex.le
    ;; https://gist.github.com/2297447

    ;; http://tex.stackexchange.com/a/78051
    ;; un-urlify and urlify-escape-only should be improved to handle all special characters, not only spaces.
    ;; The fix for spaces is based on the first comment on http://emacswiki.org/emacs/AUCTeX#toc20
    (defun un-urlify (fname-or-url)
      "Transform file:///absolute/path from Gnome into /absolute/path with very limited support for special characters"
      (if (string= (substring fname-or-url 0 8) "file:///")
          (url-unhex-string (substring fname-or-url 7))
        fname-or-url))

    (defun urlify-escape-only (path)
      "Handle special characters for urlify"
      (replace-regexp-in-string " " "%20" path))

    (defun urlify (absolute-path)
      "Transform /absolute/path to file:///absolute/path for Gnome with very limited support for special characters"
      (if (string= (substring absolute-path 0 1) "/")
          (concat "file://" (urlify-escape-only absolute-path))
        absolute-path))

    ;; universal time, need by evince
    (defun utime ()
      (let ((high (nth 0 (current-time)))
            (low (nth 1 (current-time))))
        (+ (* high (lsh 1 16) ) low)))

    ;; Forward search.
    ;; Adapted from http://dud.inf.tu-dresden.de/~ben/evince_synctex.tar.gz
    (defun auctex-evince-forward-sync (pdffile texfile line)
      (let ((dbus-name
             (dbus-call-method :session
                               "org.gnome.evince.Daemon"  ; service
                               "/org/gnome/evince/Daemon" ; path
                               "org.gnome.evince.Daemon"  ; interface
                               "FindDocument"
                               (urlify pdffile)
                               t     ; Open a new window if the file is not opened.
                               )))
        (dbus-call-method :session
                          dbus-name
                          "/org/gnome/evince/Window/0"
                          "org.gnome.evince.Window"
                          "SyncView"
                          (urlify-escape-only texfile)
                          (list :struct :int32 line :int32 1)
                          (utime))))

    (defun pdf-forward-search ()
      (let (
            (pdf (concat "/tmp/emacs/latex/" (TeX-master-file (TeX-output-extension))))
            (tex (buffer-file-name))
            (line (line-number-at-pos)))
        (auctex-evince-forward-sync pdf tex line)))

    ;; PDF forward search : emacs -> dbus -> evince
    (setq TeX-view-program-list '())
    (add-to-list 'TeX-view-program-list
                 '("EvinceForward" pdf-forward-search))

    (setq TeX-view-program-selection '())
    (add-to-list 'TeX-view-program-selection
                 '(output-pdf "EvinceForward"))
    ))))
#+END_SRC

*** Maxima

#+BEGIN_SRC emacs-lisp
(when (locate-library "maxima")
    (autoload 'maxima-mode "maxima" nil t)
    (setq auto-mode-alist (cons '("\\.ma?[cx]" . maxima-mode) auto-mode-alist))
    )
#+END_SRC

*** Octave

#+BEGIN_SRC emacs-lisp
(autoload 'octave-mode "octave-mod" nil t)
(setq auto-mode-alist (append '(("\\.m$" . octave-mode)) auto-mode-alist))

(with-eval-after-load 'octave-mod
    '(progn
        (abbrev-mode 1)
        (auto-fill-mode 1)
        (if (eq window-system 'x)
            (font-lock-mode 1))

        (run-octave)

        (add-hook 'inferior-octave-mode-hook
            (lambda ()
                (turn-on-font-lock)
                (define-key inferior-octave-mode-map [up]
                  'comint-previous-input)
                (define-key inferior-octave-mode-map [down]
                  'comint-next-input)))
        ))
#+END_SRC

** Useful Functions

*** Indentation

#+BEGIN_SRC emacs-lisp
(defun indent-whole-buffer ()                   ; indentation
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
(defun indent-current-paragraph ()
  "indent current paragraph"
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (mark-paragraph)
    (indent-region (region-beginning) (region-end) nil)))
#+END_SRC

*** Line Indent

#+BEGIN_SRC emacs-lisp
(defun indent-text (distance)
  (if (use-region-p)
      (let ((mark (mark)))
        (save-excursion
          (indent-rigidly (region-beginning)
                          (region-end)
                          distance)
          (push-mark mark t t)
          (setq deactivate-mark nil)))
    (indent-rigidly (line-beginning-position)
                    (line-end-position)
                    distance)))

(defun inc-line-indent (count)
  (interactive "p")
  (indent-text count))

(defun dec-line-indent (count)
  (interactive "p")
  (indent-text (- count)))

(global-set-key (kbd "C-c > >") (lambda () (interactive) (inc-line-indent 4)))
(global-set-key (kbd "C-c < <") (lambda () (interactive) (dec-line-indent 4)))
#+END_SRC

*** File Format Convertion

#+BEGIN_SRC emacs-lisp
(defun dos2unix ()                              ; EoL conversion
  "dos2unix on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'unix))
(defun unix2dos ()
  "unix2dos on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'dos))
#+END_SRC

*** Commenting

#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment ()                  ; @ https://github.com/anler/.emacs.d-literate
  "Comment or uncomment current line or region if there's a region active."
  (interactive)
  (let ((start (line-beginning-position))
        (end (line-end-position)))
    (when (region-active-p)
      (setq start (save-excursion
                    (goto-char (region-beginning))
                    (beginning-of-line)
                    (point))
            end (save-excursion
                  (goto-char (region-end))
                  (end-of-line)
                  (point))))
    (comment-or-uncomment-region start end)))
(defun comment-or-uncomment-lisp-form ()
  "Comment or uncomment current lisp form"
  (interactive)
  (save-excursion
    (beginning-of-line)
    (if (search-forward-regexp ";+ " (save-excursion
                                       (end-of-line)
                                       (point))
                               :noerror)
        (call-interactively 'emr-lisp-uncomment-block)
      (call-interactively 'emr-lisp-comment-form))))
#+END_SRC

* Tips

** Keybindings

| keybindings                       | alternative | description                        |
|-----------------------------------+-------------+------------------------------------|
| =C-u 4 C-x Tab= / =C-4 C-x Tab=   | =C-c > >=   | indent the region by =4= spaces    |
| =C-u -4 C-x Tab= / =C--4 C-x Tab= | =C=c < <=   | un-indent the region by =4= spaces |
| =C-x SPC=                         |             | rectangular selection              |
| =C-x r t=                         |             | replace rectangule content         |
