#+TITLE: Emacs Configuration
#+OPTIONS: toc:2 num:nil

This file re-organises [[https://github.com/yang-l/configurations][the old init files]]

* Installation

Backup existing =~/.emacs.d=, and then follow by

#+BEGIN_SRC
git clone https://github.com/yang-l/emacs.d.git ~/.emacs.d
#+END_SRC

* Emacs init.el

** Initialisation

*** Load files

Path to non ELPA included lisp files
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

Path to personal/credential info in =~/.emacs.d/private.el=
#+BEGIN_SRC emacs-lisp
(defvar default-directory                       ; default folder
  (concat (getenv "HOME") "/"))
(defvar my-win-default-directory default-directory)
(defvar my-lin-default-directory default-directory)
(defvar my-erc-nick "")                         ; ERC
(defvar my-erc-user-full-name "")
(defvar my-erc-email-userid "")
(defvar my-op/repository-directory "")          ; org-page
(defvar my-op/site-domain "")
(defvar my-op/personal-github-link "")

;; override
(when (file-exists-p (concat user-emacs-directory "private.el"))
  (load (expand-file-name "private.el" user-emacs-directory) 'no-error))
#+END_SRC

*** Package management

`straight.el' defined 'init.el'

`use-package' related 'delay-hook' stuffs

#+BEGIN_SRC emacs-lisp
;; https://github.com/jwiegley/use-package/issues/889
;; https://github.com/Ergus/EmacsConfig/blob/master/early-init.el
(defvar lo/gc-cons-default (* 1024 1024 32))
(defvar lo/gc-cons-lsp (* 1024 1024 256))

(defsubst lo/unset-gc ()
  "Defer garbage collection"
  (setq gc-cons-threshold most-positive-fixnum))

(defsubst lo/set-gc (&optional gc-value)
  "Set garbage collection"
  (unless gc-value (setq gc-value lo/gc-cons-default))
  (unless (= gc-cons-threshold lo/gc-cons-lsp)
    (setq gc-cons-threshold gc-value)           ; reset GC to a reasonable value
    (message "Set `gc-cons-threshold' value to %S" gc-cons-threshold)))

(defmacro lo/gen-delay-hook (mode-name)
  "Generate delayed hook For MODE-NAME."
  (let ((funame (intern (format "lo/%s-hook" mode-name)))
        (delayhook (intern (format "%s-delay-hook" mode-name)))
        (modehook (intern (format "%s-hook" mode-name))))
    `(progn
       (defvar ,delayhook nil)
       (defun ,funame ()
         ,(format "Delayed hook for %s." mode-name)
         (run-with-idle-timer
          0.5 nil (lambda (buf)
                    (when (buffer-live-p buf)
                      (with-current-buffer buf
                        (message "Running delay hook for [%s]: %s" `,mode-name ,delayhook)
                        (lo/unset-gc)
                        (run-hooks ',delayhook)
                        (lo/set-gc))))
          (current-buffer)))
       (add-hook ',modehook (function ,funame)))))

(lo/gen-delay-hook prog-mode)
(lo/gen-delay-hook text-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; benchmarking emacs boot sequence
(use-package benchmark-init
  :disabled                                     ; by default
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

Configuration for `use-package'. The packages below should be loaded first before any `use-package' has been invoked

#+BEGIN_SRC emacs-lisp
(defvar backup-directory                        ; backup and autosave directory
  (if (eq system-type 'windows-nt)              ; Windows
      (concat "C:/tmp/emacs/" (user-login-name) "/")
    (expand-file-name
     (concat "~/emacs/" (user-login-name) "/")) ; Linux & Mac
    ))
(if (not (file-exists-p backup-directory))
    (make-directory backup-directory t))

(use-package no-littering                       ; keep `litter` files in one location
  :init
  (setq no-littering-var-directory (expand-file-name (convert-standard-filename "cache/var/") backup-directory)
        no-littering-etc-directory (expand-file-name (convert-standard-filename "cache/etc/") backup-directory))
  )

(use-package diminish)                          ; shorten mode-line
#+END_SRC

*** UTF-8 on everything

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8-unix)              ; UTF-8 on everything
(unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8))
(setq x-select-request-type                     ; pasting
    '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

*** Variable Initialisation

#+BEGIN_SRC emacs-lisp
(setq-default
    ad-redefinition-action 'accept              ; silence functions getting redefined messages
    column-number-mode t                        ; show cursor position
    custom-file                                 ; save customisations into a sibling file
    (no-littering-expand-etc-file-name "custom.el")
    default-major-mode 'text-mode               ; set new buffers as text files
    enable-recursive-minibuffers t              ; enable minibuffer recursive
    fill-column 80                              ; column space
    frame-title-format "emacs@%b"               ; show on title
    indent-tabs-mode nil                        ; space instead of tab
    kill-ring-max 500                           ; kill ring size
    mouse-wheel-scroll-amount '(1 ((shift) .1)) ; scroll one line at a time
    frame-resize-pixelwise t
    read-buffer-completion-ignore-case t        ; ignore case-sensitivity
    read-file-name-completion-ignore-case t
    require-final-newline t                     ; always add a new line at the end of a file
    save-interprogram-paste-before-kill t       ; put clipboard into killringy
    scroll-margin 3                             ; auto scrolling
    scroll-step 1                               ; line-by-line scrolling
    scroll-conservatively 10000                 ; do not jump to centre point in the window
    scroll-preserve-screen-position t           ; make the cursor steady when scrolling
    tab-width 2                                 ; 2 space indentation
    visible-bell 1                              ; no bell in windows
    window-combination-resize t                 ; split windows equally
    x-stretch-cursor t                          ; stretch cursor to cover wide characters
    )
(defalias 'dabbrev-expand 'hippie-expand)
(fset 'yes-or-no-p 'y-or-n-p)                   ; fast confirmation
#+END_SRC

*** PATH

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :defer 0.1
  :config
  (when (eq system-type 'darwin)                    ; only apply to under OSX graphic and console UI
    (setq exec-path-from-shell-arguments nil
          exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize))

  (exec-path-from-shell-copy-env "SSH_AGENT_PID")   ; inherent ssh-agent from system
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")

  (setenv "PATH"
          (concat
           (getenv "PATH")
           ))
  )
#+END_SRC

*** Server mode

Run Emacs as a daemon, and edit via =emacsclient=. =emacsclient -t= for terminal / =emacsclient -c= for graphic

#+BEGIN_SRC emacs-lisp
(use-package server
  :defer 1
  :config
  (unless (and (fboundp 'server-running-p)
               (server-running-p))
    (server-start)))
#+END_SRC

** Customisation

*** Key binding

Use the stock key bindings when possible.

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-SPC"))                ; set-mark-command
(global-unset-key (kbd "C-x f"))                ; set-fill-column
(global-unset-key (kbd "C-z"))                  ; suspend-frame
#+END_SRC

passing tmux keystrokes within emacs terminal

#+BEGIN_SRC emacs-lisp
(defadvice terminal-init-screen
    ;; The advice is named `tmux', and is run before `terminal-init-screen' runs.
    (before tmux activate)
    ;; Docstring.  This describes the advice and is made available inside emacs;
    ;; for example when doing C-h f terminal-init-screen RET
    "Apply xterm keymap, allowing use of keys passed through tmux."
    ;; This is the elisp code that is run before `terminal-init-screen'.
    (if (getenv "TMUX")
        (let ((map (copy-keymap xterm-function-map)))
          (set-keymap-parent map (keymap-parent input-decode-map))
          (set-keymap-parent input-decode-map map))))
#+END_SRC

OSX-only key bindings

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)                  ; mac only settings
  (setq mac-option-modifier 'meta
        mac-right-option-modifier 'alt))        ; only work under gui
#+END_SRC

*** Browse URL

#+BEGIN_SRC emacs-lisp
(defvar browser-path
  (cond
   ((executable-find "firefox")
    "firefox")
   ((executable-find "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")
    "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")))

(setq browse-url-browser-function 'browse-url-generic       ; default browser
      browse-url-generic-program  browser-path)
#+END_SRC

*** Emacs Setup

#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook
    #'(lambda () (progn
        (mouse-avoidance-mode 'animate)         ; mouse avoidance
        (if (fboundp 'scroll-bar-mode)
            (scroll-bar-mode -1))               ; no scroll bars
        (if (fboundp 'tool-bar-mode)
            (tool-bar-mode -1))                 ; hide toolbar
        (if (fboundp 'tooltip-mode)
            (tooltip-mode -1))
        (when (fboundp                          ; windmove
            'windmove-default-keybindings)
            (windmove-default-keybindings))
        (setq eval-expression-print-length nil  ; do not truncate output in the echo area
              message-log-max 10000             ; increase number of lines in *Messages*
              use-dialog-box nil)               ; disable usage of dialog box, and in echo area instead
    )))
(dolist
    (hook
     (list
      'term-exec-hook
      ))
  (add-hook hook #'redraw-display))             ; force redraw
(add-hook 'window-setup-hook
          #'(lambda ()
            (toggle-frame-fullscreen)           ; fullscreen
            (toggle-frame-maximized))           ; maximised
          t)
(when (daemonp)                                 ; when calling "emacsclient -c -n" under daemon
  (add-hook 'after-make-frame-functions
            #'(lambda (frame)
              (when (display-graphic-p frame)
                (toggle-frame-fullscreen)       ; fullscreen
                (toggle-frame-maximized)        ; maximised
                ))
            ))
(dolist
    (hook
     (list
      'emacs-startup-hook
      'tty-setup-hook
      ))
  (add-hook hook
            #'(lambda ()
              (progn
                (if (fboundp 'menu-bar-mode)
                    (menu-bar-mode -1))         ; hide menu bar
                ))))
; https://blog.d46.us/advanced-emacs-startup/
(add-hook 'emacs-startup-hook
          #'(lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(run-with-idle-timer 2 nil #'(lambda () (lo/set-gc))); https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/

; https://emacs.stackexchange.com/questions/32150/how-to-add-a-timestamp-to-each-entry-in-emacs-messages-buffer
(advice-add 'message :before                    ; add timestamp in *Messages* buffer
            #'(lambda (FORMAT-STRING &rest args)
                "Advice to run before `message' that prepends a timestamp to each message."
                (if message-log-max
                    (let ((deactivate-mark nil)
                          (inhibit-read-only t))
                      (with-current-buffer "*Messages*"
                        (goto-char (point-max))
                        (if (not (bolp))
                            (newline))
                        (insert (format-time-string "[%F %T.%3N %:z] ")))))
                ))

(unless (display-graphic-p) (mouse-wheel-mode 0))   ; disable 'mouse-wheel-mode' under character-based terminal
#+END_SRC

*** Folder

**** Default folder

#+BEGIN_SRC emacs-lisp
(setq default-directory
    (if (eq system-type 'windows-nt)
        my-win-default-directory                ; Win
    my-lin-default-directory                    ; Linux/Mac
    ))
#+END_SRC

**** Emacs backup folder

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `((".*" . ,backup-directory))
      auto-save-list-file-prefix backup-directory
      auto-save-file-name-transforms `((".*" ,backup-directory t)))
(setq make-backup-files t                       ; backup of a file the first time it is saved.
      backup-by-copying t                       ; don't clobber symlinks
      version-control t                         ; version numbers for backup files
      delete-old-versions t                     ; delete excess backup files silently
      kept-old-versions 5                       ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 15                      ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t                       ; auto-save every buffer that visits a file
      auto-save-timeout 10                      ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200                    ; number of keystrokes between auto-saves (default: 300)
      vc-make-backup-files t                    ; backup versioned files
      )
; ignore file backups @ http://stackoverflow.com/questions/482256/
(defvar my-backup-ignore-regexps (list "\\.vcf$" "\\.gpg$")
  "*List of filename regexps to not backup")
(defun my-backup-enable-p (name)
  "Filter certain file backups"
  (when (normal-backup-enable-predicate name)
    (let ((backup t))
      (mapc (lambda (re)
              (setq backup (and backup (not (string-match re name)))))
            my-backup-ignore-regexps)
      backup)))
(setq backup-enable-predicate 'my-backup-enable-p)
#+END_SRC

Note - the =.#foo= files are file locks, and =#foo#= files are cached for auto-save [[https://www.reddit.com/r/emacs/comments/65o3ik/comment/dgbxzdx/?utm_source=share&utm_medium=web2x&context=3][(info]])

**** Minibuffer backup

savehist - save the minibuffer histories

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :defer 0.5
  :config
  (setq-default savehist-additional-variables '(kill-ring search-ring regexp-search-ring extended-command-history)
                savehist-autosave-interval 60
                history-length 10000)
  (savehist-mode 1)
  )
#+END_SRC

**** Create missing parent directories

#+BEGIN_SRC emacs-lisp
(defun create-non-existent-directory ()
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
      (make-directory parent-directory t))))
(add-to-list 'find-file-not-found-functions #'create-non-existent-directory)
#+END_SRC

*** Buildin Mode Setting

**** Abbrev Mode

#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :defer 5
  :diminish abbrev-mode
  :straight (:type built-in)
  :custom (save-abbrevs 'silently)
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))
  )
#+END_SRC

**** Auto-compression                                              :EMACS:

Open compressed files on the fly

#+BEGIN_SRC emacs-lisp
(use-package jka-cmpr-hook
  :hook (window-setup . auto-compression-mode)
  :straight (:type built-in))
#+END_SRC

**** Case

#+BEGIN_SRC emacs-lisp
(cl-loop for fn in '(downcase-region            ; enable commands
                     upcase-region
                     erase-buffer)
        do (put fn 'disabled nil))
#+END_SRC

**** Comint

#+BEGIN_SRC emacs-lisp
(use-package comint
  :defer 2
  :straight (:type built-in)
  :config
  (add-hook 'comint-output-filter-functions
            'comint-watch-for-password-prompt)  ; hide password in shell
  (add-hook 'comint-mode-hook
            (function
             (lambda () (setq comint-scroll-show-maximum-output nil))
             )))
#+END_SRC

**** delsel.el                                                     :EMACS:

delete marked text on typing

#+BEGIN_SRC emacs-lisp
(use-package delsel
  :hook (window-setup . delete-selection-mode))
#+END_SRC

**** Dired                                                          :FILE:

#+BEGIN_SRC emacs-lisp
(use-package dired
  :defer t
  :disabled
  :straight (:type built-in)
  :config
  (load "dired-x")
  ;; http://emacswiki.org/emacs/DiredOmitMode
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files
        (concat dired-omit-files "\\|^\\..+$"))

  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))

  ;; http://ann77.emacser.com/Emacs/EmacsDiredExt.html
  ;; 排序功能
  (make-local-variable  'dired-sort-map)
  (setq dired-sort-map (make-sparse-keymap))
  (define-key dired-mode-map "s" dired-sort-map)
  (define-key dired-sort-map "s"
    '(lambda () "sort by Size"
       (interactive) (dired-sort-other (concat dired-listing-switches "S"))))
  (define-key dired-sort-map "x"
    '(lambda () "sort by eXtension"
       (interactive) (dired-sort-other (concat dired-listing-switches "X"))))
  (define-key dired-sort-map "t"
    '(lambda () "sort by Time"
       (interactive) (dired-sort-other (concat dired-listing-switches "t"))))
  (define-key dired-sort-map "n"
    '(lambda () "sort by Name"
       (interactive) (dired-sort-other (concat dired-listing-switches ""))))

  ;; http://www.emacswiki.org/emacs/DiredSortDirectoriesFirst
  (defun mydired-sort ()
    "Sort dired listings with directories first."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2) ;; beyond dir. header
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
      (set-buffer-modified-p nil)))
  (defadvice dired-readin
      (after dired-after-updating-hook first () activate)
    "Sort dired listings with directories first before adding marks."
    (mydired-sort))

  ;; single buffer
  (put 'dired-find-alternate-file 'disabled nil)
  ;; http://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer
  (define-key dired-mode-map (kbd "^")
    (lambda () (interactive) (find-alternate-file "..")))
  ;; http://ergoemacs.org/emacs/emacs_dired_tips.html
  (define-key dired-mode-map (kbd "<return>")
    'dired-find-alternate-file)

  ;; copy split windows
  ;; C-o / C-0 o to paste the original filename
  ;; https://appsmth.appspot.com/smth/subject/Emacs/94609
  (setq dired-dwim-target t)

  (setq dired-recursive-deletes 'top            ; recursive delection
        dired-recursive-copies 'always)         ; recursive copy

  (defadvice shell-command                      ; allow running multiple async commands simultaneously
      (after shell-in-new-buffer
             (command &optional output-buffer error-buffer))
    (when (get-buffer "*Async Shell Command*")
      (with-current-buffer "*Async Shell Command*"
        (rename-uniquely))))
  (ad-activate 'shell-command)
  )
#+END_SRC

**** Ediff                                                          :FILE:

Call =ediff= or =ediff3= in Emace for file comparisons

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :defer t
  :hook (ediff-before-setup . (lambda () (setq ediff-saved-window-configuration (current-window-configuration))))
  :custom
  ;; horizontal window split
  (ediff-split-window-function 'split-window-horizontally)
  (ediff-merge-split-window-function 'split-window-vertically)
  (ediff-window-setup-function 'ediff-setup-windows-plain)
  :init
  (let ((restore-window-configuration
         (lambda ()
           (set-window-configuration ediff-saved-window-configuration))))
    (add-hook 'ediff-quit-hook restore-window-configuration 'append)
    (add-hook 'ediff-suspend-hook restore-window-configuration 'append))
  )
#+END_SRC

**** GnuTLS

#+BEGIN_SRC emacs-lisp
(use-package gnutls
  :defer t
  :config
  (setq-default gnutls-verify-error t)          ; check tls/ssl
  (cond
   ((string-equal system-type "darwin")         ; Mac OS X
    (progn
      (add-to-list 'gnutls-trustfiles "/private/etc/ssl/cert.pem")
      )))
  )
#+END_SRC

**** Hideshow                                                    :CODEING:

Code folding

#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :diminish hs-minor-mode
  :hook ((prog-mode) . hs-minor-mode))
#+END_SRC

**** HL                                                            :EMACS:

Highlight the current line

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :hook (window-setup . global-hl-line-mode)
  :init
  (custom-set-faces
   '(hl-line ((nil (:background "gray22"))))))
#+END_SRC

**** Imenu

#+BEGIN_SRC emacs-lisp
(use-package imenu
  :defer 2
  :config
  (set-default 'imenu-auto-rescan t)            ; automatic buffer rescan
  )
#+END_SRC

**** Line Numbering

new line number mode since Emacs 26

#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :hook ((prog-mode org-mode text-mode) . display-line-numbers-mode)
  :config
  (setq display-line-numbers-width-start t)
  (set-face-foreground 'line-number "#5c5c5c")
  (set-face-background 'line-number-current-line "#000000")
  (set-face-foreground 'line-number-current-line "#ababab")
  )
#+END_SRC

**** Makefile                                                :PROGRAMMING:

build automation

#+BEGIN_SRC emacs-lisp
(use-package make-mode
  ;; built-in BSDmakefile mode
  :defer t
  :hook (makefile-bsdmake-mode . (lambda () (setq-local tab-width 4)))
  :mode (("\\Makefile\\'" . makefile-mode)
         ("\\.mk\\'"      . makefile-mode)))
#+END_SRC

**** Markdown                                            :MARKUP_LANGUAGE:

Markup language often for readme

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :custom
  (markdown-fontify-code-blocks-natively t)
  )
#+END_SRC

**** Narrowing

#+BEGIN_SRC emacs-lisp
(cl-loop for fn in '(narrow-to-defun            ; enable commands
                     narrow-to-page
                     narrow-to-region)
        do (put fn 'disabled nil))
#+END_SRC

**** Shell & Term

#+BEGIN_SRC emacs-lisp
(with-eval-after-load `shell (setq-default shell-dirtrackp nil)); disable global 'shell-dirtrack-mode'
#+END_SRC

***** term

#+BEGIN_SRC emacs-lisp
(use-package term
  :disabled
  :defer t
  :init
  (add-hook 'term-mode-hook
            #'(lambda ()
                "term mode hook"
                (yas-minor-mode -1)
                (setq bidi-paragraph-direction 'left-to-right
                      term-scroll-to-bottom-on-output t)
                (setq-local scroll-margin 0)
                ))
  )
#+END_SRC

***** multi-term

#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :disabled
  :bind ("C-c t m" . (lambda ()
                       "Start a new multi-term"
                       (interactive)
                       (multi-term)
                       (term-send-raw-string ". ~/.bash_profile\nclear\n")
                       ))
  :config
  (setq multi-term-program "/bin/bash"          ; bash
        multi-term-program-switches "-il"       ; FIXME - this switch does not work with any space characters in it. Set to interactive login shell, which will read "~/.bash_profile" and source the bashrc file
        multi-term-buffer-name "mterm"          ; buffer name
        term-buffer-maximum-size 0              ; keep all buffer
        multi-term-dedicated-close-back-to-open-buffer-p t
        )
  (setq-local scroll-margin 0)                  ; always make point visible at bottom of the window when auto-scrolling
  (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
  (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))
  (add-to-list 'term-bind-key-alist '("C-c t h" .
                                      (lambda ()
                                        "New terminal to the right"
                                        (interactive)
                                        (split-window-horizontally)
                                        (other-window 1)
                                        (multi-term)
                                        (term-send-raw-string ". ~/.bash_profile\nclear\n")
                                        )))
  (add-to-list 'term-bind-key-alist '("C-c t v" .
                                      (lambda ()
                                        "New terminal to the below"
                                        (interactive)
                                        (split-window-vertically)
                                        (other-window 1)
                                        (multi-term)
                                        (term-send-raw-string ". ~/.bash_profile\nclear\n")
                                        )))
  (add-to-list 'term-bind-key-alist '("C-c t x" .
                                      (lambda ()
                                        "Send C-x in term mode."
                                        (interactive)
                                        (term-send-raw-string "\C-x")
                                        )))
  (add-to-list 'term-bind-key-alist '("C-c t e" .
                                      (lambda ()
                                        "Send escape in term mode."
                                        (interactive)
                                        (term-send-raw-string "\e")
                                        )))
  )
#+END_SRC

**** saveplace                                                     :EMACS:

#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init (setq save-place-file (expand-file-name "saveplace" no-littering-var-directory))
  :hook (after-init . save-place-mode))
#+END_SRC

**** simple.el                                                     :EMACS:

#+BEGIN_SRC emacs-lisp
(use-package simple
  :diminish visual-line-mode
  :hook ((window-setup . visual-line-mode)      ; soft line warpping
         (window-setup . size-indication-mode)) ; show total buffer size
  :straight (:type built-in))
#+END_SRC

**** Tramp

=M-x tramp-cleanup-all-connections= - flush remote connections

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :defer t
  :init (autoload #'tramp-register-crypt-file-name-handler "tramp-crypt")
  :config
  (setq tramp-default-method "ssh"              ; faster than the default scp
        tramp-use-ssh-controlmaster-options nil)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (tramp-set-completion-function
   "ssh"
   '((tramp-parse-sconfig "~/.ssh/config")
     ))
  (add-to-list 'backup-directory-alist          ; local backup directory for remote files
               (cons tramp-file-name-regexp (expand-file-name backup-directory)))
  )
#+END_SRC

**** uniquify

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :defer 2
  :straight (:type built-in)
  :custom
  (uniquify-buffer-name-style 'post-forward)
  )
#+END_SRC

**** view-mode

Buffer readonly mode

#+BEGIN_SRC emacs-lisp
(use-package view
  :bind([remap read-only-mode] . view-mode))    ; C-x C-q
#+END_SRC

**** which-func

#+BEGIN_SRC emacs-lisp
(use-package which-func
  :hook ((prog-mode) . which-function-mode)
  :config
  (setq which-func-unknown "⊥")
  )
#+END_SRC

**** winner-mode                                                   :EMACS:

Undo Emacs window changes

#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer 2
  :config (winner-mode))
#+END_SRC

**** ZapUpToChar

#+BEGIN_SRC emacs-lisp
(use-package misc
  :commands zap-up-to-char
  :bind ([remap zap-to-char] . zap-up-to-char)  ; M-z
  :straight (:type built-in))
#+END_SRC

*** Style

**** Font

Emacs GUI font settings

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (add-hook
   'window-setup-hook
   #'(lambda ()
       (cond
        ((eq system-type 'windows-nt)           ; Win
         (set-face-attribute 'default nil :font "Consolas:antialias=natural" :height 100))
        ((eq system-type 'gnu/linux)            ; Linux
         (cond
          ((find-font (font-spec :name "Terminus"))
           (set-face-attribute 'default nil :font "Terminus" :height 120))
          ((find-font (font-spec :maker "misc"
                                 :family "fixed"
                                 :widthtype "normal"
                                 :pixels "14"
                                 :height "130"
                                 :horiz "75"
                                 :vert "75"
                                 ))             ; fallback to "7x14" bitmap
           ; 7x14 / -misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1
           (set-face-attribute 'default nil :font "7x14"))
          )
         (when (member "WenQuanYi Zen Hei Sharp" (font-family-list))
           (set-fontset-font "fontset-default"  ; 中文字体
                             'han '("WenQuanYi Zen Hei Sharp" . "unicode-bmp"))))
        ((eq system-type 'darwin)               ; macOS
         (set-face-attribute 'default nil :font "Monaco" :height 120))
        (t                                      ; default
         (when (member "Inconsolata" (font-family-list))
           (set-face-attribute 'default nil :font "Inconsolata" :height 120)))
        )
       )))

(when (daemonp)                                 ; for emacsclient -c
  (add-hook 'after-make-frame-functions
            #'(lambda (frame)
                (select-frame frame)
                (cond
                 ((eq system-type 'darwin)      ; macOS
                  (set-face-attribute 'default nil :font "Monaco" :height 120))
                 (t                             ; default
                  (when (member "Inconsolata" (font-family-list))
                    (set-face-attribute 'default nil :font "Inconsolata" :height 120)))
                 )
                )))
#+END_SRC

**** Theme

Spacemacs dark theme

#+BEGIN_SRC emacs-lisp
(add-hook
 'window-setup-hook
 #'(lambda ()
     (use-package spacemacs-common
       :straight spacemacs-theme
       :init
       (custom-set-variables
        '(spacemacs-theme-custom-colors
          '((border . "#4f4f4f")
            ))
        )
       :config
       (load-theme 'spacemacs-dark t)
       )

     (when (eq system-type 'darwin)             ; mac only
       (when (display-graphic-p)                ; gui only
         (let ((win-sys (window-system)))
           (when (eq win-sys 'ns)               ; emacs ns port
             (setq
              x-colors (ns-list-colors)         ; fix macports emacs-app port bug
              ns-use-thin-smoothing t
              )
             )))

       (when (daemonp)                          ; for emacsclient -c
         (add-hook 'after-make-frame-functions
                   #'(lambda (frame)
                       (select-frame frame)
                       (when (display-graphic-p frame)
                         (let ((win-sys (window-system)))
                           (when (eq win-sys 'ns)           ; emacs ns port
                             (setq
                              x-colors (ns-list-colors)     ; fix macports emacs-app port bug
                              ns-use-thin-smoothing t
                              )
                             ))))
                   ))
       )
     ))
#+END_SRC

**** Transparent

#+BEGIN_SRC emacs-lisp
(set-frame-parameter
    (selected-frame) 'alpha '(98 98))
#+END_SRC

** Development

#+BEGIN_SRC emacs-lisp
(defun modes/prog-mode ()
    "prog-mode hook"
    (setq
        compilation-ask-about-save nil          ; save before compiling
        compilation-always-kill t               ; always kill old compile processes before
                                                ; starting the new one
        compilation-scroll-output 'first-error  ; Automatically scroll to first error
      )
    (goto-address-prog-mode)                    ; highlight URL
    (push '(">=" . ?≥) prettify-symbols-alist)  ; prettify symbols
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '("delta" . ?Δ) prettify-symbols-alist)
    (prettify-symbols-mode)
    (local-set-key (kbd "RET") 'newline-and-indent)

    ; (defconst intellij-java-style               ; coding style
    ;   '((c-basic-offset . 4)
    ;     (c-comment-only-line-offset . (0 . 0))
    ;     (c-offsets-alist
    ;      .
    ;      ((inline-open . 0)
    ;       (topmost-intro-cont    . +)
    ;       (statement-block-intro . +)
    ;       (knr-argdecl-intro     . +)
    ;       (substatement-open     . +)
    ;       (substatement-label    . +)
    ;       (case-label            . +)
    ;       (label                 . +)
    ;       (statement-case-open   . +)
    ;       (statement-cont        . ++)
    ;       (arglist-intro         . 0)
    ;       (arglist-cont-nonempty . ++)
    ;       (arglist-close         . --)
    ;       (inexpr-class          . 0)
    ;       (access-label          . 0)
    ;       (inher-intro           . ++)
    ;       (inher-cont            . ++)
    ;       (brace-list-intro      . +)
    ;       (func-decl-cont        . ++))))
    ;   "Elasticsearch's Intellij Java Programming Style")
    ; (c-add-style "intellij" intellij-java-style)
    )
(add-hook 'prog-mode-hook 'modes/prog-mode)
(add-hook 'before-save-hook                     ; remove trailing whitespace
    'delete-trailing-whitespace)

(use-package quickrun :commands (quickrun quickrun-region quickrun-shell))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package editorconfig :diminish editorconfig-mode :hook (prog-mode . editorconfig-mode-apply))
#+END_SRC

*** Git

**** git-gutter

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :diminish git-gutter-mode
  :hook ((web-mode org-mode yaml-mode groovy-mode puppet-mode enh-ruby-mode python-mode) . git-gutter-mode)
  :config
  (custom-set-variables                         ; backend
   '(git-gutter:handled-backends
     (quote (git svn))))
  )
#+END_SRC

**** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status))
  :config
  (setq magit-completing-read-function
        (quote magit-builtin-completing-read)
        magit-diff-refine-hunk t                ; highlight changes
        )

  ;; full screen magit-status
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  )

(use-package autorevert
  :defer t
  :diminish auto-revert-mode
  )
#+END_SRC

*** Web

web-mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode ("\\.html\\'" . web-mode)
  :custom
  (web-mode-enable-css-colorization t)
  :config
  (with-eval-after-load `company-mode
    (add-to-list (make-local-variable 'company-backends)
               '(company-css company-nxml))))
#+END_SRC

*** Scripting

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook                      ; make shell script executable on save
    'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

**** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :diminish eldoc-mode
  :hook ((eval-expression-minibuffer-setup prog-mode) . eldoc-mode) ; show eldoc for 'Eval:'
  :init
  (global-eldoc-mode -1)                                            ; ignore eldoc globally
  :config
  (setq eldoc-idle-delay 0.2))
#+END_SRC

**** Groovy

#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :mode "\\.groovy\\'\\|\\.gradle\\'")
#+END_SRC

*** Infrastructure

**** ansiable

#+BEGIN_SRC emacs-lisp
(use-package ansible
  :diminish ansible
  :hook (yaml-mode . ansible))
#+END_SRC

**** es-mode

#+BEGIN_SRC emacs-lisp
(use-package es-mode
  :defer t
  :config
  (setq es-always-pretty-print t)
  )
#+END_SRC

**** js2

#+BEGIN_SRC emacs-lisp
(use-package jinja2-mode :mode ("\\.j2" . jinja2-mode))
#+END_SRC

**** json                                                             :LSP:

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode ("\\.json.erb\\'" . json-mode))
#+END_SRC

**** puppet-mode

#+BEGIN_SRC emacs-lisp
(use-package puppet-mode :mode ("\\.pp$" . puppet-mode))
#+END_SRC

**** restclient

Explore and test HTTP REST webservices

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode ("\\.\\(http\\|https\\|rest\\)$" . restclient-mode)
  :config
  (defun restclient-ignore-ssl ()
    "Ignore SSL verification. Identical to 'curl -k'"
    (interactive)
    (custom-reevaluate-setting 'gnutls-verify-error)
    (make-local-variable 'gnutls-verify-error)
    (setq gnutls-verify-error nil)
    )
  )
#+END_SRC

**** yaml

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.ya?ml$"       . yaml-mode)
         ("\\.ya?ml.erb\\'" . yaml-mode)))
#+END_SRC

*** DB

#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))         ; no line wrap when working on DB
#+END_SRC

*** C/C++

#+BEGIN_SRC emacs-lisp
;(defun modes/c-mode ()
;  "c/c++ mode hook"
;  (progn
;    (setq gdb-many-windows t)                   ; gdb

;    (local-set-key (kbd "C-c -")                ; fold tag
;                   'senator-fold-tag)
;    (local-set-key (kbd "C-c +")
;                   'senator-unfold-tag)

;    (add-to-list (make-local-variable 'company-backends)
;                 '(company-gtags company-semantic))
;    ))

;(dolist
;    (hook
;     (list
;      'c-mode-hook
;      'c++-mode-hook
;      ))
;  (add-hook hook #'modes/c-mode))
#+END_SRC

*** Programming / Scripting

**** Shared Functions

Helper function to create a Python virtualenv used for LSP servers

#+BEGIN_SRC emacs-lisp
;(dolist
;    (mode-hook
;     '(python-mode-hook))
;  (add-hook mode-hook
;    #'(lambda ()
;        (defun create-virtualenv (virtualenv-folder setup-cmd python-version requirement-file &optional version install-packages)
;          "Create a python pip based virtualenv and install packages based on the supplied requirement file"
;          (use-package pyvenv
;            :commands pyvenv-activate
;            :init
;            (defvar python-virtualenv-directory (concat backup-directory virtualenv-folder))
;            (if (not (file-exists-p python-virtualenv-directory))
;                (progn
;                  (make-directory python-virtualenv-directory t)
;                  (shell-command
;                   (concat
;                    "bash" " "
;                    (expand-file-name (concat user-emacs-directory setup-cmd)) " "
;                    (expand-file-name (concat python-virtualenv-directory)) " "
;                    python-version " "
;                    (expand-file-name (concat user-emacs-directory requirement-file))
;                    (when version (concat " " version))
;                    (when install-packages (concat " " install-packages))
;                    ))
;                  ))
;            (pyvenv-activate python-virtualenv-directory)
;            (pyvenv-tracking-mode t)
;            ))
;        )))
#+END_SRC

**** LSP

Language Server Protocol

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp lsp-deferred
  :defer t
  :hook ((lsp-mode . (lambda ()
                       (let ((lsp-keymap-prefix "C-c l"))
                         #'lsp-enable-which-key-integration)))
         (lsp-managed-mode . lsp-modeline-diagnostics-mode)
         (dockerfile-mode . lsp-deferred)
         (enh-ruby-mode . lsp-deferred)
         (go-mode . lsp-deferred)
         (json-mode . lsp-deferred)
         (python-mode . lsp-deferred)
         (sh-mode . lsp-deferred)
         (terraform-mode . lsp-deferred)
         (typescript-mode . lsp-deferred))
  :custom
  (lsp-auto-guess-root t)
  (lsp-client-packages '(lsp-bash
                         lsp-dockerfile
                         lsp-go
                         lsp-javascript
                         lsp-json
                         lsp-pylsp
                         lsp-solargraph))
  (lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))     ; no more .log/tsserver.log files on project
  (lsp-completion-provider :none)               ; handled by company already
  (lsp-idle-delay 0.2)
  (lsp-log-io nil)
  (lsp-prefer-flymake nil)
  (lsp-response-timeout 3)
  :config
  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)

  (with-eval-after-load `lsp-mode
    (run-with-idle-timer
     5 nil #'(lambda ()
               (lo/set-gc lo/gc-cons-lsp)       ; performance tuning @ https://emacs-lsp.github.io/lsp-mode/page/performance/
               (setq read-process-output-max (* 1024 1024 4)))))

  (when (derived-mode-p 'enh-ruby-mode)
    (with-eval-after-load `lsp-solargraph
      ; load libraries
      (add-to-list 'lsp-solargraph-library-directories (expand-file-name "~/.asdf/installs/ruby/"))
      (add-to-list 'lsp-solargraph-library-directories
                   (concat (expand-file-name (shell-command-to-string "( git rev-parse --show-toplevel 2> /dev/null || echo $(pwd) ) | tr -d $'\n'")) "/vendor/bundle/"))
      ))

  (when (derived-mode-p 'python-mode)
    (with-eval-after-load `lsp-pylsp
      ; config lsp-pylsp
      (setq lsp-pylsp-plugins-yapf-enabled t)
      ; load libraries
      (add-to-list 'lsp-clients-pylsp-library-directories (expand-file-name "~/.asdf/installs/python/"))
      (add-to-list 'lsp-clients-pylsp-library-directories
                   (concat (expand-file-name "~/.asdf/installs/python/") (shell-command-to-string (concat "grep python " (expand-file-name "~/.tool-versions") " 2>/dev/null | cut -d' ' -f2 | tr -d $'\n'")) "/"))
      ))

  ;; Terraform / HashiCorp - https://github.com/hashicorp/terraform-ls
  (when (derived-mode-p 'terraform-mode)
    (when (executable-find (expand-file-name "~/.config/local/bin/terraform-ls"))
      (lsp-register-client
       (make-lsp-client :new-connection (lsp-stdio-connection '("~/.config/local/bin/terraform-ls" "serve"))
                        :major-modes '(terraform-mode)
                        :priority -1
                        :server-id 'terraform-ls))))
  )

(use-package lsp-diagnostics :after lsp-mode :straight lsp-mode)
(use-package lsp-headerline :after lsp-mode :straight lsp-mode)
(use-package lsp-lens
  :after lsp-mode
  :straight lsp-mode
  :custom
  (lsp-lens-debounce-interval 0.5)
  (lsp-lens-enable t))
(use-package lsp-modeline
  :after lsp-mode
  :straight lsp-mode
  :custom
  (lsp-modeline-code-actions-segments	'(count icon name)))

(use-package lsp-ui
  :after lsp-mode yasnippet
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references]  . lsp-ui-peek-find-references))
  :commands lsp-ui-mode
  :hook ((lsp-mode . lsp-ui-mode)
         (lsp-ui-mode . yas-minor-mode))
  :custom
  (lsp-ui-doc-delay 1.5)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-position 'bottom)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-flycheck-list-position 'right)
  )

(use-package lsp-ui-flycheck :after lsp-ui :defer 2 :straight lsp-ui)
(use-package lsp-ui-imenu :after lsp-ui :defer 2 :straight lsp-ui)

(use-package helm-lsp
  :after lsp-mode
  :bind (:map lsp-mode-map
              ([remap xref-find-apropos] . helm-lsp-workspace-symbol))
  :commands helm-lsp-workspace-symbol
  :config
  (defun helm-lsp-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'helm-lsp-workspace-symbol)))

  (defun helm-lsp-global-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'helm-lsp-global-workspace-symbol)))
  )

(use-package lsp-treemacs
  :after lsp-mode
  :commands lsp-treemacs-errors-list
  :custom
  (lsp-treemacs-sync-mode t)
  )

(use-package dap-mode :after lsp-mode lsp-modeline :commands dap-ui-mode)
#+END_SRC

**** Bash                                                            :LSP:

#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :mode (("\\.*bashrc$"      . sh-mode)
         ("\\.*bash_profile" . sh-mode))
  :custom
  (sh-indent-comment t)
  :config
  ; Fixing OSX/node "Operation not permitted" - add 'node' under "Security & Privacy"
  ;; -> http://osxdaily.com/2018/10/09/fix-operation-not-permitted-terminal-error-macos/

  (run-with-idle-timer
   0.1 nil
   #'(lambda ()
       (when (derived-mode-p 'sh-mode)
           (when (eq 1 (point-max))                ; new file template
             (insert
              "#!/usr/bin/env bash\n"
              "\n"
              "set -Eeuxo pipefail\n"
              "\n"
              "err() {\n"
              "  echo \"errexit with status [$?] at line $(caller)\" >&2\n"
              "  awk 'NR>L-5 && NR<L+3 { printf \"%-5d%3s%s\\n\",NR,(NR==L?\">> \":\"\"),$0 }' L=$1 $0\n"
              "}\n"
              "trap 'err $LINENO' ERR\n"
              "\n\n\n\n"
              "main() {\n"
              "  return\n"
              "}\n"
              "main \"$@\"\n"
              ))
         )))
  )
#+END_SRC

**** Dockerfile                                                      :LSP:

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode (("\\.dockerfile\\'" . dockerfile-mode)
         ("/Dockerfile\\(?:\\.[^/\\]*\\)?\\'" . dockerfile-mode))
  )
#+END_SRC

**** Go                                                              :LSP:

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :if (executable-find "go")
  :hook
  ((go-mode . (lambda ()
                (when (executable-find "goimports") ; use goimports instead of gofmt
                  (setq gofmt-command "goimports"))

                (unless (file-exists-p (concat (expand-file-name (shell-command-to-string "( git rev-parse --show-toplevel 2> /dev/null || echo $(pwd) ) | tr -d $'\n'")) "/go.mod"))
                  (setenv "GO111MODULE" "off"))     ; turn off for one-off file

                ;; for lsp
                (when (not (executable-find (expand-file-name "~/.asdf/shims/ims/gopls")))
                  (shell-command "go install golang.org/x/tools/gopls@latest"))
                (when (not (executable-find (expand-file-name "~/.asdf/shims/goimports")))
                  (shell-command "go install golang.org/x/tools/cmd/goimports@latest"))))
   (before-save . gofmt-before-save)))

(use-package gotest
  :after go-mode
  :bind (:map go-mode-map
         ("C-x x f" . go-test-current-file)
         ("C-x x t" . go-test-current-test)
         ("C-x x x" . go-run))
  :commands (go-test-current-file go-test-current-test go-run))
#+END_SRC

**** Java

#+BEGIN_SRC emacs-lisp
;(defun modes/java-mode ()
;  "java mode hook"
;  (progn
;    (c-set-style "intellij" t)                  ; code style
;    (setq c-basic-offset 2)
;
;    (use-package lsp-java :defer t)             ; Java LSP
;                                                ; check on github on how to install the server
;    ; set workspace
;    (setq lsp-java-workspace-dir (expand-file-name (concat backup-directory "jdt-workspace/"))
;          lsp-java-workspace-cache-dir (expand-file-name (concat lsp-java-workspace-dir ".cache/"))
;          lsp-java--workspace-folders
;            (list
;             ((lambda ()
;                (let ((root_dir (locate-dominating-file (expand-file-name (file-name-directory buffer-file-name)) "pom.xml")))
;                  (if root_dir
;                      (expand-file-name root_dir)
;                    (expand-file-name (file-name-directory buffer-file-name))))
;                ))
;             ))
;
;    (setq lsp-inhibit-message t
;          lsp-ui-sideline-update-mode 'point)
;
;    (lsp-java-enable)                           ; make this one the last step
;    ))
;(add-hook 'java-mode-hook #'modes/java-mode t)
#+END_SRC

**** JavaScript

#+BEGIN_SRC emacs-lisp
;(use-package js2-mode
;  :interpreter ("node" . js2-mode)
;  :mode (("\\.js\\'" . js2-mode))
;  :config
;  (add-hook 'js2-mode-hook
;    #'(lambda ()
;        (setq js2-basic-offset 2
;              js2-bounce-indent-p t
;              js2-strict-missing-semi-warning nil
;              js2-concat-multiline-strings nil
;              js2-include-node-externs t
;              js2-skip-preprocessor-directives t
;              js2-strict-inconsistent-return-warning nil)
;
;        (create-virtualenv "venv-lsp-js/"       ; js lsp venv folder
;                           "bin/venv-nodejs-npm.sh"
;                           "python3"
;                           "bin/nodejs-pip-requirements.txt"
;                           "12.7.0"
;                           "typescript-language-server,typescript")
;
;        (require 'lsp-clients)
;        (lsp)
;        ) t)
;  )
#+END_SRC

**** Powershell

#+BEGIN_SRC emacs-lisp
;(use-package powershell
;  :config
;  (use-package lsp-pwsh
;    :after lsp-mode
;    :if (executable-find "pwsh")
;    :init
;    (setq
;     lsp-pwsh-ext-path (expand-file-name "lsp-pwsh/.cache/lsp/pwsh" no-littering-var-directory)
;     lsp-pwsh-dir (expand-file-name "PowerShellEditorServices" lsp-pwsh-ext-path)
;     lsp-pwsh-exe (executable-find "pwsh"))
;    :config
;    (lsp)
;    )
;  )
#+END_SRC

**** Python                                                          :LSP:

#+BEGIN_SRC emacs-lisp
(use-package python
  :if (executable-find "python3")
  :interpreter ("python" . python-mode)
  :mode ("\\.wsgi$" . python-mode)
  :custom
  (python-indent-guess-indent-offset t)
  (python-indent-guess-indent-offset-verbose nil)
  :config
  (setenv "PYTHONPATH" (shell-command-to-string "$SHELL --login -c 'echo -n $PYTHONPATH'"))

  (defvar pylsp-venv-directory (concat backup-directory "venv-lsp-python3/"))
  (unless (file-exists-p pylsp-venv-directory)
    (make-directory pylsp-venv-directory t))
  (unless (file-exists-p (concat pylsp-venv-directory "pylintrc"))
    (shell-command
     (concat
      "pylint --generate-rcfile > "
      (concat pylsp-venv-directory "pylintrc")
      )))
  (setq flycheck-pylintrc (concat pylsp-venv-directory "pylintrc"))

  ; use dockerised jupyter via C-c C-p
  (setq python-shell-interpreter "jupyter-console"
        python-shell-interpreter-args "--simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter")

  (when (eq 1 (point-max))                ; new file template
    (insert
     "#!/usr/bin/env python3\n"
     "\n\n"
     "def main():\n"
     "    pass\n"
     "\n\n"
     "if __name__ == \"__main__\":\n"
     "    main()\n"
     ))

  ;; from https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/python/funcs.el
  (defun python-remove-unused-imports ()
    "Use Autoflake to remove unused function
autoflake --remove-all-unused-imports -i unused_imports.py"
    (interactive)
    (if (executable-find "autoflake")
        (progn
          (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                 (shell-quote-argument (buffer-file-name))))
          (revert-buffer t t t))
      (message "Error: Cannot find autoflake executable.")))
  (local-set-key (kbd "A-M-f") #'(lambda ()
                                   (interactive)
                                   (lsp-format-buffer)                  ; built-in lsp-mode formatting
                                   (save-buffer)                        ; work on file only, and need to save the file first
                                   (python-remove-unused-imports))      ; remove unused imports via external cmd
                 )

  ;; from https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/python/funcs.el
  (defun python-toggle-breakpoint ()      ; toggle python breakpoint
    "Add a break point, highlight it."
    (interactive)
    (let ((trace (cond ((executable-find "wdb") "import wdb; wdb.set_trace()")
                       ((executable-find "ipdb") "import ipdb; ipdb.set_trace()")
                       ((executable-find "pudb") "import pudb; pudb.set_trace()")
                       ((executable-find "ipdb3") "import ipdb; ipdb.set_trace()")
                       ((executable-find "pudb3") "import pudb; pudb.set_trace()")
                       (t "import pdb; pdb.set_trace()")))
          (line (thing-at-point 'line)))
      (if (and line (string-match trace line))
          (kill-whole-line)
        (progn
          (back-to-indentation)
          (insert trace)
          (insert "\n")
          (python-indent-line)))))
  (local-set-key (kbd "<f9>") #'python-toggle-breakpoint) ; insert breakpoint
  )

(use-package dap-python :after python-mode dap-mode :defer 2 :straight dap-mode)   ; lsp debugger
#+END_SRC

**** Ruby                                                            :LSP:

#+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode
  :mode
  (("\\.rb\\'"       . enh-ruby-mode)
   ("\\.rake\\'"     . enh-ruby-mode)
   ("Rakefile\\'"    . enh-ruby-mode)
   ("\\.gemspec\\'"  . enh-ruby-mode)
   ("\\.ru\\'"       . enh-ruby-mode)
   ("Gemfile\\'"     . enh-ruby-mode)
   ("Cheffile\\'"    . enh-ruby-mode)
   ("Vagrantfile\\'" . enh-ruby-mode))
  :custom
  (enh-ruby-add-encoding-comment-on-save nil)
  (rspec-compilation-buffer-name "*rspec-compilation*")
  (rspec-use-opts-file-when-available nil)
  (rspec-use-rake-when-possible nil)
  (ruby-insert-encoding-magic-comment nil)
  :init
  (setenv "RUBYOPT" "--jit")
  :config
  (add-to-list 'exec-path
               (concat (expand-file-name "~/.asdf/installs/ruby/") (shell-command-to-string (concat "grep ruby " (expand-file-name "~/.tool-versions") " 2>/dev/null | cut -d' ' -f2 | tr -d $'\n'" )) "/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "~/.asdf/installs/ruby/") (shell-command-to-string (concat "grep ruby " (expand-file-name "~/.tool-versions") " 2>/dev/null | cut -d' ' -f2 | tr -d $'\n'" )) "/bin"))
  )

(use-package inf-ruby
  :after enh-ruby-mode
  :hook (compilation-filter . inf-ruby-auto-enter)
  )

(use-package rspec-mode
  :after enh-ruby-mode
  :diminish rspec-mode
  :hook (enh-ruby-mode . rspec-mode)
  )
#+END_SRC

**** Terraform                                                       :LSP:

#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :hook (terraform-mode . company-mode)
  :mode "\\.tf\\(vars\\)?\\'"
  :custom
  (terraform-indent-level 2)
  )

  (use-package terraform-doc :after terraform-mode)
  (use-package company-terraform :after terraform-mode)
#+END_SRC

**** TypeScript                                                      :LSP:

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :interpreter "node"
  :mode ("\\.tsx\\'" . typescript-mode))
#+END_SRC

** Mode Setting

*** avy

Char-based jumping

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind ([remap goto-char] . avy-goto-char-2)   ; M-g c
  :commands avy-goto-char-2)
#+END_SRC

*** bm                                                           :BOOKMARK:

Visible bookmarks

#+BEGIN_SRC emacs-lisp
(use-package bm
  :defer t
  :init
  (setq bm-restore-repository-on-load t)        ; restore on load
  :config
  (setq bm-cycle-all-buffers t)                 ; cycle through bookmarks in all open buffers
  (setq-default bm-buffer-persistence t)        ; save/load/restore bookmarks
  (add-hook' after-init-hook #'bm-repository-load)
  (add-hook 'find-file-hook #'bm-buffer-restore)
  (add-hook 'kill-buffer-hook #'bm-buffer-save)
  (add-hook 'kill-emacs-hook #'(lambda nil
                                 (bm-buffer-save-all)
                                 (bm-repository-save)))
  (add-hook 'after-save-hook #'bm-buffer-save)
  (add-hook 'find-file-hook  #'bm-buffer-restore)
  (add-hook 'after-revert-hook #'bm-buffer-restore)
  )
#+END_SRC

*** company                                                          :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package company
  :bind (([remap hippie-expand] . company-complete)
         :map company-mode-map
         ([remap indent-for-tab-command] . company-indent-or-complete-common))
  :diminish company-mode
  :hook ((prog-mode-delay text-mode-delay) . company-mode)
  :custom
  (company-begin-commands
   (quote
    (self-insert-command)                       ; start autocompletion only after typing
    ))
  (company-dabbrev-downcase nil)                ; do not change case in dabbrev
  (company-dabbrev-ignore-case t)
  (company-dabbrev-other-buffers t)
  (company-global-modes
   (quote
    (not eshell-mode)
    ))
  (company-idle-delay 0.07)                     ; delay before autocompletion popup shows
  (company-minimum-prefix-length 2)
  (company-require-match 'never)
  (company-selection-wrap-around t)             ; loop over candidates
  (company-show-numbers t)                      ; show number
  (company-transformers
   (quote
    (company-sort-by-occurrence)
    ))
  (company-tooltip-align-annotations t)
  (company-tooltip-flip-when-above   t)         ; flip the popup menu when near the bottom of windows
  (company-tooltip-limit 10)                    ; popup window size
  (company-backends                             ; default backends
   (quote
    ((company-capf
      company-yasnippet)
     (company-dabbrev-code
      company-ispell)
     (company-files                             ; files & directory
      company-keywords)                         ; keywords
     (company-abbrev
      company-dabbrev)
     )))
  (company-frontends
   (quote
    (company-pseudo-tooltip-frontend
     company-echo-metadata-frontend)
    )))

(use-package company-tng
  :after company
  :custom (company-selection-default nil)
  :straight company-mode
  :config (company-tng-mode))

(use-package company-tabnine
  :after company
  :commands company-tabnine
  :init
  (make-local-variable 'company-backends)
  (setq company-backends (delete '(company-capf company-yasnippet) company-backends))
  (add-to-list 'company-backends '(:separate company-tabnine company-capf :with company-yasnippet))
  ;; dynamicly create TabNine.toml file
  ;; to enable sem for each language by typing "TabNine::sem" once opened the mode
  (when (eq system-type 'darwin)
    (defvar tabnine-directory (expand-file-name "~/Library/Preferences/TabNine/"))
    (if (not (file-exists-p tabnine-directory))
        (make-directory tabnine-directory t))
    (setq tabnine-toml-file (expand-file-name "TabNine.toml" tabnine-directory))
    )
  (if (not (file-exists-p tabnine-toml-file))
      (write-region
       (concat
        "[language.bash]\n"
        "command = \"bash-language-server\"\n"
        "args = [\"start\"]\n"
        "[language.dockerfile]\n"
        "command = \"docker-langserver\"\n"
        "args = [\"--stdio\"]\n"
        "[language.go]\n"
        "command = \"gopls\"\n"
        "args = [\"serve\"]\n"
        "synchronous_timeout_ms = 100\n"
        "[language.javascript]\n"
        "command = \"typescript-language-server\"\n"
        "args = [\"--stdio\"]\n"
        "always_prefer = false\n"
        "[language.python]\n"
        "command = \"pylsp\"\n"
        "synchronous_timeout_ms = 100\n"
        "[language.ruby]\n"
        "command = \"solargraph\"\n"
        "args = [\"stdio\"]\n"
        "[language.typescript]\n"
        "command = \"typescript-language-server\"\n"
        "args = [\"--tsserver-path\", \"tsserver\", \"--stdio\"]\n"
        ) nil tabnine-toml-file)
    )
  :config
  (setq company-tabnine-max-num-results 3)
;  ;; https://emacs-china.org/t/tabnine/9988/50
;  (defadvice company-echo-show (around disable-tabnine-upgrade-message activate)
;    (let ((company-message-func (ad-get-arg 0)))
;      (when (and company-message-func
;                 (stringp (funcall company-message-func)))
;        (unless (string-match "The free version of TabNine only indexes up to" (funcall company-message-func))
;          ad-do-it))))
  )
#+END_SRC

*** drag-stuff                                                       :EDIT:

moving word/line/region around

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :diminish drag-stuff-mode
  :hook ((prog-mode org-mode text-mode) . drag-stuff-mode)
  :config
  (setq drag-stuff-modifier 'alt)               ; alt-up/down/left/rigth key bindings
  (drag-stuff-define-keys)
  )
#+END_SRC

*** dumb-jump                                                      :CODING:

simple implementation of jumping to definition/source

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :defer t
  :diminish dumb-jump-mode
  :hook (prog-mode . (lambda () (add-hook 'xref-backend-functions #'dumb-jump-xref-activate t)))
  :custom
  (dumb-jump-prefer-searcher 'rg))
#+END_SRC

*** erc                                                               :IRC:

#+BEGIN_SRC emacs-lisp
(autoload 'define-erc-response-handler "erc-backend" nil t)
(with-eval-after-load `erc
  (progn
    (setq erc-server  "irc.freenode.net"        ; default to freenode.net
          erc-port    "6697"
          erc-nick my-erc-nick
          erc-user-full-name my-erc-user-full-name
          erc-email-userid my-erc-email-userid
          erc-hide-list                         ; hide unwanted messages
          '("JOIN" "PART" "QUIT")
          erc-interpret-mirc-color t            ; color highlighting
          erc-rename-buffers t                  ; Rename buffers to the current network name instead of SERVER:PORT
          erc-server-coding-system              ; always utf-8
          '(utf-8 . utf-8)
          erc-log-mode t                        ; enable logging
          erc-generate-log-file-name-function
          (quote erc-generate-log-file-name-with-date)
          erc-hide-timestamps t                 ; hide logging timestamp when chatting
          erc-log-channels-directory            ; directory
          (concat backup-directory "erc.logs/")
          erc-log-insert-log-on-open nil        ; ignore previous messages
          erc-log-file-coding-system 'utf-8-unix
          erc-button-url-regexp                 ; Button URL
            "\\([-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]+\\.\\)+[-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]*[-a-zA-Z0-9\\/]"
          erc-prompt (lambda () (concat "[" (buffer-name) "]"))
          erc-auto-discard-away t               ; autoaway
          erc-autoaway-idle-seconds 600
          erc-autoaway-use-emacs-idle t
          erc-query-display 'buffer             ; open query in the current window
          )
    (erc-log-mode)
    (erc-truncate-mode +1)                      ; truncate long irc buffers
    (require 'erc-sasl)                         ; sasl
    (add-to-list 'erc-sasl-server-regexp-list "irc\\.freenode\\.net")

    ;; for erc-sasl
    (defun erc-login ()
      "Perform user authentication at the IRC server."
      (erc-log (format "login: nick: %s, user: %s %s %s :%s"
                       (erc-current-nick)
                       (user-login-name)
                       (or erc-system-name (system-name))
                       erc-session-server
                       erc-session-user-full-name))
      (if erc-session-password
          (erc-server-send (format "PASS %s" erc-session-password))
        (message "Logging in without password"))
      (when (and (featurep 'erc-sasl) (erc-sasl-use-sasl-p))
        (erc-server-send "CAP REQ :sasl"))
      (erc-server-send (format "NICK %s" (erc-current-nick)))
      (erc-server-send
       (format "USER %s %s %s :%s"
               (if erc-anonymous-login erc-email-userid (user-login-name))
               "0" "*"
               erc-session-user-full-name))
      (erc-update-mode-line))
    ))
#+END_SRC

*** evil-nerd-commenter                                              :EDIT:

Comment code block

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :bind ([remap comment-dwim] . evilnc-comment-or-uncomment-lines)  ; M-;
  :config (evilnc-default-hotkeys t t))         ; disable default key bindings
#+END_SRC

*** elfeed                                                       :RSS_FEED:

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :bind ("C-x w" . elfeed)
  :init (setf url-queue-timeout 30)
  :config
  (setq my-elfeed-timer                         ; 1hr update timer
        (run-at-time t (* 60 60) #'elfeed-update)
        elfeed-feeds
        '(("http://www.reddit.com/r/devops/.rss" devops reddit)
          ("http://feeds.dzone.com/devops" devops dzone)
          ("https://www.infoq.com/feed/devops/news" devops infoq)
          ("http://www.reddit.com/r/emacs/.rss" emacs reddit)
          )
        )
  )
#+END_SRC

*** expand-region                                                    :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region)
  :commands er/expand-region)
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :hook (prog-mode-delay . flycheck-mode)
  :init
  (custom-set-faces
   '(flycheck-error ((nil (:background "red"))))
   '(flycheck-warning ((nil (:background "yellow")))))
  :config
  (setq flycheck-check-syntax-automatically '(new-line idle-change save)
        flycheck-idle-change-delay (if flycheck-current-errors 0.5 15.0)
        flycheck-buffer-switch-check-intermediate-buffers t)
  (flymake-mode -1)                             ; disable flymake
  )
#+END_SRC

*** flyspell

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :diminish flyspell-mode
  :hook ((text-mode-delay . flyspell-mode)
         (prog-mode-delay . flyspell-prog-mode))
  :custom
  (flyspell-issue-message-flag nil)
  (flyspell-issue-welcome-flag nil)
  (ispell-list-command "--list")
  (ispell-program-name "aspell")
  (ispell-extra-args '("--sug-mode=ultra" "--run-together" "--run-together-limit=8"))
  :config
  (when (eq system-type 'darwin)                ; mac only settings
    (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
    (define-key flyspell-mouse-map [mouse-3] #'undefined)
    )
  )

(use-package flyspell-lazy
  :after flyspell
  :hook (flyspell-mode . flyspell-lazy-mode))

(use-package flyspell-correct
  :after flyspell
  :defer t)                                     ; C-u/C-u C-u/C-u C-u C-u M-x flyspell-correct-wrapper

(use-package flyspell-correct-helm
  :after flyspell-correct)
#+END_SRC

*** indent-guide                                                     :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :diminish indent-guide-mode
  :hook ((prog-mode org-mode) . indent-guide-mode)
  :custom
  (indent-guide-char "┊")
  (indent-guide-delay 0.3)
  :config (set-face-foreground 'indent-guide-face "lightslategrey"))
#+END_SRC

*** keycast                                                            :UI:

Show the key pressed on the modeline

#+BEGIN_SRC emacs-lisp
(use-package keycast
  :defer 2
  :init
  (custom-set-faces
   '(keycast-key ((nil (:height 1 :background "gray30" :foreground "gray70")))))
  :custom
  (keycast-insert-after 'mode-line-misc-info)
  (keycast-remove-tail-elements nil)
  (keycast-separator-width 2)
  (mode-line-keycast-format "%s%k%c%r%s")
  :config
  (keycast-mode)
  )
#+END_SRC

*** meow                                                             :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package meow
  :config
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore))

  (setq meow-expand-hint-remove-delay 5
        meow-keypad-describe-delay 3
        meow-use-cursor-position-hack t
        meow-use-enhanced-selection-effect t)

  (meow-setup-line-number)
  (meow-global-mode 1))
#+END_SRC

*** mwim                                                             :EDIT:

move where I mean

#+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind (("C-a" . mwim-beginning-of-code-or-line-or-comment)
         ("C-e" . mwim-end-of-code-or-line))
  :commands (mwim-beginning-of-code-or-line-or-comment mwim-end-of-code-or-line))
#+END_SRC

*** Treemacs                                                         :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :bind (("M-0" . treemacs-select-window)
         ("C-c p t 1" . treemacs-delete-other-windows)
         ("C-c p t t" . treemacs)
         ("C-c p t B" . treemacs-bookmark)
         ("C-c p t C-t" . treemacs-find-file)
         ("C-c p t M-t" . treemacs-find-tag))
  :init (defvar treemacs-no-load-time-warnings t))

(use-package treemacs-magit
  :after treemacs magit
  :defer t)

(use-package treemacs-projectile
  :after treemacs projectile
  :bind ((:map projectile-mode-map
             ("C-c p p" . projectile-command-map))
         ("C-c p t p" . treemacs-projectile)))
#+END_SRC

*** scratch-pop                                                      :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package scratch-pop
  :init
  (setq scratch-pop-backup-directory (expand-file-name (convert-standard-filename "scratch-pop/") no-littering-var-directory))
  (add-hook 'kill-emacs-hook #'scratch-pop-backup-scratches)
  )
#+END_SRC

*** smartparens                                                      :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :hook (((prog-mode org-mode) . smartparens-mode)
         ((prog-mode org-mode) . show-smartparens-mode))
  :config
  (setq sp-show-pair-from-inside t)             ; shown inside the matching paren delimiter
  (set-face-attribute 'sp-show-pair-match-face nil
                      :background "#767676" :foreground "#00cd00"
                      :weight 'bold)
  )
(use-package smartparens-config :after smartparens :defer t :straight smartparens)
#+END_SRC

*** symon                                                         :MONITOR:

Tiny system monitor

#+BEGIN_SRC emacs-lisp
(use-package symon
  :defer 3
  :config
  (setq symon-sparkline-type 'bounded)
  (define-symon-monitor symon-current-date-time-monitor
    :interval 5
    :display (propertize
              (format-time-string "%k:%M %:z %d %b %Y %a      ")
              'face 'font-lock-type-face))
  (setq symon-monitors
        (cond ((memq system-type '(gnu/linux cygwin))
               '(symon-current-date-time-monitor
                 symon-linux-memory-monitor
                 symon-linux-cpu-monitor
                 symon-linux-network-rx-monitor
                 symon-linux-network-tx-monitor
                 symon-linux-battery-monitor))
              ((memq system-type '(darwin))
               '(symon-current-date-time-monitor
                 symon-darwin-memory-monitor
                 symon-darwin-cpu-monitor
                 symon-darwin-network-rx-monitor
                 symon-darwin-network-tx-monitor
                 symon-darwin-battery-monitor))
              ((memq system-type '(windows-nt))
               '(symon-current-date-time-monitor
                 symon-windows-memory-monitor
                 symon-windows-cpu-monitor
                 symon-windows-network-rx-monitor
                 symon-windows-network-tx-monitor
                 symon-windows-battery-monitor))))
  (symon-mode)
  )
#+END_SRC

*** subword                                                          :EDIT:

navigate into CamelCaseWords

#+BEGIN_SRC emacs-lisp
(use-package subword
  :diminish subword-mode
  :hook ((prog-mode org-mode) . subword-mode)
  )
#+END_SRC

*** super-save                                                       :EDIT:

auto-save buffers

#+BEGIN_SRC emacs-lisp
(use-package super-save
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)
  )
#+END_SRC

*** switch-window                                                      :UI:

#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :bind (([remap other-window] . switch-window)
         ([remap delete-other-windows] . switch-window-then-maximize)
         ([remap split-window-below] . switch-window-then-split-below)
         ([remap split-window-right] . switch-window-then-split-right)
         ([remap delete-window] . switch-window-then-delete)
         ([remap dired-other-window] . switch-window-then-dired)
         ([remap find-file-other-window] . switch-window-then-find-file)
         ([remap compose-mail-other-window] . switch-window-then-compose-mail)
         ([remap find-file-read-only-other-window] . switch-window-then-find-file-read-only)
         ([remap find-file-other-window] . switch-window-then-find-file)
         ([remap display-buffer] . switch-window-then-display-buffer)
         ([remap kill-buffer-and-window] . switch-window-then-kill-buffer))
  :custom
  (switch-window-auto-resize-window t)
  (switch-window-default-window-size '(0.618 . 0.618))
  (switch-window-minibuffer-shortcut ?z)
  (switch-window-preferred 'helm)
  (switch-window-shortcut-appearance 'asciiart)
  (switch-window-shortcut-style 'qwerty))
#+END_SRC

*** undo-tree                                                        :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer 1
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-diff t
        undo-tree-visualizer-timestamps t
        undo-tree-auto-save-history t)
  )
#+END_SRC

*** vimish-fold                                                      :EDIT:

vim-like text folding

#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
  :commands (vimish-fold vimish-fold-delete vimish-fold-toggle))
#+END_SRC

*** which-key

Display the key bindings in a popup.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer 1
  :diminish which-key-mode
  :custom
  (which-key-idle-delay 0.5)                    ; popup delay
  (which-key-compute-remaps t)
  (which-key-allow-multiple-replacements t)
  :config
  (which-key-mode)
  (which-key-setup-side-window-right-bottom)
  )
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :defer t
  :commands yas-minor-mode
  :diminish yas-minor-mode
  :custom (yas-keymap-disable-hook t)
  :config (yas-reload-all))
(use-package yasnippet-snippets :after yasnippet)
(use-package ivy-yasnippet :after yasnippet :commands ivy-yasnippet)
#+END_SRC

*** ztree                                                            :EDIT:

Diff between directories

#+BEGIN_SRC emacs-lisp
(use-package ztree
  :defer t
  :config
  (setq ztree-draw-unicode-lines t)
  )
#+END_SRC

*** Helm                                                             :EDIT:

**** helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :bind (([remap switch-to-buffer]. helm-mini)          ; C-x b
         ([remap list-buffers]    . helm-mini)          ; C-x C-b
         ([remap find-file]       . helm-find-files)    ; C-x C-f
         ([remap find-library]    . helm-locate-library)
         ([remap apropos-command] . helm-apropos)       ; C-h a
         ([remap dabbrev-expand]  . helm-dabbrev)       ; M-/
         ([remap occur]           . helm-occur)         ; M-s o
         ([remap execute-extended-command] . helm-M-x)  ; M-x
         ([remap yank-pop] . helm-show-kill-ring)       ; M-y
         )
  :diminish helm-mode
  :preface (require 'helm-config)
  :config
  (helm-mode 1)
  (helm-adaptive-mode 1)
  (helm-autoresize-mode 1)                      ; buffer window resizing
  (setq helm-buffers-fuzzy-matching t           ; fuzzy matching when non-nil
        completion-styles `(basic partial-completion emacs22 initials
                                  ,(if (version<= emacs-version "27.0") 'helm-flex 'flex))
        helm-semantic-fuzzy-match t
        helm-apropos-fuzzy-match t
        helm-lisp-fuzzy-completion t
        helm-imenu-fuzzy-match t
        helm-completion-in-region-fuzzy-match t
        helm-M-x-fuzzy-match t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-candidate-number-limit 100         ; candidate limit
        helm-ff-search-library-in-sexp t        ; search for library in `require' and `declare-function' sexp
        helm-move-to-line-cycle-in-source t     ; move to end or beginning of source when reaching top or bottom of source
        helm-quick-update t                     ; do not display invisible candidates
        helm-split-window-inside-p t            ; open helm buffer inside current window, not occupy whole other window
        )
  (add-hook 'eshell-mode-hook                   ; eshell
            #'(lambda ()
                (define-key eshell-mode-map
                  [remap eshell-pcomplete]
                  'helm-esh-pcomplete)))
  (add-to-list 'helm-completing-read-handlers-alist (cons #'find-file-at-point nil)))
#+END_SRC

**** swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper-helm
  :bind (([remap isearch-forward]  . swiper-helm)   ; C-s
         ([remap isearch-backward] . swiper-helm))) ; C-r
#+END_SRC

*** Ivy                                                              :EDIT:

**** ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (:map ivy-minibuffer-map
              ("C-m" . ivy-alt-done))           ; use 'Enter' on a directory to navigate into the directory, not open it with dired
  :diminish ivy-mode
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
        ivy-count-format "%d/%d "               ; show currnet and total number
        ivy-display-style nil
        ivy-minibuffer-faces nil
        ivy-re-builders-alist                   ; ivy fuzzy matching everywhere other than in swiper
        '((swiper . regexp-quote)
          (t      . ivy--regex-fuzzy)))
  )
#+END_SRC

**** counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("C-c p c f" . counsel-fzf)
         ("C-c p c g" . counsel-git)
         ("C-c p c j" . counsel-git-grep)
         ([remap describe-bindings] . counsel-descbinds)
         ([remap describe-function] . counsel-describe-function)
         ([remap describe-variable] . counsel-describe-variable)))
#+END_SRC

**** projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind(:map projectile-mode-map
             ("C-c p p" . projectile-command-map))
  :defer t
  :custom
  (projectile-completion-system 'ivy)                       ; via ivy backend
  (projectile-enable-caching t)                             ; enable caching unconditionally
  (projectile-file-exists-remote-cache-expire nil)          ; disable remote file exists cache
  (projectile-remember-window-configs t)
  (projectile-switch-project-action 'counsel-projectile-find-file-or-buffer)
  (projectile-sort-order 'modification-time)
  :config
  (setq projectile-globally-ignored-directories (append
                                                 '(".metadata" "node_modules" "vendor") projectile-globally-ignored-directories)
        projectile-globally-ignored-files (append
                                           '(".DS_Store") projectile-globally-ignored-files))
  (setq-default projectile-mode-line
                '(:eval
                  (if (file-remote-p default-directory)
	                    " Pr"
                    (format " Proj[%s]" (projectile-project-name)))))
  (cond
   ((executable-find "ag")
    (setq projectile-generic-command
          (concat "ag -0 -l --nocolor"
                  ; https://github.com/ggreer/the_silver_searcher/issues/1060
                  (mapconcat #'identity (cons "" projectile-globally-ignored-directories) " --ignore /")
                  (mapconcat #'identity (cons "" projectile-globally-ignored-directories) " --ignore /**/"))))
   ((executable-find "rg")
    (setq projectile-generic-command
          (let ((rg-cmd ""))
            (dolist (dir projectile-globally-ignored-directories)
              (setq rg-cmd (format "%s --glob '!%s'" rg-cmd dir)))
            (concat "rg -0 --files --color=never --hidden" rg-cmd)))))
  (if (eq system-type 'windows-nt)                    ; external indexing under windows
      (setq projectile-indexing-method 'alien))
  )

(use-package counsel-projectile
  :bind (:map prog-mode-map
              ("C-c p SPC" . counsel-projectile))
  :config (counsel-projectile-mode))

(use-package rg
  :bind ("C-c p r" . rg-menu))
#+END_SRC

*** Org                                                               :ORG:

**** org-mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind ("C-c o b" . org-switchb)
  :straight (:type built-in)
  :config
  (setq truncate-lines nil                      ; line wrap
        org-edit-src-content-indentation 0      ; no indentation in SRC block
        org-export-with-smart-quotes t
        org-log-done 'time
        org-html-doctype "html5"
        org-pretty-entities t                   ; show symbols without math delimiters
        org-src-preserve-indentation t
        org-src-fontify-natively t              ; native fontification
        org-src-tab-acts-natively t             ; mative tab in SRC block
        org-use-speed-commands t                ; speed keys
        org-startup-indented t
        org-hide-leading-stars t
        )

  (org-indent-mode t)                           ; list-oriented
  (diminish 'org-indent-mode)

  (add-hook 'org-shiftup-final-hook 'windmove-up)  ; active windmove
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

  (org-defkey org-mode-map [remap imenu] #'helm-org-in-buffer-headings)

  ;; recompile README.org/.el/.elc
  (add-hook 'after-save-hook
            #'(lambda ()
                "Load and compile README.org"
                (when (equal (buffer-file-name) (expand-file-name (concat user-emacs-directory "README.org")))
                  (org-babel-tangle nil (expand-file-name (concat user-emacs-directory "README.el")) "emacs-lisp")
                  (byte-compile-file (expand-file-name (concat user-emacs-directory "README.el"))))
                ))
  )
#+END_SRC

**** org-page                                                   :DISABLED:

Static site generator in org-mode

Two stpes to write a blog
- op/new-post
- op/do-publication

To configure the org-page site variables, put the below settings into =~/.emacs.d/private.el=

#+BEGIN_EXAMPLE
(setq my-op/repository-directory "~/repos/public/yang-l.github.io"
      my-op/site-domain "http://yang-l.github.io/"
      my-op/personal-github-link "https://github.com/yang-l")
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(use-package org-page
  :disabled
  :commands (op/new-repository op/new-post op/do-publication)
  :config
  (setq op/repository-directory my-op/repository-directory
        op/site-domain my-op/site-domain
        op/personal-github-link my-op/personal-github-link
        op/site-main-title "@Home"
        op/site-sub-title "")
  )
#+END_SRC

** Research

*** AUCTex                                                       :DISABLED:
#+BEGIN_SRC emacs-lisp
;; (when (locate-library "auctex") (progn
;;     (defun modes/auctex-mode ()
;;         "auctex-mode hook"
;;         ;; set latexmk the default LaTeX compiler
;;         (push
;;          '("Latexmk" "latexmk -outdir=/tmp/emacs/latex -bibtex -pdf -pv %s" TeX-run-command nil t
;;            :help "Run Latexmk on file")
;;          TeX-command-list)
;;         (setq TeX-command-default "Latexmk")

;;         ;; auto directory for auto-generated info
;;         (setq TeX-auto-local "/tmp/emacs/latex/auctex-auto/")
;;         (setq TeX-parse-self t) ; enable parse on load
;;         (setq TeX-auto-save t) ; enable parse on save

;;         (setq-default TeX-master nil)
;;         (setq TeX-save-query nil) ; autosave before compiling

;;         (TeX-fold-mode 1) ; enable code folding
;;         (TeX-fold-buffer)

;;         ;; smart quotes
;;         (setq TeX-open-quote "<<")
;;         (setq TeX-close-quote ">>")

;;         ;; detect master files
;;         (defun guess-TeX-master (filename)
;;           "Guess the master file for FILENAME from currently open .tex files."
;;           (let ((candidate nil)
;;                 (filename (file-name-nondirectory filename)))
;;             (save-excursion
;;               (dolist (buffer (buffer-list))
;;                 (with-current-buffer buffer
;;                   (let ((name (buffer-name))
;;                         (file buffer-file-name))
;;                     (if (and file (string-match "\\.tex$" file))
;;                         (progn
;;                           (goto-char (point-min))
;;                           (if (re-search-forward (concat "\\\\input{" filename "}") nil t)
;;                               (setq candidate file))
;;                           (if (re-search-forward (concat "\\\\include{" (file-name-sans-extension filename) "}") nil t)
;;                               (setq candidate file))))))))
;;             (if candidate
;;                 (message "TeX master document: %s" (file-name-nondirectory candidate)))
;;             candidate))
;;         (setq TeX-master (guess-TeX-master (buffer-file-name))))
;;     (add-hook 'LaTeX-mode-hook 'modes/auctex-mode)

;;     ;; activate the Ref mode
;;     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)     ; with AUCTeX LaTeX mode

;;     (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)    ; auctex LaTeX math mode
;;     (add-hook 'LaTeX-mode-hook 'visual-line-mode)   ; with AUCTeX LaTeX mode

;;     ;; enable flyspell-mode
;;     (add-hook 'LaTeX-mode-hook 'flyspell-mode)

;;     ;; activate syntax highlighting - font-lock-mode
;;     (add-hook 'LaTeX-mode-hook 'turn-on-font-lock)

;;     ;; AUCTEX / EMACS / EVINCE - Forward & Inverse Search
;;     (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
;;     (setq TeX-source-correlate-method 'synctex)
;;     (setq TeX-source-correlate-start-server t)

;;     ;; evince(pdf) -> emacs(latex) search - inverse search
;;     ;; ctrl + mouse right button in evince
;;     ;;(defun un-urlify (fname-or-url)
;;     ;;  "A trivial function that replaces a prefix of file:/// with just /."
;;     ;;  (if (string= (substring fname-or-url 0 8) "file:///")
;;     ;;      (substring fname-or-url 7)
;;     ;;    fname-or-url))

;;     (defun th-evince-sync (file linecol &rest ignored)
;;       (let* ((fname (un-urlify file))
;;              (buf (find-file fname))
;;              (line (car linecol))
;;              (col (cadr linecol)))
;;         (if (null buf)
;;             (message "[Synctex]: %s is not opened..." fname)
;;           (switch-to-buffer buf)
;;           (with-no-warnings
;;             (goto-line (car linecol)))
;;           (unless (= col -1)
;;             (move-to-column col)))))

;;     (defvar *dbus-evince-signal* nil)

;;     (defun enable-evince-sync ()
;;       (eval-when-compile (require 'dbus))
;;       (when (and
;;              (eq window-system 'x)
;;              (fboundp 'dbus-register-signal))
;;         (unless *dbus-evince-signal*
;;           (setf *dbus-evince-signal*
;;                 (dbus-register-signal
;;                  :session nil "/org/gnome/evince/Window/0"
;;                  "org.gnome.evince.Window" "SyncSource"
;;                  'th-evince-sync)))))
;;     (add-hook 'LaTeX-mode-hook 'enable-evince-sync)

;;     ;; emacs(latex) -> evince(pdf) - forward search
;;     ;; c-c c-c -> View -> pdf-forward-search in emacs
;;     (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
;;     (add-hook 'LaTeX-mode-hook (lambda()
;;     ;; https://github.com/MassimoLauria/dotemacs/blob/42fd1978da3780df725198862fa9f28c0ac4218c/init-latex.le
;;     ;; https://gist.github.com/2297447

;;     ;; http://tex.stackexchange.com/a/78051
;;     ;; un-urlify and urlify-escape-only should be improved to handle all special characters, not only spaces.
;;     ;; The fix for spaces is based on the first comment on http://emacswiki.org/emacs/AUCTeX#toc20
;;     (defun un-urlify (fname-or-url)
;;       "Transform file:///absolute/path from Gnome into /absolute/path with very limited support for special characters"
;;       (if (string= (substring fname-or-url 0 8) "file:///")
;;           (url-unhex-string (substring fname-or-url 7))
;;         fname-or-url))

;;     (defun urlify-escape-only (path)
;;       "Handle special characters for urlify"
;;       (replace-regexp-in-string " " "%20" path))

;;     (defun urlify (absolute-path)
;;       "Transform /absolute/path to file:///absolute/path for Gnome with very limited support for special characters"
;;       (if (string= (substring absolute-path 0 1) "/")
;;           (concat "file://" (urlify-escape-only absolute-path))
;;         absolute-path))

;;     ;; universal time, need by evince
;;     (defun utime ()
;;       (let ((high (nth 0 (current-time)))
;;             (low (nth 1 (current-time))))
;;         (+ (* high (lsh 1 16) ) low)))

;;     ;; Forward search.
;;     ;; Adapted from http://dud.inf.tu-dresden.de/~ben/evince_synctex.tar.gz
;;     (defun auctex-evince-forward-sync (pdffile texfile line)
;;       (let ((dbus-name
;;              (dbus-call-method :session
;;                                "org.gnome.evince.Daemon"  ; service
;;                                "/org/gnome/evince/Daemon" ; path
;;                                "org.gnome.evince.Daemon"  ; interface
;;                                "FindDocument"
;;                                (urlify pdffile)
;;                                t     ; Open a new window if the file is not opened.
;;                                )))
;;         (dbus-call-method :session
;;                           dbus-name
;;                           "/org/gnome/evince/Window/0"
;;                           "org.gnome.evince.Window"
;;                           "SyncView"
;;                           (urlify-escape-only texfile)
;;                           (list :struct :int32 line :int32 1)
;;                           (utime))))

;;     (defun pdf-forward-search ()
;;       (let (
;;             (pdf (concat "/tmp/emacs/latex/" (TeX-master-file (TeX-output-extension))))
;;             (tex (buffer-file-name))
;;             (line (line-number-at-pos)))
;;         (auctex-evince-forward-sync pdf tex line)))

;;     ;; PDF forward search : emacs -> dbus -> evince
;;     (setq TeX-view-program-list '())
;;     (add-to-list 'TeX-view-program-list
;;                  '("EvinceForward" pdf-forward-search))

;;     (setq TeX-view-program-selection '())
;;     (add-to-list 'TeX-view-program-selection
;;                  '(output-pdf "EvinceForward"))
;;     ))))
#+END_SRC

*** Maxima                                                       :DISABLED:

#+BEGIN_SRC emacs-lisp
;; (when (locate-library "maxima")
;;     (autoload 'maxima-mode "maxima" nil t)
;;     (setq auto-mode-alist (cons '("\\.ma?[cx]" . maxima-mode) auto-mode-alist))
;;     )
#+END_SRC

*** Octave                                                       :DISABLED:

#+BEGIN_SRC emacs-lisp
;; (autoload 'octave-mode "octave-mod" nil t)
;; (setq auto-mode-alist (append '(("\\.m$" . octave-mode)) auto-mode-alist))

;; (with-eval-after-load 'octave-mod
;;     '(progn
;;         (abbrev-mode 1)
;;         (auto-fill-mode 1)
;;         (if (eq window-system 'x)
;;             (font-lock-mode 1))

;;         (run-octave)

;;         (add-hook 'inferior-octave-mode-hook
;;             (lambda ()
;;                 (turn-on-font-lock)
;;                 (define-key inferior-octave-mode-map [up]
;;                   'comint-previous-input)
;;                 (define-key inferior-octave-mode-map [down]
;;                   'comint-next-input)))
;;         ))
#+END_SRC

** Useful Functions

*** Indentation

#+BEGIN_SRC emacs-lisp
(defun indent-whole-buffer ()                   ; indentation
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
(defun indent-current-paragraph ()              ; code cleanup
  "indent current paragraph"
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (mark-paragraph)
    (indent-region (region-beginning) (region-end) nil)))
#+END_SRC

*** Line Indent

#+BEGIN_SRC emacs-lisp
(defun indent-text (distance)
  (if (use-region-p)
      (let ((mark (mark)))
        (save-excursion
          (indent-rigidly (region-beginning)
                          (region-end)
                          distance)
          (push-mark mark t t)
          (setq deactivate-mark nil)))
    (indent-rigidly (line-beginning-position)
                    (line-end-position)
                    distance)))

(defun inc-line-indent (count)
  (interactive "p")
  (indent-text count))

(defun dec-line-indent (count)
  (interactive "p")
  (indent-text (- count)))

(global-set-key (kbd "C-c > >") #'(lambda () (interactive) (inc-line-indent 4)))
(global-set-key (kbd "C-c < <") #'(lambda () (interactive) (dec-line-indent 4)))
#+END_SRC

*** File Format Convertion

#+BEGIN_SRC emacs-lisp
(defun dos2unix ()                              ; EoL conversion
  "dos2unix on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'unix))
(defun unix2dos ()
  "unix2dos on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'dos))
#+END_SRC

*** Copy N Paste                                                     :EDIT:

Selective copy and paste

#+BEGIN_SRC emacs-lisp
;; require xsel
(defun copy-to-clipboard ()
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))
  )

(defun paste-from-clipboard ()
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "xsel -o -b"))
    )
  )
#+END_SRC

*** Dired                                                            :FILE:

File manager

#+BEGIN_SRC emacs-lisp
(defun dired-open-home ()
  (interactive)
  (dired "~/")
  )
#+END_SRC

*** Json Formatter                                                   :EDIT:

#+BEGIN_SRC emacs-lisp
(defun json-format ()
  (interactive)
  (save-excursion
    (shell-command-on-region (mark) (point) "python -m json.tool" (buffer-name) t)
    )
  )
#+END_SRC

*** URL Encode & Decode

#+BEGIN_SRC emacs-lisp
(defun urldecode ()
  (interactive)
  (save-excursion
    (shell-command-on-region (mark) (point) "python3 -c \"import sys; from urllib.parse import unquote_plus; print(unquote_plus(sys.stdin.read()));\" " (buffer-name) t)
    )
  )

(defun urlencode ()
  (interactive)
  (save-excursion
    (shell-command-on-region (mark) (point) "python3 -c \"import sys; from urllib.parse import quote_plus; print(quote_plus(sys.stdin.read()));\""  (buffer-name) t)
    )
  )
#+END_SRC

* Tips

** Keybindings

| keybindings                       | alternative | mode          | description                         |
|-----------------------------------+-------------+---------------+-------------------------------------|
| =C-u 4 C-x Tab= / =C-4 C-x Tab=   | =C-c > >=   | buildin       | indent the region by =4= spaces     |
| =C-u -4 C-x Tab= / =C--4 C-x Tab= | =C-c < <=   | buildin       | un-indent the region by =4= spaces  |
| =C-x SPC=                         |             | buildin       | rectangular selection               |
| =C-x r t=                         |             | buildin       | replace rectangule content          |
| =C-c '​=                           |             | org           | edit SRC block in separate buffer   |
| =S-<arrow>=                       | =C-x o=     | buildin       | move point between windows          |
| =M-<num>=                         |             | window-number | jump to window by number            |
| =C-S-Backspace=                   | =C-a C-k=   | buildin       | delete a whole line                 |
| =C-x z=                           |             | buildin       | repeat last command                 |
| =z=                               |             | buildin       | repeat last command again           |
| =M-<=                             |             | buildin       | top of buffer                       |
| =M->=                             |             | buildin       | end of buffer                       |
| =C-NUM C-x $=                     | hideshow    | buildin       | hide lines indented more NUM colums |
| =C-x $=                           | hideshow    | buildin       | show all lines                      |
| =C-x ==                           |             | buildin       | show current cursor position        |
| =M-z CHAR=                        |             | buildin       | del up to CHAR (but not included)   |
| =C-x r b=                         |             | buildin       | create bookmark                     |
| =C-x r m=                         |             | buildin       | jump to bookmark                    |
| =C-x r l=                         |             | buildin       | list bookmark                       |

#+BEGIN_SRC emacs-lisp
;; Local Variables:
;; byte-compile-warnings: (not free-vars unresolved)
;; End:
#+END_SRC
