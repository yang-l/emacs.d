#+TITLE: Emacs Configuration
#+OPTIONS: toc:2 num:nil

This file re-organises [[https://github.com/yang-l/configurations][the old init files]]

* Installation

Backup existing =~/.emacs.d=, and then follow by

#+BEGIN_SRC bash
git clone https://github.com/yang-l/emacs.d.git ~/.emacs.d
#+END_SRC

* Emacs init.el

** Initialisation

*** Load files

Path to non ELPA included lisp files
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

Path to personal/credential info in =~/.emacs.d/private.el=
#+BEGIN_SRC emacs-lisp
(if (file-exists-p (concat user-emacs-directory "private.el"))
    (load (expand-file-name "private.el" user-emacs-directory))
(defvar default-directory                       ; default
  (concat (getenv "HOME") "/"))
(defvar my-win-default-directory                ; folder
  default-directory)
(defvar my-lin-default-directory
  default-directory)
(defvar my-erc-nick "")                         ; ERC
(defvar my-erc-user-full-name "")
(defvar my-erc-email-userid ""))
#+END_SRC

*** ELPA

#+BEGIN_SRC emacs-lisp
(unless (version< emacs-version "25.1")
  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/")
          ("Org"          . "https://orgmode.org/elpa/"))
        package-archive-priorities
        '(("Org"          . 15)
          ("MELPA Stable" . 10)
          ("GNU ELPA"     . 5)
          ("MELPA"        . 0))
        package-enable-at-startup nil)
  (when (boundp 'package-pinned-packages)
    (setq package-pinned-packages
          '((lsp-mode     . "MELPA")
            (evil         . "MELPA")))
    )
  (package-initialize))
#+END_SRC

Define packages and install them in case of missing
#+BEGIN_SRC emacs-lisp
(defvar my-packages '(
    company flycheck git-gutter magit counsel   ; Programming
    projectile counsel-projectile swiper-helm
    yasnippet yasnippet-snippets ivy-yasnippet
    lsp-ui company-lsp                          ; Language Server Protocol
    js2-mode lsp-javascript-typescript          ; JavaScript
    web-mode                                    ; Web
    lsp-java                                    ; Java
    pyvenv                                      ; Python
    groovy-mode                                 ; Groovy
    enh-ruby-mode rspec-mode inf-ruby           ; Ruby
    go-mode godoctor                            ; Go
    zenburn-theme color-theme-solarized diminish; UI
    undo-tree helm ivy                          ; Editing
    mwim multiple-cursors expand-region ztree
    drag-stuff scratch dumb-jump treemacs
    treemacs-projectile smartparens
    evil evil-nerd-commenter evil-surround
    indent-guide avy vimish-fold super-save
    org-page
    dockerfile-mode terraform-mode              ; Infrastructure
    yaml-mode jinja2-mode ansible
    restclient es-mode
    puppet-mode
    which-key symon elfeed bm                   ; Misc
    general
    exec-path-from-shell                        ; System
    multi-term                                  ; Terminal
    ))
(let ((refreshed nil))
  (dolist (p my-packages)                       ; install the missing packages
    (when (not (package-installed-p p))
      (unless refreshed
        (package-refresh-contents)
        (setq refreshed t))
      (package-install p))))
#+END_SRC

*** UTF-8 on everything

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8-unix)              ; UTF-8 on everything
(unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8))
(setq-default buffer-file-coding-system
    'utf-8-unix)                                ; linux output
(setq x-select-request-type                     ; pasting
    '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

*** Variable Initialisation

#+BEGIN_SRC emacs-lisp
(setq-default
    ad-redefinition-action 'accept              ; silence functions getting redefined messages
    column-number-mode t                        ; show cursor position
    default-major-mode 'text-mode               ; set new buffers as test files
    initial-major-mode 'text-mode
    enable-recursive-minibuffers t              ; enable minibuffer recursive
    fill-column 80                              ; column space
    frame-title-format "emacs@%b"               ; show on title
    indent-tabs-mode nil                        ; space instead of tab
    inhibit-splash-screen t                     ; no splash
    inhibit-startup-message t
    initial-scratch-message nil
    kill-ring-max 500                           ; kill ring size
    mouse-wheel-scroll-amount '(1 ((shift) .1)) ; scroll one line at a time
    frame-resize-pixelwise t
    read-buffer-completion-ignore-case t        ; ignore case-sensitivity
    read-file-name-completion-ignore-case t
    require-final-newline t                     ; always add a new line at the end of a file
    save-interprogram-paste-before-kill t       ; put clipboard into killringy
    scroll-margin 3                             ; auto scrolling
    scroll-step 1                               ; line-by-line scrolling
    scroll-conservatively 10000                 ; do not jump to centre point in the window
    scroll-preserve-screen-position t           ; make the cursor steady when scrolling
    tab-width 2                                 ; 2 space indentation
    visible-bell 1                              ; no bell in windows
    window-combination-resize t                 ; split windows equally
    x-stretch-cursor t                          ; stretch cursor to cover wide characters
    confirm-kill-emacs 'y-or-n-p                ; prompts before kill
    )
(defun display-startup-echo-area-message ())    ; disable minibufer welcome message
(defalias 'dabbrev-expand 'hippie-expand)
#+END_SRC

*** PATH

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :defer 0.1
  :config
  (when (eq system-type 'darwin)                    ; only apply to under OSX graphic and console UI
    (setq exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-initialize))

  (exec-path-from-shell-copy-env "SSH_AGENT_PID")   ; inherent ssh-agent from system
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")

  (setenv "PATH"
          (concat
           (getenv "PATH")
           ))
  )
#+END_SRC

*** Server mode

Run Emacs as a daemon, and edit via =emacsclient=. =emacsclient -t= for terminal / =emacsclient -c= for graphic

#+BEGIN_SRC emacs-lisp
(use-package server
  :defer 1
  :config
  (unless (and (fboundp 'server-running-p)
               (server-running-p))
    (server-start)))
#+END_SRC

** Customisation

*** Key binding

Use the stock key bindings when possible.

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-SPC"))                ; set-mark-command
(global-unset-key (kbd "C-x f"))                ; set-fill-column
#+END_SRC

passing tmux keystrokes within emacs terminal

#+BEGIN_SRC emacs-lisp
(defadvice terminal-init-screen
    ;; The advice is named `tmux', and is run before `terminal-init-screen' runs.
    (before tmux activate)
    ;; Docstring.  This describes the advice and is made available inside emacs;
    ;; for example when doing C-h f terminal-init-screen RET
    "Apply xterm keymap, allowing use of keys passed through tmux."
    ;; This is the elisp code that is run before `terminal-init-screen'.
    (if (getenv "TMUX")
        (let ((map (copy-keymap xterm-function-map)))
          (set-keymap-parent map (keymap-parent input-decode-map))
          (set-keymap-parent input-decode-map map))))
#+END_SRC

OSX-only key bindings

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)                  ; mac only settings
  (setq mac-option-modifier 'meta
        mac-command-modifier 'alt)
  )
#+END_SRC

*** Browse URL

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function               ; default browser
        'browse-url-generic
    browse-url-generic-program
        (executable-find "firefox"))
#+END_SRC

*** Emacs Setup

#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook
    (lambda () (progn
        (auto-compression-mode 1)               ; open compressed files on the fly
        (delete-selection-mode t)               ; delete marked text on typing
        (global-hl-line-mode +1)                ; highlight current line
        (mouse-avoidance-mode 'animate)         ; mouse avoidance
        (if (fboundp 'scroll-bar-mode)
            (scroll-bar-mode -1))               ; no scroll bars
        (if (fboundp 'tool-bar-mode)
            (tool-bar-mode -1))                 ; hide toolbar
        (if (fboundp 'tooltip-mode)
            (tooltip-mode -1))
        (visual-line-mode)                      ; soft line warp
        (diminish 'visual-line-mode)
        (when (fboundp                          ; windmove
            'windmove-default-keybindings)
            (windmove-default-keybindings))
        (size-indication-mode +1)               ; show total buffer size
    )))
(dolist
    (hook
     (list
      'term-exec-hook
      ))
  (add-hook hook #'redraw-display))             ; force redraw
(add-hook 'window-setup-hook
          (lambda ()
            (toggle-frame-fullscreen)           ; fullscreen
            (toggle-frame-maximized))           ; maximised
          t)
(when (daemonp)                                 ; when calling "emacsclient -c -n" under daemon
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (when (display-graphic-p frame)
                (toggle-frame-fullscreen)       ; fullscreen
                (toggle-frame-maximized)        ; maximised
                ))
            ))
(dolist
    (hook
     (list
      'emacs-startup-hook
      'tty-setup-hook
      ))
  (add-hook hook
            (lambda ()
              (progn
                (if (fboundp 'menu-bar-mode)
                    (menu-bar-mode -1))         ; hide menu bar
                ))))
; https://blog.d46.us/advanced-emacs-startup/
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
; https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/
(run-with-idle-timer 2 nil
 #'(lambda ()
     (setq gc-cons-threshold (* 1024 1024 2))   ; reset GC to a reasonable value
     (message "gc-cons-threshold restored to %S"
              gc-cons-threshold)))
; https://emacs.stackexchange.com/questions/32150/how-to-add-a-timestamp-to-each-entry-in-emacs-messages-buffer
(advice-add 'message :before                    ; add timestamp in *Messages* buffer
            #'(lambda (FORMAT-STRING &rest args)
                "Advice to run before `message' that prepends a timestamp to each message."
                (if message-log-max
                    (let ((deactivate-mark nil)
                          (inhibit-read-only t))
                      (with-current-buffer "*Messages*"
                        (goto-char (point-max))
                        (if (not (bolp))
                            (newline))
                        (insert (format-time-string "[%F %T.%3N %:z] ")))))
                ))
#+END_SRC

*** Folder

**** Default folder

#+BEGIN_SRC emacs-lisp
(setq default-directory
    (if (eq system-type 'windows-nt)
        my-win-default-directory                ; Win
    my-lin-default-directory                    ; Linux
    ))
#+END_SRC

**** Emacs backup folder

#+BEGIN_SRC emacs-lisp
(defvar backup-directory                        ; backup and autosave directory
  (if (eq system-type 'windows-nt)              ; Windows
      (concat "C:/tmp/emacs/" (user-login-name) "/")
    (expand-file-name
     (concat "~/emacs/" (user-login-name) "/")) ; Linux & Mac
    ))
(if (not (file-exists-p backup-directory))
    (make-directory backup-directory t))
(setq backup-directory-alist `((".*" . ,backup-directory)))
(setq auto-save-list-file-prefix backup-directory)
(setq auto-save-file-name-transforms `((".*", backup-directory t)))
(setq make-backup-files t                       ; backup of a file the first time it is saved.
      backup-by-copying t                       ; don't clobber symlinks
      version-control t                         ; version numbers for backup files
      delete-old-versions t                     ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 5                       ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 15                      ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t                       ; auto-save every buffer that visits a file
      auto-save-timeout 20                      ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200                    ; number of keystrokes between auto-saves (default: 300)
      vc-make-backup-files t                    ; backup versioned files
      )
; ignore file backups @ http://stackoverflow.com/questions/482256/
(defvar my-backup-ignore-regexps (list "\\.vcf$" "\\.gpg$")
  "*List of filename regexps to not backup")
(defun my-backup-enable-p (name)
  "Filter certain file backups"
  (when (normal-backup-enable-predicate name)
    (let ((backup t))
      (mapc (lambda (re)
              (setq backup (and backup (not (string-match re name)))))
            my-backup-ignore-regexps)
      backup)))
(setq backup-enable-predicate 'my-backup-enable-p)
#+END_SRC

**** Minibuffer backup

savehist - save the minibuffer histories

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :defer 0.5
  :config
  (setq-default savehist-additional-variables '(kill-ring search-ring regexp-search-ring extended-command-history)
                savehist-file (concat backup-directory "savehist")
                savehist-autosave-interval 60
                history-length 10000
                )
  (savehist-mode 1)
  )
#+END_SRC

**** Folders for other modes

#+BEGIN_SRC emacs-lisp
(setq semanticdb-default-save-directory
        (expand-file-name "semanticdb" backup-directory)
      recentf-save-file
        (expand-file-name "recentf" backup-directory)
      vimish-fold-dir
        (expand-file-name "vimish-fold" backup-directory)
    )
#+END_SRC

**** Create missing parent directories

#+BEGIN_SRC emacs-lisp
(defun create-non-existent-directory ()
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
      (make-directory parent-directory t))))
(add-to-list 'find-file-not-found-functions #'create-non-existent-directory)
#+END_SRC

*** Buildin Mode Setting

**** Abbrev Mode

#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :defer 2
  :diminish abbrev-mode
  :config
  (setq abbrev-file-name
        (concat backup-directory "abbrev-defs"))
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))
  )
#+END_SRC

**** Case

#+BEGIN_SRC emacs-lisp
(cl-loop for fn in '(downcase-region            ; enable commands
                     upcase-region
                     erase-buffer)
        do (put fn 'disabled nil))
#+END_SRC

**** Comint

#+BEGIN_SRC emacs-lisp
(use-package comint
  :defer 2
  :config
  (add-hook 'comint-output-filter-functions
            'comint-watch-for-password-prompt)  ; hide password in shell
  (add-hook 'comint-mode-hook
            (function
             (lambda () (setq comint-scroll-show-maximum-output nil))
             ))
  )
#+END_SRC

**** Dired                                      :FILE:

#+BEGIN_SRC emacs-lisp
(use-package dired
  :disabled
  :defer t
  :init
  (add-hook 'dired-load-hook
            #'(lambda ()
                "dired mode hook"
                (load "dired-x")
                ;; http://emacswiki.org/emacs/DiredOmitMode
                (setq-default dired-omit-files-p t)
                (setq dired-omit-files
                      (concat dired-omit-files "\\|^\\..+$"))

                ;; http://ann77.emacser.com/Emacs/EmacsDiredExt.html
                ;; 排序功能
                (make-local-variable  'dired-sort-map)
                (setq dired-sort-map (make-sparse-keymap))
                (define-key dired-mode-map "s" dired-sort-map)
                (define-key dired-sort-map "s"
                  '(lambda () "sort by Size"
                     (interactive) (dired-sort-other (concat dired-listing-switches "S"))))
                (define-key dired-sort-map "x"
                  '(lambda () "sort by eXtension"
                     (interactive) (dired-sort-other (concat dired-listing-switches "X"))))
                (define-key dired-sort-map "t"
                  '(lambda () "sort by Time"
                     (interactive) (dired-sort-other (concat dired-listing-switches "t"))))
                (define-key dired-sort-map "n"
                  '(lambda () "sort by Name"
                     (interactive) (dired-sort-other (concat dired-listing-switches ""))))

                ;; http://www.emacswiki.org/emacs/DiredSortDirectoriesFirst
                (defun mydired-sort ()
                  "Sort dired listings with directories first."
                  (save-excursion
                    (let (buffer-read-only)
                      (forward-line 2) ;; beyond dir. header
                      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
                    (set-buffer-modified-p nil)))
                (defadvice dired-readin
                    (after dired-after-updating-hook first () activate)
                  "Sort dired listings with directories first before adding marks."
                  (mydired-sort))

                ;; single buffer
                (put 'dired-find-alternate-file 'disabled nil)
                ;; http://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer
                (define-key dired-mode-map (kbd "^")
                  (lambda () (interactive) (find-alternate-file "..")))
                ;; http://ergoemacs.org/emacs/emacs_dired_tips.html
                (define-key dired-mode-map (kbd "<return>")
                  'dired-find-alternate-file)

                ;; copy split windows
                ;; C-o / C-0 o to paste the original filename
                ;; https://appsmth.appspot.com/smth/subject/Emacs/94609
                (setq dired-dwim-target t)

                (setq dired-recursive-deletes 'top          ; recursive delection
                      dired-recursive-copies 'always)       ; recursive copy

                (defadvice shell-command                    ; allow running multiple async commands simultaneously
                    (after shell-in-new-buffer
                           (command &optional output-buffer error-buffer))
                  (when (get-buffer "*Async Shell Command*")
                    (with-current-buffer "*Async Shell Command*"
                      (rename-uniquely))))
                (ad-activate 'shell-command)
                ))
  )
#+END_SRC

**** Ediff                                      :FILE:

Call =ediff= or =ediff3= in Emace for file comparisons

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :defer t
  :init
  (add-hook 'ediff-load-hook
            #'(lambda ()
                "ediff-mode hook"
                ;; http://emacswiki.org/emacs/EdiffMode
                ;; save windows configurations
                (add-hook 'ediff-before-setup-hook
                          (lambda ()
                            (setq ediff-saved-window-configuration (current-window-configuration))))

                (let ((restore-window-configuration
                       (lambda ()
                         (set-window-configuration ediff-saved-window-configuration))))
                  (add-hook 'ediff-quit-hook restore-window-configuration 'append)
                  (add-hook 'ediff-suspend-hook restore-window-configuration 'append))

                ;; horizontal window split
                (setq ediff-split-window-function 'split-window-horizontally)
                (setq ediff-merge-split-window-function 'split-window-vertically)
                (setq ediff-window-setup-function 'ediff-setup-windows-plain)
                ))
  )
#+END_SRC

**** GnuTLS

#+BEGIN_SRC emacs-lisp
(use-package gnutls
  :defer t
  :config
  (setq-default gnutls-verify-error t)          ; check tls/ssl
  (cond
   ((string-equal system-type "darwin")         ; Mac OS X
    (progn
      (add-to-list 'gnutls-trustfiles "/private/etc/ssl/cert.pem")
      )))
  )
#+END_SRC

**** Hideshow                                   :CODEING:

Code folding

#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :defer t
  :diminish hs-minor-mode
  :hook ((prog-mode) . hs-minor-mode)
  )
#+END_SRC

**** Imenu

#+BEGIN_SRC emacs-lisp
(use-package imenu
  :defer 2
  :config
  (set-default 'imenu-auto-rescan t)            ; automatic buffer rescan
  )
#+END_SRC

**** Narrowing

#+BEGIN_SRC emacs-lisp
(cl-loop for fn in '(narrow-to-defun            ; enable commands
                     narrow-to-page
                     narrow-to-region)
        do (put fn 'disabled nil))
#+END_SRC

**** Shell & Term

***** term

#+BEGIN_SRC emacs-lisp
(use-package term
  :defer t
  :init
  (add-hook 'term-mode-hook
            #'(lambda ()
                "term mode hook"
                (yas-minor-mode -1)
                (setq bidi-paragraph-direction 'left-to-right
                      term-scroll-to-bottom-on-output t)
                (setq-local scroll-margin 0)
                (eval-after-load 'evil-vars '(evil-set-initial-state 'term-mode 'emacs))
                ))
  )
#+END_SRC

***** multi-term

#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :defer t
  :bind ("C-c t m" . (lambda ()
                       "Start a new multi-term"
                       (interactive)
                       (multi-term)
                       (term-send-raw-string ". ~/.bash_profile\nclear\n")
                       ))
  :config
  (setq multi-term-program "/bin/bash"          ; bash
        multi-term-program-switches "-il"       ; FIXME - this switch does not work with any space characters in it. Set to interactive login shell, which will read "~/.bash_profile" and source the bashrc file
        multi-term-buffer-name "mterm"          ; buffer name
        term-buffer-maximum-size 0              ; keep all buffer
        scroll-margin 0                         ; always make point visible at bottom of the window when auto-scrolling
        multi-term-dedicated-close-back-to-open-buffer-p t
        )
  (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
  (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))
  (add-to-list 'term-bind-key-alist '("C-c t h" .
                                      (lambda ()
                                        "New terminal to the right"
                                        (interactive)
                                        (split-window-horizontally)
                                        (other-window 1)
                                        (multi-term)
                                        (term-send-raw-string ". ~/.bash_profile\nclear\n")
                                        )))
  (add-to-list 'term-bind-key-alist '("C-c t v" .
                                      (lambda ()
                                        "New terminal to the below"
                                        (interactive)
                                        (split-window-vertically)
                                        (other-window 1)
                                        (multi-term)
                                        (term-send-raw-string ". ~/.bash_profile\nclear\n")
                                        )))
  (add-to-list 'term-bind-key-alist '("C-c t x" .
                                      (lambda ()
                                        "Send C-x in term mode."
                                        (interactive)
                                        (term-send-raw-string "\C-x")
                                        )))
  (add-to-list 'term-bind-key-alist '("C-c t e" .
                                      (lambda ()
                                        "Send escape in term mode."
                                        (interactive)
                                        (term-send-raw-string "\e")
                                        )))
  )
#+END_SRC

**** Tramp

=M-x tramp-cleanup-all-connections= - flush remote connections

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :defer t
  :config
  (setq tramp-default-method "ssh"              ; faster than the default scp
        tramp-use-ssh-controlmaster-options nil
        tramp-auto-save-directory backup-directory
        tramp-persistency-file-name             ; tramp histroy file location
        (expand-file-name "tramp" backup-directory)
        )
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (tramp-set-completion-function
   "ssh"
   '((tramp-parse-sconfig "~/.ssh/config")
     ))
  (add-to-list 'backup-directory-alist          ; local backup directory for remote files
               (cons tramp-file-name-regexp (expand-file-name backup-directory)))
  )
#+END_SRC

**** uniquify

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :defer 2
  :config
  (setq uniquify-buffer-name-style 'post-forward)
  )
#+END_SRC

**** view-mode

Buffer readonly mode

#+BEGIN_SRC emacs-lisp
(use-package view
  :bind(:map ctl-x-map
        ("C-q" . view-mode))                    ; replace toggle-read-only with view-mode
  )
#+END_SRC

**** which-func

#+BEGIN_SRC emacs-lisp
(use-package which-func
  :defer 2
  :config
  (which-function-mode)
  (setq which-func-unknown "⊥")
  )
#+END_SRC

**** winner-mode                                :EMACS:

Undo Emacs window changes

#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer 2
  :config
  (winner-mode))
#+END_SRC

**** ZapUpToChar

#+BEGIN_SRC emacs-lisp
(use-package misc
  :bind ("M-z" . zap-up-to-char)
  :commands zap-up-to-char
  )
#+END_SRC

*** Style

**** Face

Emacs GUI font settings

#+BEGIN_SRC emacs-lisp
(if (display-graphic-p) (progn
  (if (eq system-type 'windows-nt)
      (set-face-attribute 'default nil :font "Consolas:antialias=natural" :height 100)
    (cond                                       ; Linux
     ((find-font (font-spec :name "Terminus"))
      (set-face-attribute 'default nil :font "Terminus" :height 120))
     ((find-font (font-spec :maker "misc"
                            :family "fixed"
                            :widthtype "normal"
                            :pixels "14"
                            :height "130"
                            :horiz "75"
                            :vert "75"
                            ))                  ; fallback to "7x14" bitmap
      ; 7x14 / -misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1
      (set-face-attribute 'default nil :font "7x14"))
     )
    (set-fontset-font "fontset-default"         ; 中文字体
                      'han '("WenQuanYi Zen Hei Sharp" . "unicode-bmp"))
    ))
  (when (member "Terminus" (font-family-list))
    (add-to-list 'default-frame-alist '(font . "Terminus")))
  )
#+END_SRC

**** Theme

Zenburn & Solarized themes

#+BEGIN_SRC emacs-lisp
(load-theme 'zenburn t t)                       ; load but do not active theme
(load-theme 'solarized t t)

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (select-frame frame)
                (if (display-graphic-p frame)
                    (progn                      ; emacsclient -c
                      (disable-theme 'solarized)
                      (enable-theme 'zenburn)
                      )
                  (progn                        ; emacsclient -t
                    (disable-theme 'zenburn)
                    (set-frame-parameter nil 'background-mode 'dark)
                    (enable-theme 'solarized)
                    ))
                ))
  (enable-theme 'zenburn))                      ; emacs & emacs -nw
#+END_SRC

**** Transparent

#+BEGIN_SRC emacs-lisp
(set-frame-parameter
    (selected-frame) 'alpha '(98 98))
#+END_SRC

** Development

#+BEGIN_SRC emacs-lisp
(defun modes/prog-mode ()
    "prog-mode hook"
    (setq
        compilation-ask-about-save nil          ; save before compiling
        compilation-always-kill t               ; always kill old compile processes before
                                                ; starting the new one
        compilation-scroll-output 'first-error  ; Automatically scroll to first error
      )
    (dumb-jump-mode)                            ; jump to definition
    (goto-address-prog-mode)                    ; highlight URL
    (push '(">=" . ?≥) prettify-symbols-alist)  ; prettify symbols
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '("delta" . ?Δ) prettify-symbols-alist)
    (prettify-symbols-mode)
    (local-set-key (kbd "RET")
                   'newline-and-indent)

    (defconst intellij-java-style               ; coding style
      '((c-basic-offset . 4)
        (c-comment-only-line-offset . (0 . 0))
        (c-offsets-alist
         .
         ((inline-open . 0)
          (topmost-intro-cont    . +)
          (statement-block-intro . +)
          (knr-argdecl-intro     . +)
          (substatement-open     . +)
          (substatement-label    . +)
          (case-label            . +)
          (label                 . +)
          (statement-case-open   . +)
          (statement-cont        . ++)
          (arglist-intro         . 0)
          (arglist-cont-nonempty . ++)
          (arglist-close         . --)
          (inexpr-class          . 0)
          (access-label          . 0)
          (inher-intro           . ++)
          (inher-cont            . ++)
          (brace-list-intro      . +)
          (func-decl-cont        . ++))))
      "Elasticsearch's Intellij Java Programming Style")
    (c-add-style "intellij" intellij-java-style)
    )
(add-hook 'prog-mode-hook 'modes/prog-mode)
(add-hook 'before-save-hook                     ; remove trailing whitespace
    'delete-trailing-whitespace)
#+END_SRC

*** Git

**** git-gutter

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'git-gutter
    (custom-set-variables                       ; backend
        '(git-gutter:handled-backends
        (quote (git svn))))
    (diminish 'git-gutter-mode)
    )
(dolist (mode-hook '(web-mode-hook
                     org-mode-hook
                     yaml-mode-hook
                     groovy-mode-hook
                     puppet-mode-hook
                     enh-ruby-mode-hook
                     python-mode-hook
                    ))
    (add-hook mode-hook #'git-gutter-mode)
    )
#+END_SRC

**** magit

#+BEGIN_SRC emacs-lisp
(autoload 'magit-status "magit" nil t)
(global-set-key (kbd "C-x g") #'magit-status)
(eval-after-load "magit"
    '(progn
        (setq magit-completing-read-function
                (quote magit-builtin-completing-read)
              magit-diff-refine-hunk t          ; highlight changes
              )
        ;; full screen magit-status
        (defadvice magit-status (around magit-fullscreen activate)
          (window-configuration-to-register :magit-fullscreen)
          ad-do-it
          (delete-other-windows))
        (eval-after-load 'evil-vars '(evil-set-initial-state 'magit-mode 'emacs))
        (eval-after-load 'evil-vars '(evil-set-initial-state 'magit-mode 'emacs))
        ))
#+END_SRC

*** Web

web-mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode ("\\.html\\'" . web-mode)
  :init
  (setq web-mode-indent-style 4                 ; indentation
        web-mode-code-indent-offset 4
        web-mode-css-indent-offset 2
        web-mode-markup-indent-offset 4
        web-mode-block-padding 4
        web-mode-style-padding 4
        web-mode-script-padding 4
        web-mode-enable-css-colorization t
        )
  :config
  (add-to-list (make-local-variable 'company-backends)
               '(company-css company-nxml))
  )
#+END_SRC

*** Scripting

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook                      ; make shell script executable on save
    'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

**** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :defer t
  :diminish eldoc-mode
  :hook ((eval-expression-minibuffer-setup prog-mode) . eldoc-mode) ; show eldoc for 'Eval:'
  :init
  (global-eldoc-mode -1)                                            ; ignore eldoc globally
  :config
  (setq eldoc-idle-delay 0.2)
  )

(use-package lisp-mode
  :config
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook #'eldoc-mode)
  )
#+END_SRC

**** Groovy

#+BEGIN_SRC emacs-lisp
(autoload 'groovy-mode "groovy-mode" nil t)
(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
#+END_SRC

*** Infrastructure

**** yaml

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.ya?ml$"       . yaml-mode)
         ("\\.ya?ml.erb\\'" . yaml-mode)
         ("\\.json\\'"      . yaml-mode)
         ("\\.json.erb\\'"  . yaml-mode))
  )
#+END_SRC

**** js2

#+BEGIN_SRC emacs-lisp
(use-package jinja2-mode :mode ("\\.j2" . jinja2-mode))
#+END_SRC

**** ansiable

#+BEGIN_SRC emacs-lisp
(use-package ansible
  :defer t
  :diminish ansible
  :hook (yaml-mode . ansible)
  )
#+END_SRC

**** es-mode

#+BEGIN_SRC emacs-lisp
(use-package es-mode
  :defer t
  :config
  (setq es-always-pretty-print t)
  )
#+END_SRC

**** puppet-mode

#+BEGIN_SRC emacs-lisp
(use-package puppet-mode :mode ("\\.pp$" . puppet-mode))
#+END_SRC

**** restclient

Explore and test HTTP REST webservices

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode ("\\.\\(http\\|https\\|rest\\)$" . restclient-mode)
  :config
  (defun restclient-ignore-ssl ()
    "Ignore SSL verification. Identical to 'curl -k'"
    (interactive)
    (custom-reevaluate-setting 'gnutls-verify-error)
    (make-local-variable 'gnutls-verify-error)
    (setq gnutls-verify-error nil)
    )
  )
#+END_SRC

**** Terraform

#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :defer t
  :config (setq terraform-indent-level 2)
  )
#+END_SRC

*** DB

#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))         ; no line wrap when working on DB
#+END_SRC

*** C/C++

#+BEGIN_SRC emacs-lisp
(defun modes/c-mode ()
  "c/c++ mode hook"
  (progn
    (setq gdb-many-windows t)                   ; gdb

    (local-set-key (kbd "C-c -")                ; fold tag
                   'senator-fold-tag)
    (local-set-key (kbd "C-c +")
                   'senator-unfold-tag)

    (add-to-list 'company-backends '(company-gtags
                                     company-semantic))
    ))

(dolist
    (hook
     (list
      'c-mode-hook
      'c++-mode-hook
      ))
  (add-hook hook #'modes/c-mode))
#+END_SRC

*** Programming / Scripting

**** Shared Functions

#+BEGIN_SRC emacs-lisp
(dolist
    (mode-hook
     '(dockerfile-mode-hook
       js2-mode-hook
       python-mode-hook
       sh-mode-hook))
  (add-hook mode-hook
    #'(lambda ()
        (defun create-virtualenv (virtualenv-folder setup-cmd requirement-file &optional install-packages)
          "Create a python pip based virtualenv and install packages based on the supplied requirement file"
          (require 'pyvenv)
          (with-eval-after-load 'pyvenv
            (progn
              (defvar python-virtualenv-directory
                (concat backup-directory virtualenv-folder))
              (if (not (file-exists-p python-virtualenv-directory))
                  (progn
                    (make-directory python-virtualenv-directory t)
                    (shell-command
                     (concat
                      "bash" " "
                      (expand-file-name (concat user-emacs-directory setup-cmd)) " "
                      (expand-file-name (concat python-virtualenv-directory)) " "
                      (expand-file-name (concat user-emacs-directory requirement-file))
                      (when install-packages (concat " " install-packages))
                      ))
                    ))
              (pyvenv-activate python-virtualenv-directory)
              (pyvenv-tracking-mode t)
              ))
          ))))
#+END_SRC

**** LSP

Language Server Protocol

#+BEGIN_SRC emacs-lisp
(dolist
    (mode-hook
     '(enh-ruby-mode-hook
       dockerfile-mode-hook
       go-mode-hook
       java-mode-hook
       js2-mode-hook
       python-mode-hook
       sh-mode-hook))
  (add-hook mode-hook
    #'(lambda ()
        (use-package lsp-mode
          :config
          (setq lsp-message-project-root-warning t)
          )

        (use-package lsp-ui
          :after lsp-mode yasnippet
          :bind (:map lsp-ui-mode-map
                 ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                 ([remap xref-find-references]  . lsp-ui-peek-find-references))
          :hook
          ((lsp-mode . lsp-ui-mode))
          :config
          (setq lsp-ui-doc-position 'bottom
                lsp-ui-doc-include-signature t
                lsp-ui-sideline-ignore-duplicate t)

          (add-hook 'lsp-after-open-hook        ; flycheck
                    #'(lambda () (lsp-ui-flycheck-enable 1)))
          (yas-minor-mode)                      ; yasnippet

          ;; redefine the function in lsp-ui-doc
          ;; may need to sync the content with the latest version of lsp-ui-doc.el
          (defun lsp-ui-doc--setup-markdown (mode)
            "Setup the ‘markdown-mode’ in the frame.
MODE is the mode used in the parent frame."
            (make-local-variable 'markdown-code-lang-modes)
            (dolist (mark (alist-get mode lsp-ui-doc-custom-markup-modes))
              (add-to-list 'markdown-code-lang-modes (cons mark mode)))
            (setq-local markdown-fontify-code-blocks-natively nil)
            (setq-local markdown-fontify-code-block-default-mode mode)
            (setq-local markdown-hide-markup t)

            ; lsp-ui-doc is using (markdown-view-mode)
            ; ignore rendering code block for background and text style in order to prevent hard to read rendered texts
            (set-face-attribute 'markdown-code-face nil
                                :inherit 'default
                                :background nil)
            )

          ;; workaroud for misplaced indent guide lines with "indent-guide" & "lsp-ui-sideline"
          ;; https://github.com/emacs-lsp/lsp-ui/issues/32
          (with-eval-after-load 'indent-guide
            (defun indent-guide--make-overlay (line col)
              "draw line at (line, col)"
              (let (diff string ov prop)
                (save-excursion
                  ;; try to goto (line, col)
                  (goto-char (point-min))
                  (forward-line (1- line))
                  (move-to-column col)
                  ;; calculate difference from the actual col
                  (setq diff (- col (current-column)))
                  ;; make overlay or not
                  (cond ((and (eolp) (<= 0 diff))   ; the line is too short
                         ;; <-line-width->  <-diff->
                         ;;               []        |
                         (if (setq ov (cl-some
                                       (lambda (ov)
                                         (when (eq (overlay-get ov 'category) 'indent-guide)
                                           ov))
                                       (overlays-in (point) (point))))
                             ;; we already have an overlay here => append to the existing overlay
                             ;; (important when "recursive" is enabled)
                             (setq string (let ((str (overlay-get ov 'before-string)))
                                            (concat str
                                                    (make-string (- diff (length str)) ?\s)
                                                    indent-guide-char))
                                   ;; prop   'before-string); <--------------
                                   prop   'after-string)    ; <--------------
                           (setq string (concat (make-string diff ?\s) indent-guide-char)
                                 ;; prop   'before-string   ; <--------------
                                 prop   'display            ; <--------------
                                 ov     (make-overlay (point) (point)))))
                        ((< diff 0)                 ; the column is inside a tab
                         ;;  <---tab-width-->
                         ;;      <-(- diff)->
                         ;;     |            []
                         (if (setq ov (cl-some
                                       (lambda (ov)
                                         (when (eq (overlay-get ov 'category) 'indent-guide)
                                           ov))
                                       (overlays-in (1- (point)) (point))))
                             ;; we already have an overlay here => modify the existing overlay
                             ;; (important when "recursive" is enabled)
                             (setq string (let ((str (overlay-get ov 'display)))
                                            (aset str (+ 1 tab-width diff) ?|)
                                            str)
                                   prop   'display)
                           (setq string (concat (make-string (+ tab-width diff) ?\s)
                                                indent-guide-char
                                                (make-string (1- (- diff)) ?\s))
                                 prop   'display
                                 ov     (make-overlay (point) (1- (point))))))
                        ((looking-at "\t")          ; okay but looking at tab
                         ;;    <-tab-width->
                         ;; [|]
                         (setq string (concat indent-guide-char
                                              (make-string (1- tab-width) ?\s))
                               prop   'display
                               ov     (make-overlay (point) (1+ (point)))))
                        (t                          ; okay and looking at a space
                         (setq string indent-guide-char
                               prop   'display
                               ov     (make-overlay (point) (1+ (point))))))
                  (when ov
                    (overlay-put ov 'category 'indent-guide)
                    (overlay-put ov prop
                                 (propertize string 'face 'indent-guide-face))))))
            )
          )

        (use-package lsp-imenu
          :after lsp-mode
          :hook
          ((lsp-after-open . lsp-enable-imenu))
          )

        (use-package company-lsp
          :after lsp-mode company
          :init
          (push 'company-lsp company-backends)
          :config
          (setq company-lsp-enable-recompletion t)
          )
        ))
  )
#+END_SRC

**** Bash

#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :mode (("\\.*bashrc$"      . sh-mode)
         ("\\.*bash_profile" . sh-mode))
  :config
  (add-hook 'sh-mode-hook
    #'(lambda ()
        (setq-default sh-basic-offset 2
                      sh-indentation 2
                      sh-indent-comment t)

        (create-virtualenv "venv-lsp-bash/"     ; bash lsp
                           "bin/venv-nodejs-npm.sh"
                           "bin/nodejs-pip-requirements.txt"
                           "bash-language-server")
        (require 'lsp-bash)
        (lsp-bash-enable)
        ) t)
  )
#+END_SRC

**** Dockerfile

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :defer t
  :config
  (add-hook 'dockerfile-mode-hook
    #'(lambda ()
        (create-virtualenv "venv-lsp-dockerfile/"   ; lsp venv folder
                           "bin/venv-nodejs-npm.sh"
                           "bin/nodejs-pip-requirements.txt"
                           "dockerfile-language-server-nodejs")

        (require 'lsp-dockerfile)               ; LSP
        (lsp-dockerfile-enable)
        ) t)
  )
#+END_SRC

**** Go

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :defer t
  :config
  (add-hook 'go-mode-hook
    #'(lambda ()
        (add-hook 'before-save-hook 'gofmt-before-save)     ; Gofmt format
        (setq indent-tabs-mode 1
              tab-width 4)                                  ; show tab as 4 space width

        ;; Go LSP
        (defvar go-langserver-directory (concat backup-directory "venv-lsp-go"))
        (if (not (file-exists-p go-langserver-directory))
            (progn
              (make-directory go-langserver-directory t)    ; create go-langserver directory
              (when (executable-find "go")
                (shell-command                              ; install go-language lsp
                 (concat
                  "GOPATH=" (expand-file-name go-langserver-directory) " go get -u github.com/sourcegraph/go-langserver"))
                (shell-command                              ; install godoctor
                 (concat
                  "GOPATH=" (expand-file-name go-langserver-directory) " go get -u github.com/godoctor/godoctor"))
                )
              ))

        ; set go-langserver PATH
        (setq exec-path (append (list (concat (expand-file-name go-langserver-directory) "/bin/")) exec-path))
        (setenv "PATH" (concat (expand-file-name go-langserver-directory) "/bin/:" (getenv "PATH")))
        (setenv "GOPATH" (expand-file-name go-langserver-directory))

        (require 'lsp-go)
        (lsp-go-enable)
        ) t)

  (use-package godoctor)                                   ; godoctor - golang refactor
  )
#+END_SRC

**** Java

#+BEGIN_SRC emacs-lisp
(defun modes/java-mode ()
  "java mode hook"
  (progn
    (c-set-style "intellij" t)                  ; code style
    (setq c-basic-offset 2)

    (require 'lsp-java)                         ; LSP
                                                ; check on github on how to install the server
    ; set workspace
    (setq lsp-java-workspace-dir (expand-file-name (concat backup-directory "jdt-workspace/"))
          lsp-java-workspace-cache-dir (expand-file-name (concat lsp-java-workspace-dir ".cache/"))
          lsp-java--workspace-folders
            (list
             ((lambda ()
                (let ((root_dir (locate-dominating-file (expand-file-name (file-name-directory buffer-file-name)) "pom.xml")))
                  (if root_dir
                      (expand-file-name root_dir)
                    (expand-file-name (file-name-directory buffer-file-name))))
                ))
             ))

    (setq lsp-inhibit-message t
          lsp-ui-sideline-update-mode 'point)

    (lsp-java-enable)                           ; make this one the last step
    ))
(add-hook 'java-mode-hook #'modes/java-mode t)
#+END_SRC

**** JavaScript

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :interpreter ("node" . js2-mode)
  :mode (("\\.js\\'" . js2-mode))
  :config
  (add-hook 'js2-mode-hook
    #'(lambda ()
        (setq js2-basic-offset 2
              js2-bounce-indent-p t
              js2-strict-missing-semi-warning nil
              js2-concat-multiline-strings nil
              js2-include-node-externs t
              js2-skip-preprocessor-directives t
              js2-strict-inconsistent-return-warning nil)

        (create-virtualenv "venv-lsp-js/"       ; js lsp venv folder
                           "bin/venv-nodejs-npm.sh"
                           "bin/nodejs-pip-requirements.txt"
                           "typescript,typescript-language-server")

        (require 'lsp-javascript-typescript)    ; lsp
        (setq lsp-javascript-typescript-server
                "typescript-language-server"
              lsp-javascript-typescript-server-args
                '("--stdio" "--tsserver-path=tsserver"))
        (lsp-javascript-typescript-enable)
        ) t)
  )
#+END_SRC

**** Python

#+BEGIN_SRC emacs-lisp
(use-package python
  :interpreter ("python" . python-mode)
  :mode ("\\.py\\'" . python-mode)
        ("\\.wsgi$" . python-mode)
  :config
  (add-hook 'python-mode-hook
    #'(lambda ()
        (setq python-indent-offset 4)           ; tab space

        (create-virtualenv "venv-lsp-python3/"  ; create virtualenv
                           "bin/venv-python3.sh"
                           "bin/python3-pip-requirements.txt")

        (require 'lsp-python)                   ; lsp-python
        (lsp-python-enable)

        (when (executable-find "jupyter")       ; use jupyter via C-c C-p
          (setq python-shell-interpreter "jupyter"
                python-shell-interpreter-args "console --simple-prompt"
                python-shell-prompt-detect-failure-warning nil)
          (add-to-list 'python-shell-completion-native-disabled-interpreters
                       "jupyter")
          )

        (when (eq 1 (point-max))                ; new file template
          (insert
           "#!/usr/bin/env python3\n"
           "\n\n"
           "def main():\n"
           "    pass\n"
           "\n\n"
           "if __name__ == \"__main__\":\n"
           "    main()\n"
           ))

        ;; from https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/python/funcs.el
        (defun python-remove-unused-imports ()
          "Use Autoflake to remove unused function
autoflake --remove-all-unused-imports -i unused_imports.py"
          (interactive)
          (if (executable-find "autoflake")
              (progn
                (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                       (shell-quote-argument (buffer-file-name))))
                (revert-buffer t t t))
            (message "Error: Cannot find autoflake executable.")))
        (local-set-key (kbd "A-M-f") #'(lambda ()
                                         (interactive)
                                         (lsp-format-buffer)                ; built-in lsp-mode formatting
                                         (save-buffer)                      ; work on file only, and need to save the file first
                                         (python-remove-unused-imports))    ; remove unused imports via external cmd
                       )

        ;; from https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/python/funcs.el
        (defun python-toggle-breakpoint ()      ; toggle python breakpoint
          "Add a break point, highlight it."
          (interactive)
          (let ((trace (cond ((executable-find "wdb") "import wdb; wdb.set_trace()")
                             ((executable-find "ipdb") "import ipdb; ipdb.set_trace()")
                             ((executable-find "pudb") "import pudb; pudb.set_trace()")
                             ((executable-find "ipdb3") "import ipdb; ipdb.set_trace()")
                             ((executable-find "pudb3") "import pudb; pudb.set_trace()")
                             (t "import pdb; pdb.set_trace()")))
                (line (thing-at-point 'line)))
            (if (and line (string-match trace line))
                (kill-whole-line)
              (progn
                (back-to-indentation)
                (insert trace)
                (insert "\n")
                (python-indent-line)))))
        (local-set-key (kbd "<f9>") #'python-toggle-breakpoint) ; insert breakpoint
        ) t)
  )
#+END_SRC

**** Ruby

#+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode
  :mode
  (("\\.rb\\'"       . enh-ruby-mode)
   ("\\.rake\\'"     . enh-ruby-mode)
   ("Rakefile\\'"    . enh-ruby-mode)
   ("\\.gemspec\\'"  . enh-ruby-mode)
   ("\\.ru\\'"       . enh-ruby-mode)
   ("Gemfile\\'"     . enh-ruby-mode)
   ("Cheffile\\'"    . enh-ruby-mode)
   ("Vagrantfile\\'" . enh-ruby-mode))
  :config
  (setq enh-ruby-add-encoding-comment-on-save nil
        rspec-compilation-buffer-name "*rspec-compilation*"
        rspec-use-opts-file-when-available nil
        rspec-use-rake-when-possible nil
        ruby-insert-encoding-magic-comment nil)

  (add-hook 'enh-ruby-mode-hook                         ; LSP
            #'(lambda ()
                (defvar ruby-workspace-directory        ; ruby language server
                  (expand-file-name (concat backup-directory "venv-lsp-ruby/")))
                (defvar ruby-version "2.4.2")           ; ruby version
                (if (not (file-exists-p ruby-workspace-directory))
                    (progn
                      (make-directory
                       ruby-workspace-directory t)      ; create a directory for ruby lsp server
                      (when (executable-find "rbenv")
                        (append-to-file ruby-version    ; define ruby version in the workspace directory
                                        nil
                                        (expand-file-name (concat ruby-workspace-directory ".ruby-version")))
                        (copy-file                      ; create Gemfile for ruby lsp
                         (expand-file-name (concat user-emacs-directory "bin/Gemfile.rubylsp.template"))
                         (expand-file-name (concat ruby-workspace-directory "Gemfile")) )
                        (shell-command                  ; install ruby lsp
                         (concat "rbenv install -s " ruby-version " && cd " (expand-file-name ruby-workspace-directory) " && rbenv exec bundle install --path vendor/bundle/ && rbenv exec bundle exec solargraph download-core"))
                        )
                      )
                  )

                (setq exec-path (append (list (concat (expand-file-name "~/.rbenv/versions/") ruby-version  "/bin/")) exec-path))
                (setenv "PATH" (concat (expand-file-name "~/.rbenv/versions/") ruby-version  "/bin/:" (getenv "PATH")))
                (setenv "BUNDLE_GEMFILE" (concat (expand-file-name ruby-workspace-directory) "Gemfile"))

                (require 'lsp-ruby)
                (lsp-ruby-enable)
                ) t)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package inf-ruby
  :after enh-ruby-mode
  :hook (compilation-filter . inf-ruby-auto-enter)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rspec-mode
  :after enh-ruby-mode
  :diminish rspec-mode
  :hook (enh-ruby-mode . rspec-mode)
  )
#+END_SRC

** Mode Setting

*** avy

Char-based jumping

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind (([remap goto-char] . avy-goto-char-2))
  :commands avy-goto-char-2
  )
#+END_SRC

*** bm                                          :BOOKMARK:

Visible bookmarks

#+BEGIN_SRC emacs-lisp
(use-package bm
  :defer 2
  :init
  (setq bm-repository-file
        (concat backup-directory "bm-repository"))
  (setq bm-restore-repository-on-load t)        ; restore on load
  :config
  (setq bm-cycle-all-buffers t)                 ; cycle through bookmarks in all open buffers
  (setq-default bm-buffer-persistence t)        ; save/load/restore bookmarks
  (add-hook' after-init-hook #'bm-repository-load)
  (add-hook 'find-file-hooks #'bm-buffer-restore)
  (add-hook 'kill-buffer-hook #'bm-buffer-save)
  (add-hook 'kill-emacs-hook #'(lambda nil
                                 (bm-buffer-save-all)
                                 (bm-repository-save)))
  (add-hook 'after-save-hook #'bm-buffer-save)
  (add-hook 'find-file-hooks   #'bm-buffer-restore)
  (add-hook 'after-revert-hook #'bm-buffer-restore)
  )
#+END_SRC

*** company mode

#+BEGIN_SRC emacs-lisp
(use-package company
  :bind (([remap hippie-expand] . company-complete))
  :diminish company-mode
  :hook ((prog-mode) . company-mode)
  :config
  (setq-default
       company-backends                         ; default backends
         '((company-abbrev
            company-dabbrev
            company-dabbrev-code
            company-files
            company-ispell
            company-keywords                    ; keywords
            company-yasnippet
            ))
       company-global-modes '(not eshell-mode)
       company-idle-delay 0.25                  ; delay before autocompletion popup shows
       company-minimum-prefix-length 2
       company-tooltip-align-annotations t
       company-tooltip-limit 10                 ; popup window size
       company-tooltip-flip-when-above   t      ; flip the popup menu when near the bottom of windows
       company-selection-wrap-around t          ; loop over candidates
       company-show-numbers t                   ; show number
       company-begin-commands
         '(self-insert-command)                 ; start autocompletion only after typing
       company-dabbrev-downcase nil             ; do not change case in dabbrev
       company-dabbrev-ignore-case t
       company-dabbrev-other-buffers t
       company-transformers '(company-sort-by-occurrence)
       )
    )
#+END_SRC

*** diminish

shorten mode-line

#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

*** drag-stuff                                  :EDIT:

moving word/line/region around

#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :defer 2
  :diminish drag-stuff-mode
  :hook ((prog-mode org-mode text-mode) . drag-stuff-mode)
  :config
  (setq drag-stuff-modifier 'alt)               ; alt-up/down/left/rigth key bindings
  (drag-stuff-define-keys)
  )
#+END_SRC

*** erc                                         :IRC:

#+BEGIN_SRC emacs-lisp
(autoload 'define-erc-response-handler "erc-backend" nil t)
(with-eval-after-load `erc
  (progn
    (setq erc-server  "irc.freenode.net"        ; default to freenode.net
          erc-port    "6697"
          erc-nick my-erc-nick
          erc-user-full-name my-erc-user-full-name
          erc-email-userid my-erc-email-userid
          erc-hide-list                         ; hide unwanted messages
          '("JOIN" "PART" "QUIT")
          erc-interpret-mirc-color t            ; color highlighting
          erc-rename-buffers t                  ; Rename buffers to the current network name instead of SERVER:PORT
          erc-server-coding-system              ; always utf-8
          '(utf-8 . utf-8)
          erc-log-mode t                        ; enable logging
          erc-generate-log-file-name-function
          (quote erc-generate-log-file-name-with-date)
          erc-hide-timestamps t                 ; hide logging timestamp when chatting
          erc-log-channels-directory            ; directory
          (concat backup-directory "erc.logs/")
          erc-log-insert-log-on-open nil        ; ignore previous messages
          erc-log-file-coding-system 'utf-8-unix
          erc-button-url-regexp                 ; Button URL
            "\\([-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]+\\.\\)+[-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]*[-a-zA-Z0-9\\/]"
          erc-prompt (lambda () (concat "[" (buffer-name) "]"))
          erc-auto-discard-away t               ; autoaway
          erc-autoaway-idle-seconds 600
          erc-autoaway-use-emacs-idle t
          erc-query-display 'buffer             ; open query in the current window
          )
    (erc-log-mode)
    (erc-truncate-mode +1)                      ; truncate long irc buffers
    (require 'erc-sasl)                         ; sasl
    (add-to-list 'erc-sasl-server-regexp-list "irc\\.freenode\\.net")

    ;; for erc-sasl
    (defun erc-login ()
      "Perform user authentication at the IRC server."
      (erc-log (format "login: nick: %s, user: %s %s %s :%s"
                       (erc-current-nick)
                       (user-login-name)
                       (or erc-system-name (system-name))
                       erc-session-server
                       erc-session-user-full-name))
      (if erc-session-password
          (erc-server-send (format "PASS %s" erc-session-password))
        (message "Logging in without password"))
      (when (and (featurep 'erc-sasl) (erc-sasl-use-sasl-p))
        (erc-server-send "CAP REQ :sasl"))
      (erc-server-send (format "NICK %s" (erc-current-nick)))
      (erc-server-send
       (format "USER %s %s %s :%s"
               (if erc-anonymous-login erc-email-userid (user-login-name))
               "0" "*"
               erc-session-user-full-name))
      (erc-update-mode-line))
    ))
#+END_SRC

*** evil

vi layer for Emacs

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :defer t
  :config
  (evilnc-default-hotkeys t)                    ; enable recommended key bindings under non-evil (Emacs) mode only
  (general-define-key
    :states '(normal visual motion insert emacs)
    :keymaps 'override
    :prefix ","
    :non-normal-prefix "C-x ,"
    "ncl" 'evilnc-comment-or-uncomment-lines
    "nct" 'evilnc-quick-comment-or-uncomment-to-the-line
    "ncy" 'evilnc-copy-and-comment-lines
    "ncp" 'evilnc-comment-or-uncomment-paragraphs
    "ncr" 'comment-or-uncomment-region
    "nci" 'evilnc-toggle-invert-comment-line-by-line
    "nco" 'evilnc-comment-operator
    "ncc" 'evilnc-copy-and-comment-operator)
  )

(use-package evil-surround
  :defer t
  :config (global-evil-surround-mode)
  )

(use-package evil
  :bind ("C-z" . evil-exit-emacs-state)
  :init
  (setq evil-search-module 'evil-search
        evil-split-window-below t
        evil-vsplit-window-right t)
  :config
  (evil-mode)
  (setq evil-default-state 'emacs)              ; default to emacs

  (eval-when-compile (require 'evil-nerd-commenter))
  (eval-when-compile (require 'evil-surround))
  )
#+END_SRC

*** elfeed                                      :RSS_FEED:

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :bind ("C-x w" . elfeed)
  :init (setf url-queue-timeout 30)
  :config
  (setq elfeed-db-directory
        (let
            ((elfeed_db
              (concat backup-directory
                      "elfeed_db/")))           ; must end with /
          (make-directory elfeed_db :parents)
          elfeed_db)
        my-elfeed-timer                         ; 1hr update timer
        (run-at-time t (* 60 60) #'elfeed-update)
        elfeed-feeds
        '(("http://www.reddit.com/r/devops/.rss" devops reddit)
          ("http://feeds.dzone.com/devops" devops dzone)
          ("https://www.infoq.com/feed/devops/news" devops infoq)
          ("http://www.reddit.com/r/emacs/.rss" emacs reddit)
          )
        )
  )
#+END_SRC

*** expand-region                               :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region)
  :commands er/expand-region
  )
#+END_SRC

*** general                                     :KEYBIND:

define keymap

#+BEGIN_SRC emacs-lisp
(use-package general
  :defer 1
  )
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :hook (prog-mode . flycheck-mode)
  :config
  (setq flycheck-check-syntax-automatically
        '(save
          idle-change
          mode-enabled)
        flycheck-idle-change-delay
        (if flycheck-current-errors 0.5 30.0)
        )
  (flymake-mode -1)                             ; disable flymake
  )
#+END_SRC

*** indent-guide                                :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :diminish indent-guide-mode
  :hook ((prog-mode org-mode) . indent-guide-mode)
  :config
  (set-face-foreground 'indent-guide-face "lightslategrey")
  (setq indent-guide-char "¦"
        indent-guide-delay 0.3
        indent-guide-recursive t)
  )
#+END_SRC

*** multiple-cursors                            :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C-c m l" . mc/edit-lines)
         ("C-c m b" . mc/edit-beginnings-of-lines)
         ("C-c m e" . mc/edit-ends-of-lines)
         ("C-c m >" . mc/mark-next-like-this)
         ("C-c m <" . mc/mark-previous-like-this)
         ("C-c m a" . mc/mark-all-like-this)
         ("C-c m r" . set-rectangular-region-anchor))
  )
#+END_SRC

*** mwim                                        :EDIT:

move where I mean

#+BEGIN_SRC emacs-lisp
(use-package misc
  :bind (("C-a" . mwim-beginning-of-code-or-line)
         ("C-e" . mwim-end-of-code-or-line))
  :commands (mwim-beginning-of-code-or-line mwim-end-of-code-or-line)
  )
#+END_SRC

*** Treemacs                                    :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :bind (:map global-map
         ("M-0" . treemacs-select-window)
         ("C-x t 1" . treemacs-delete-other-windows)
         ("C-x t t" . treemacs)
         ("C-x t B" . treemacs-bookmark)
         ("C-x t C-t" . treemacs-find-file)
         ("C-x t M-t" . treemacs-find-tag))
  :config
  (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
        treemacs-file-event-delay           5000
        treemacs-follow-after-init          t
        treemacs-follow-recenter-distance   0.1
        treemacs-goto-tag-strategy          'refetch-index
        treemacs-indentation                2
        treemacs-indentation-string         " "
        treemacs-is-never-other-window      nil
        treemacs-no-png-images              nil
        treemacs-project-follow-cleanup     nil
        treemacs-recenter-after-file-follow nil
        treemacs-recenter-after-tag-follow  nil
        treemacs-show-hidden-files          t
        treemacs-silent-filewatch           nil
        treemacs-silent-refresh             nil
        treemacs-sorting                    'alphabetic-desc
        treemacs-tag-follow-cleanup         t
        treemacs-tag-follow-delay           1.5
        treemacs-width                      35)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (pcase (cons (not (null (executable-find "git")))
               (not (null (executable-find "python3"))))
    (`(t . t)
     (treemacs-git-mode 'extended))
    (`(t . _)
     (treemacs-git-mode 'simple)))
  )

(use-package treemacs-projectile
  :bind (:map global-map
         ("C-x t p" . treemacs-projectile))
  )
#+END_SRC

*** smartparens                                 :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :hook (((prog-mode org-mode) . smartparens-mode)
         ((prog-mode org-mode) . show-smartparens-mode))
  :config
  (use-package smartparens-config)
  (setq sp-show-pair-from-inside t)             ; shown inside the matching paren delimiter
  (set-face-attribute 'sp-show-pair-match-face nil
                      :background "#767676" :foreground "#00cd00"
                      :weight 'bold)
  )
#+END_SRC

*** symon                                       :MONITOR:

Tiny system monitor

#+BEGIN_SRC emacs-lisp
(use-package symon
  :defer 3
  :config
  (setq symon-sparkline-type 'bounded)
  (define-symon-monitor symon-current-date-time-monitor
    :interval 5
    :display (propertize
              (format-time-string "%k:%M %:z %d %b %Y %a      ")
              'face 'font-lock-type-face))
  (setq symon-monitors
        (cond ((memq system-type '(gnu/linux cygwin))
               '(symon-current-date-time-monitor
                 symon-linux-memory-monitor
                 symon-linux-cpu-monitor
                 symon-linux-network-rx-monitor
                 symon-linux-network-tx-monitor
                 symon-linux-battery-monitor))
              ((memq system-type '(darwin))
               '(symon-current-date-time-monitor
                 symon-darwin-memory-monitor
                 symon-darwin-cpu-monitor
                 symon-darwin-network-rx-monitor
                 symon-darwin-network-tx-monitor
                 symon-darwin-battery-monitor))
              ((memq system-type '(windows-nt))
               '(symon-current-date-time-monitor
                 symon-windows-memory-monitor
                 symon-windows-cpu-monitor
                 symon-windows-network-rx-monitor
                 symon-windows-network-tx-monitor
                 symon-windows-battery-monitor))))
  (symon-mode)
  )
#+END_SRC

*** subword                                     :EDIT:

navigate into CamelCaseWords

#+BEGIN_SRC emacs-lisp
(use-package subword
  :defer 2
  :diminish subword-mode
  :hook ((prog-mode org-mode) . subword-mode)
  )
#+END_SRC

*** super-save                                  :EDIT:

auto-save buffers

#+BEGIN_SRC emacs-lisp
(use-package super-save
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)
  )
#+END_SRC

*** undo-tree                                   :EDIT:

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer 1
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-diff t
        undo-tree-visualizer-timestamps t
        undo-tree-history-directory-alist
        `((".*" . ,backup-directory))
        undo-tree-auto-save-history t)
  )
#+END_SRC

*** vimish-fold                                 :EDIT:

vim-like text folding

#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
  :bind (("C-c v f" . vimish-fold)
         ("C-c v d" . vimish-fold-delete)
         ("C-c v t" . vimish-fold-toggle)
         ("C-c v a" . vimish-fold-avy))
  )
#+END_SRC

*** which-key

Display the key bindings in a popup.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :defer 2
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 2.0)               ; popup delay
  (which-key-setup-side-window-right-bottom)
  )
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook
          #'(lambda ()
              (use-package yasnippet
                :diminish yas-minor-mode
                )
              ))
#+END_SRC

**** ztree                                      :EDIT:

Diff between directories

#+BEGIN_SRC emacs-lisp
(use-package ztree
  :defer t
  :config
  (setq ztree-draw-unicode-lines t)
  )
#+END_SRC

*** Helm                                        :EDIT:

**** helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :bind (("C-x b"   . helm-mini)                        ; remap switch-to-buffer
         ("C-x C-b" . helm-mini)                        ; remap list-buffer
         ("C-x C-f" . helm-find-files)                  ; remap find-file
         ([remap apropos-command] . helm-apropos)       ; C-h a
         ([remap dabbrev-expand]  . helm-dabbrev)       ; M-/
         ([remap occur]           . helm-occur)         ; M-s o
         ([remap execute-extended-command] . helm-M-x)  ; M-x
         ([remap yank-pop] . helm-show-kill-ring)       ; M-y
         )
  :diminish helm-mode
  :config
  (helm-mode 1)
  (helm-adaptive-mode 1)
  (helm-autoresize-mode 1)                      ; buffer window resizing
  (setq helm-buffers-fuzzy-matching t           ; fuzzy matching when non-nil
        helm-mode-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-apropos-fuzzy-match t
        helm-lisp-fuzzy-completion t
        helm-imenu-fuzzy-match t
        helm-completion-in-region-fuzzy-match t
        helm-M-x-fuzzy-match t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-adaptive-history-file
            (expand-file-name "helm-adaptive-history" backup-directory)
        helm-candidate-number-limit 100         ; candidate limit
        helm-ff-search-library-in-sexp t        ; search for library in `require' and `declare-function' sexp
        helm-move-to-line-cycle-in-source t     ; move to end or beginning of source when reaching top or bottom of source
        helm-quick-update t                     ; do not display invisible candidates
        helm-split-window-inside-p t            ; open helm buffer inside current window, not occupy whole other window
        )
  (add-hook 'eshell-mode-hook                   ; eshell
            #'(lambda ()
                (define-key eshell-mode-map
                  [remap eshell-pcomplete]
                  'helm-esh-pcomplete)))
  )
#+END_SRC

**** swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper-helm
  :bind (([remap isearch-forward]  . swiper-helm)   ; C-s
         ([remap isearch-backward] . swiper-helm))  ; C-r
  :config
  (eval-when-compile (require 'helm))
  )
#+END_SRC

*** Ivy                                         :EDIT:

**** ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (:map ivy-minibuffer-map
         ("C-m" . ivy-alt-done))                ; use 'Enter' on a directory to navigate into the directory, not open it with dired
  :diminish ivy-mode
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
        ivy-count-format "%d/%d "               ; show currnet and total number
        ivy-display-style nil
        ivy-minibuffer-faces nil
        ivy-re-builders-alist                   ; ivy fuzzy matching everywhere other than in swiper
        '((swiper . regexp-quote)
          (t      . ivy--regex-fuzzy)))
  )
#+END_SRC

**** counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("C-c i g" . counsel-git)
         ("C-c i j" . counsel-git-grep)
         ("C-c i a" . counsel-ag)
         ([remap describe-bindings] . counsel-descbinds)
         ([remap describe-function] . counsel-describe-function)
         ([remap describe-variable] . counsel-describe-variable))
  )
#+END_SRC

**** projectile

#+BEGIN_SRC emacs-lisp
(dolist (mode-hook '(prog-mode-hook))
  (add-hook mode-hook
    (lambda ()
      (use-package projectile
        :defer t
        :init
        (setq projectile-keymap-prefix (kbd "C-c i C-p"))   ; prefix
        :config
        (setq
            projectile-completion-system 'ivy               ; via ivy backend
            projectile-enable-caching t                     ; enable caching unconditionally
            projectile-file-exists-remote-cache-expire nil  ; disable remote file exists cache
            projectile-known-projects-file (expand-file-name
                                            "projectile-bookmarks.eld" backup-directory)
            projectile-remember-window-configs t
            projectile-switch-project-action 'counsel-projectile-find-file-or-buffer
            projectile-cache-file (expand-file-name         ; Projectile cache file
                                   "projectile.cache" backup-directory)
            projectile-sort-order 'modification-time
            projectile-globally-ignored-directories (append
                                                     '(".metadata") projectile-globally-ignored-directories)
            projectile-globally-ignored-files (append
                                               '(".DS_Store") projectile-globally-ignored-files)
            )
        (setq-default
         projectile-mode-line
         '(:eval
           (if (file-remote-p default-directory)
	             " Pr"
             (format " Proj[%s]" (projectile-project-name)))))
        (cond
         ((executable-find "ag")
          (setq projectile-generic-command
                (concat "ag -0 -l --nocolor"
                        ; https://github.com/ggreer/the_silver_searcher/issues/1060
                        (mapconcat #'identity (cons "" projectile-globally-ignored-directories) " --ignore /")
                        (mapconcat #'identity (cons "" projectile-globally-ignored-directories) " --ignore /**/")))))
        (if (eq system-type 'windows-nt)                    ; external indexing under windows
            (setq projectile-indexing-method 'alien))
        )

      (use-package counsel-projectile
        :bind ("C-c i p" . counsel-projectile)
        :config
        (counsel-projectile-mode)
        )
      )))
#+END_SRC

*** Org                                         :ORG:

**** org-mode

#+BEGIN_SRC emacs-lisp
(defun modes/org-mode ()
    "org-mode hook"
    (progn
        (setq truncate-lines nil                ; line wrap
              org-edit-src-content-indentation 0; no indentation in SRC block
              org-export-with-smart-quotes t
              org-log-done 'time
              org-html-doctype "html5"
              org-pretty-entities t             ; show symbols without math delimiters
              org-src-preserve-indentation t
              org-src-fontify-natively t        ; native fontification
              org-src-tab-acts-natively t       ; mative tab in SRC block
              org-use-speed-commands t          ; speed keys
              )
        (org-indent-mode t)                     ; list-oriented
        (diminish 'org-indent-mode)
        (setq org-startup-indented t
              org-hide-leading-stars t
              )
        (global-set-key (kbd "C-c o b") 'org-switchb)
    ))
(add-hook 'org-mode-hook 'modes/org-mode)
(add-hook 'org-shiftup-final-hook 'windmove-up) ; active windmove
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
(with-eval-after-load 'org
  (org-defkey org-mode-map [remap imenu] #'helm-org-in-buffer-headings)

  ;; recompile README.org/.el/.elc
  (add-hook 'after-save-hook
            #'(lambda ()
                "Load and compile README.org"
                (when (equal (buffer-file-name) (expand-file-name (concat user-emacs-directory "README.org")))
                  (org-babel-tangle nil (expand-file-name (concat user-emacs-directory "README.el")) "emacs-lisp")
                  (byte-compile-file (expand-file-name (concat user-emacs-directory "README.el"))))
                ))
  )
#+END_SRC

**** org-page

Static site generator in org-mode

Two stpes to write a blog
- op/new-post
- op/do-publication

#+BEGIN_SRC emacs-lisp
(autoload 'op/new-repository "org-page" nil t)
(autoload 'op/new-post "org-page" nil t)
(autoload 'op/do-publication "org-page" nil t)
(with-eval-after-load 'org-page
  (progn
    (setq op/repository-directory "~/repos/public/yang-l.github.io"
          op/site-domain "http://yang-l.github.io/"
          op/personal-github-link "https://github.com/yang-l"
          op/site-main-title "@Home"
          op/site-sub-title ""
          )))
#+END_SRC

** Research

*** AUCTex                                      :DISABLED:
#+BEGIN_SRC emacs-lisp
;; (when (locate-library "auctex") (progn
;;     (defun modes/auctex-mode ()
;;         "auctex-mode hook"
;;         ;; set latexmk the default LaTeX compiler
;;         (push
;;          '("Latexmk" "latexmk -outdir=/tmp/emacs/latex -bibtex -pdf -pv %s" TeX-run-command nil t
;;            :help "Run Latexmk on file")
;;          TeX-command-list)
;;         (setq TeX-command-default "Latexmk")

;;         ;; auto directory for auto-generated info
;;         (setq TeX-auto-local "/tmp/emacs/latex/auctex-auto/")
;;         (setq TeX-parse-self t) ; enable parse on load
;;         (setq TeX-auto-save t) ; enable parse on save

;;         (setq-default TeX-master nil)
;;         (setq TeX-save-query nil) ; autosave before compiling

;;         (TeX-fold-mode 1) ; enable code folding
;;         (TeX-fold-buffer)

;;         ;; smart quotes
;;         (setq TeX-open-quote "<<")
;;         (setq TeX-close-quote ">>")

;;         ;; detect master files
;;         (defun guess-TeX-master (filename)
;;           "Guess the master file for FILENAME from currently open .tex files."
;;           (let ((candidate nil)
;;                 (filename (file-name-nondirectory filename)))
;;             (save-excursion
;;               (dolist (buffer (buffer-list))
;;                 (with-current-buffer buffer
;;                   (let ((name (buffer-name))
;;                         (file buffer-file-name))
;;                     (if (and file (string-match "\\.tex$" file))
;;                         (progn
;;                           (goto-char (point-min))
;;                           (if (re-search-forward (concat "\\\\input{" filename "}") nil t)
;;                               (setq candidate file))
;;                           (if (re-search-forward (concat "\\\\include{" (file-name-sans-extension filename) "}") nil t)
;;                               (setq candidate file))))))))
;;             (if candidate
;;                 (message "TeX master document: %s" (file-name-nondirectory candidate)))
;;             candidate))
;;         (setq TeX-master (guess-TeX-master (buffer-file-name))))
;;     (add-hook 'LaTeX-mode-hook 'modes/auctex-mode)

;;     ;; activate the Ref mode
;;     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)     ; with AUCTeX LaTeX mode

;;     (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)    ; auctex LaTeX math mode
;;     (add-hook 'LaTeX-mode-hook 'visual-line-mode)   ; with AUCTeX LaTeX mode

;;     ;; enable flyspell-mode
;;     (add-hook 'LaTeX-mode-hook 'flyspell-mode)

;;     ;; activate syntax highlighting - font-lock-mode
;;     (add-hook 'LaTeX-mode-hook 'turn-on-font-lock)

;;     ;; AUCTEX / EMACS / EVINCE - Forward & Inverse Search
;;     (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
;;     (setq TeX-source-correlate-method 'synctex)
;;     (setq TeX-source-correlate-start-server t)

;;     ;; evince(pdf) -> emacs(latex) search - inverse search
;;     ;; ctrl + mouse right button in evince
;;     ;;(defun un-urlify (fname-or-url)
;;     ;;  "A trivial function that replaces a prefix of file:/// with just /."
;;     ;;  (if (string= (substring fname-or-url 0 8) "file:///")
;;     ;;      (substring fname-or-url 7)
;;     ;;    fname-or-url))

;;     (defun th-evince-sync (file linecol &rest ignored)
;;       (let* ((fname (un-urlify file))
;;              (buf (find-file fname))
;;              (line (car linecol))
;;              (col (cadr linecol)))
;;         (if (null buf)
;;             (message "[Synctex]: %s is not opened..." fname)
;;           (switch-to-buffer buf)
;;           (with-no-warnings
;;             (goto-line (car linecol)))
;;           (unless (= col -1)
;;             (move-to-column col)))))

;;     (defvar *dbus-evince-signal* nil)

;;     (defun enable-evince-sync ()
;;       (eval-when-compile (require 'dbus))
;;       (when (and
;;              (eq window-system 'x)
;;              (fboundp 'dbus-register-signal))
;;         (unless *dbus-evince-signal*
;;           (setf *dbus-evince-signal*
;;                 (dbus-register-signal
;;                  :session nil "/org/gnome/evince/Window/0"
;;                  "org.gnome.evince.Window" "SyncSource"
;;                  'th-evince-sync)))))
;;     (add-hook 'LaTeX-mode-hook 'enable-evince-sync)

;;     ;; emacs(latex) -> evince(pdf) - forward search
;;     ;; c-c c-c -> View -> pdf-forward-search in emacs
;;     (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
;;     (add-hook 'LaTeX-mode-hook (lambda()
;;     ;; https://github.com/MassimoLauria/dotemacs/blob/42fd1978da3780df725198862fa9f28c0ac4218c/init-latex.le
;;     ;; https://gist.github.com/2297447

;;     ;; http://tex.stackexchange.com/a/78051
;;     ;; un-urlify and urlify-escape-only should be improved to handle all special characters, not only spaces.
;;     ;; The fix for spaces is based on the first comment on http://emacswiki.org/emacs/AUCTeX#toc20
;;     (defun un-urlify (fname-or-url)
;;       "Transform file:///absolute/path from Gnome into /absolute/path with very limited support for special characters"
;;       (if (string= (substring fname-or-url 0 8) "file:///")
;;           (url-unhex-string (substring fname-or-url 7))
;;         fname-or-url))

;;     (defun urlify-escape-only (path)
;;       "Handle special characters for urlify"
;;       (replace-regexp-in-string " " "%20" path))

;;     (defun urlify (absolute-path)
;;       "Transform /absolute/path to file:///absolute/path for Gnome with very limited support for special characters"
;;       (if (string= (substring absolute-path 0 1) "/")
;;           (concat "file://" (urlify-escape-only absolute-path))
;;         absolute-path))

;;     ;; universal time, need by evince
;;     (defun utime ()
;;       (let ((high (nth 0 (current-time)))
;;             (low (nth 1 (current-time))))
;;         (+ (* high (lsh 1 16) ) low)))

;;     ;; Forward search.
;;     ;; Adapted from http://dud.inf.tu-dresden.de/~ben/evince_synctex.tar.gz
;;     (defun auctex-evince-forward-sync (pdffile texfile line)
;;       (let ((dbus-name
;;              (dbus-call-method :session
;;                                "org.gnome.evince.Daemon"  ; service
;;                                "/org/gnome/evince/Daemon" ; path
;;                                "org.gnome.evince.Daemon"  ; interface
;;                                "FindDocument"
;;                                (urlify pdffile)
;;                                t     ; Open a new window if the file is not opened.
;;                                )))
;;         (dbus-call-method :session
;;                           dbus-name
;;                           "/org/gnome/evince/Window/0"
;;                           "org.gnome.evince.Window"
;;                           "SyncView"
;;                           (urlify-escape-only texfile)
;;                           (list :struct :int32 line :int32 1)
;;                           (utime))))

;;     (defun pdf-forward-search ()
;;       (let (
;;             (pdf (concat "/tmp/emacs/latex/" (TeX-master-file (TeX-output-extension))))
;;             (tex (buffer-file-name))
;;             (line (line-number-at-pos)))
;;         (auctex-evince-forward-sync pdf tex line)))

;;     ;; PDF forward search : emacs -> dbus -> evince
;;     (setq TeX-view-program-list '())
;;     (add-to-list 'TeX-view-program-list
;;                  '("EvinceForward" pdf-forward-search))

;;     (setq TeX-view-program-selection '())
;;     (add-to-list 'TeX-view-program-selection
;;                  '(output-pdf "EvinceForward"))
;;     ))))
#+END_SRC

*** Maxima                                      :DISABLED:

#+BEGIN_SRC emacs-lisp
;; (when (locate-library "maxima")
;;     (autoload 'maxima-mode "maxima" nil t)
;;     (setq auto-mode-alist (cons '("\\.ma?[cx]" . maxima-mode) auto-mode-alist))
;;     )
#+END_SRC

*** Octave                                      :DISABLED:

#+BEGIN_SRC emacs-lisp
;; (autoload 'octave-mode "octave-mod" nil t)
;; (setq auto-mode-alist (append '(("\\.m$" . octave-mode)) auto-mode-alist))

;; (with-eval-after-load 'octave-mod
;;     '(progn
;;         (abbrev-mode 1)
;;         (auto-fill-mode 1)
;;         (if (eq window-system 'x)
;;             (font-lock-mode 1))

;;         (run-octave)

;;         (add-hook 'inferior-octave-mode-hook
;;             (lambda ()
;;                 (turn-on-font-lock)
;;                 (define-key inferior-octave-mode-map [up]
;;                   'comint-previous-input)
;;                 (define-key inferior-octave-mode-map [down]
;;                   'comint-next-input)))
;;         ))
#+END_SRC

** Useful Functions

*** Indentation

#+BEGIN_SRC emacs-lisp
(defun indent-whole-buffer ()                   ; indentation
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
(defun indent-current-paragraph ()              ; code cleanup
  "indent current paragraph"
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (mark-paragraph)
    (indent-region (region-beginning) (region-end) nil)))
#+END_SRC

*** Line Indent

#+BEGIN_SRC emacs-lisp
(defun indent-text (distance)
  (if (use-region-p)
      (let ((mark (mark)))
        (save-excursion
          (indent-rigidly (region-beginning)
                          (region-end)
                          distance)
          (push-mark mark t t)
          (setq deactivate-mark nil)))
    (indent-rigidly (line-beginning-position)
                    (line-end-position)
                    distance)))

(defun inc-line-indent (count)
  (interactive "p")
  (indent-text count))

(defun dec-line-indent (count)
  (interactive "p")
  (indent-text (- count)))

(global-set-key (kbd "C-c > >") #'(lambda () (interactive) (inc-line-indent 4)))
(global-set-key (kbd "C-c < <") #'(lambda () (interactive) (dec-line-indent 4)))
#+END_SRC

*** File Format Convertion

#+BEGIN_SRC emacs-lisp
(defun dos2unix ()                              ; EoL conversion
  "dos2unix on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'unix))
(defun unix2dos ()
  "unix2dos on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'dos))
#+END_SRC

*** Copy N Paste                                :EDIT:

Selective copy and paste

#+BEGIN_SRC emacs-lisp
;; require xsel
(defun copy-to-clipboard ()
  (interactive)
  (if (display-graphic-p)
      (progn
        (message "Yanked region to x-clipboard!")
        (call-interactively 'clipboard-kill-ring-save)
        )
    (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))
  )

(defun paste-from-clipboard ()
  (interactive)
  (if (display-graphic-p)
      (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "xsel -o -b"))
    )
  )
#+END_SRC

*** Dired                                       :FILE:

File manager

#+BEGIN_SRC emacs-lisp
(defun dired-open-home ()
  (interactive)
  (dired "~/")
  )
#+END_SRC
* Tips

** Keybindings

| keybindings                       | alternative | mode          | description                         |
|-----------------------------------+-------------+---------------+-------------------------------------|
| =C-u 4 C-x Tab= / =C-4 C-x Tab=   | =C-c > >=   | buildin       | indent the region by =4= spaces     |
| =C-u -4 C-x Tab= / =C--4 C-x Tab= | =C-c < <=   | buildin       | un-indent the region by =4= spaces  |
| =C-x SPC=                         |             | buildin       | rectangular selection               |
| =C-x r t=                         |             | buildin       | replace rectangule content          |
| =C-c '​=                           |             | org           | edit SRC block in separate buffer   |
| =S-<arrow>=                       | =C-x o=     | buildin       | move point between windows          |
| =M-<num>=                         |             | window-number | jump to window by number            |
| =C-S-Backspace=                   | =C-a C-k=   | buildin       | delete a whole line                 |
| =C-x z=                           |             | buildin       | repeat last command                 |
| =z=                               |             | buildin       | repeat last command again           |
| =M-<=                             |             | buildin       | top of buffer                       |
| =M->=                             |             | buildin       | end of buffer                       |
| =C-NUM C-x $=                     | hideshow    | buildin       | hide lines indented more NUM colums |
| =C-x $=                           | hideshow    | buildin       | show all lines                      |
| =C-x ==                           |             | buildin       | show current cursor position        |
| =M-z CHAR=                        |             | buildin       | del up to CHAR (but not included)   |
| =C-x r b=                         |             | buildin       | create bookmark                     |
| =C-x r m=                         |             | buildin       | jump to bookmark                    |
| =C-x r l=                         |             | buildin       | list bookmark                       |

#+BEGIN_SRC emacs-lisp
;; Local Variables:
;; byte-compile-warnings: (not free-vars unresolved)
;; End:
#+END_SRC
